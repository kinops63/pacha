
stmwb-nucleo-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  0800b6e8  0800b6e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c270  0800c270  0001c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c278  0800c278  0001c278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c27c  0800c27c  0001c27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  0800c280  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000078  0800c2f0  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b0  0800c325  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f4  200000c4  0800c336  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200016b8  0800c336  000216b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800c336  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002df48  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000692a  00000000  00000000  0004ea22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002a38  00000000  00000000  00055350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000202d  00000000  00000000  00057d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002cc6a  00000000  00000000  00059db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002f516  00000000  00000000  00086a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f98fc  00000000  00000000  000b5f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b8fc  00000000  00000000  001af834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000091  00000000  00000000  001bb130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000c4 	.word	0x200000c4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b6d0 	.word	0x0800b6d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c8 	.word	0x200000c8
 800017c:	0800b6d0 	.word	0x0800b6d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_EXTI_EnableIT_32_63+0x24>)
 8000536:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800053a:	4905      	ldr	r1, [pc, #20]	; (8000550 <LL_EXTI_EnableIT_32_63+0x24>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	58000800 	.word	0x58000800

08000554 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800056c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000578:	68fb      	ldr	r3, [r7, #12]
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000592:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b0:	68fb      	ldr	r3, [r7, #12]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005c2:	f002 f93d 	bl	8002840 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c6:	f002 f941 	bl	800284c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ce:	f7ff ffad 	bl	800052c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005d2:	f008 f85d 	bl	8008690 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d6:	f000 f821 	bl	800061c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005da:	f000 f8c1 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005de:	bf00      	nop
}
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <APPD_EnableCPU2+0x34>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	c403      	stmia	r4!, {r0, r1}
 80005fa:	8022      	strh	r2, [r4, #0]
 80005fc:	3402      	adds	r4, #2
 80005fe:	0c13      	lsrs	r3, r2, #16
 8000600:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000602:	f007 ff81 	bl	8008508 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f007 fa12 	bl	8007a32 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060e:	bf00      	nop
}
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	bf00      	nop
 8000618:	0800b6e8 	.word	0x0800b6e8

0800061c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800063c:	2300      	movs	r3, #0
 800063e:	77fb      	strb	r3, [r7, #31]
 8000640:	e036      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000642:	7ffb      	ldrb	r3, [r7, #31]
 8000644:	4a43      	ldr	r2, [pc, #268]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	4413      	add	r3, r2
 800064a:	799b      	ldrb	r3, [r3, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d02c      	beq.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000650:	7ffb      	ldrb	r3, [r7, #31]
 8000652:	4a40      	ldr	r2, [pc, #256]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000658:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d01b      	beq.n	8000696 <APPD_SetCPU2GpioConfig+0x7a>
 800065e:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d821      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x8c>
 8000664:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000668:	d003      	beq.n	8000672 <APPD_SetCPU2GpioConfig+0x56>
 800066a:	4a3c      	ldr	r2, [pc, #240]	; (800075c <APPD_SetCPU2GpioConfig+0x140>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d009      	beq.n	8000684 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000670:	e01a      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000672:	7ffb      	ldrb	r3, [r7, #31]
 8000674:	4a37      	ldr	r2, [pc, #220]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	889a      	ldrh	r2, [r3, #4]
 800067c:	8bbb      	ldrh	r3, [r7, #28]
 800067e:	4313      	orrs	r3, r2
 8000680:	83bb      	strh	r3, [r7, #28]
          break;
 8000682:	e012      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000684:	7ffb      	ldrb	r3, [r7, #31]
 8000686:	4a33      	ldr	r2, [pc, #204]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	889a      	ldrh	r2, [r3, #4]
 800068e:	8b7b      	ldrh	r3, [r7, #26]
 8000690:	4313      	orrs	r3, r2
 8000692:	837b      	strh	r3, [r7, #26]
          break;
 8000694:	e009      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000696:	7ffb      	ldrb	r3, [r7, #31]
 8000698:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	4413      	add	r3, r2
 800069e:	889a      	ldrh	r2, [r3, #4]
 80006a0:	8b3b      	ldrh	r3, [r7, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	833b      	strh	r3, [r7, #24]
          break;
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b25      	cmp	r3, #37	; 0x25
 80006b4:	d9c5      	bls.n	8000642 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff41 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff57 	bl	8000586 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f002 ff36 	bl	8003550 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f003 f89f 	bl	8003830 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff29 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3f 	bl	8000586 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x140>)
 800070e:	f002 ff1f 	bl	8003550 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x140>)
 800071a:	f003 f889 	bl	8003830 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff13 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff29 	bl	8000586 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 800073a:	f002 ff09 	bl	8003550 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 8000746:	f003 f873 	bl	8003830 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800c00c 	.word	0x0800c00c
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 fb9d 	bl	8001eb0 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f001 fa32 	bl	8001bf8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_EXTI_EnableIT_32_63>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_EXTI_EnableIT_32_63+0x24>)
 80007d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007d6:	4905      	ldr	r1, [pc, #20]	; (80007ec <LL_EXTI_EnableIT_32_63+0x24>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4313      	orrs	r3, r2
 80007dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	58000800 	.word	0x58000800

080007f0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800080a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	cafecafe 	.word	0xcafecafe

0800082c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800083e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	608b      	str	r3, [r1, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800087a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800089c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008ac:	d101      	bne.n	80008b2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008d2:	d101      	bne.n	80008d8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_AHB3_GRP1_EnableClock>:
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <LL_DBGMCU_GetDeviceID+0x18>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e0042000 	.word	0xe0042000

08000934 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <LL_DBGMCU_GetRevisionID+0x18>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	b29b      	uxth	r3, r3
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e0042000 	.word	0xe0042000

08000950 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	431a      	orrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	605a      	str	r2, [r3, #4]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	041b      	lsls	r3, r3, #16
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	615a      	str	r2, [r3, #20]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	431a      	orrs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	615a      	str	r2, [r3, #20]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	609a      	str	r2, [r3, #8]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	619a      	str	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	22ff      	movs	r2, #255	; 0xff
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	22ca      	movs	r2, #202	; 0xca
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2253      	movs	r2, #83	; 0x53
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f023 0207 	bic.w	r2, r3, #7
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	431a      	orrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	609a      	str	r2, [r3, #8]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <MX_APPE_Config+0x18>)
 8000a7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a7e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a80:	f000 f82a 	bl	8000ad8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a84:	f000 f86a 	bl	8000b5c <Config_HSE>

  return;
 8000a88:	bf00      	nop
}
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58004000 	.word	0x58004000

08000a90 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000a94:	f000 f876 	bl	8000b84 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a98:	f000 f88e 	bl	8000bb8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a9c:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <MX_APPE_Init+0x28>)
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fe3e 	bl	8001720 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000aa4:	f7ff fd8b 	bl	80005be <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f009 fa04 	bl	8009eb8 <UTIL_LPM_SetOffMode>


/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ab0:	f000 f890 	bl	8000bd4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ab4:	bf00      	nop
}
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200003a8 	.word	0x200003a8

08000abc <Init_Smps>:

void Init_Smps(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ac0:	bf00      	nop
}
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <Init_Exti>:

void Init_Exti(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ace:	2050      	movs	r0, #80	; 0x50
 8000ad0:	f7ff fe7a 	bl	80007c8 <LL_EXTI_EnableIT_32_63>

  return;
 8000ad4:	bf00      	nop
}
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000adc:	f000 f804 	bl	8000ae8 <Reset_BackupDomain>

  Reset_IPCC();
 8000ae0:	f000 f81a 	bl	8000b18 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000ae4:	bf00      	nop
}
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000aec:	f7ff fed4 	bl	8000898 <LL_RCC_IsActiveFlag_PINRST>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00d      	beq.n	8000b12 <Reset_BackupDomain+0x2a>
 8000af6:	f7ff fee2 	bl	80008be <LL_RCC_IsActiveFlag_SFTRST>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d108      	bne.n	8000b12 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b00:	f002 ff58 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b04:	f002 ff56 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b08:	f7ff fea4 	bl	8000854 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b0c:	f7ff feb3 	bl	8000876 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
}
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b20:	f7ff fee0 	bl	80008e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b24:	213f      	movs	r1, #63	; 0x3f
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <Reset_IPCC+0x40>)
 8000b28:	f7ff ff58 	bl	80009dc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b2c:	213f      	movs	r1, #63	; 0x3f
 8000b2e:	480a      	ldr	r0, [pc, #40]	; (8000b58 <Reset_IPCC+0x40>)
 8000b30:	f7ff ff62 	bl	80009f8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b34:	213f      	movs	r1, #63	; 0x3f
 8000b36:	4808      	ldr	r0, [pc, #32]	; (8000b58 <Reset_IPCC+0x40>)
 8000b38:	f7ff ff0a 	bl	8000950 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff29 	bl	8000996 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <Reset_IPCC+0x40>)
 8000b48:	f7ff ff14 	bl	8000974 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b4c:	213f      	movs	r1, #63	; 0x3f
 8000b4e:	4802      	ldr	r0, [pc, #8]	; (8000b58 <Reset_IPCC+0x40>)
 8000b50:	f7ff ff33 	bl	80009ba <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b54:	bf00      	nop
}
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58000c00 	.word	0x58000c00

08000b5c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f007 fe12 	bl	800878c <OTP_Read>
 8000b68:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d005      	beq.n	8000b7c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	799b      	ldrb	r3, [r3, #6]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fe3b 	bl	80007f0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
}
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <System_Init>:

static void System_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b88:	f7ff ff98 	bl	8000abc <Init_Smps>

  Init_Exti();
 8000b8c:	f7ff ff9d 	bl	8000aca <Init_Exti>

  Init_Rtc();
 8000b90:	f000 f802 	bl	8000b98 <Init_Rtc>

  return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <Init_Rtc+0x1c>)
 8000b9e:	f7ff ff46 	bl	8000a2e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <Init_Rtc+0x1c>)
 8000ba6:	f7ff ff52 	bl	8000a4e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000baa:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <Init_Rtc+0x1c>)
 8000bac:	f7ff ff32 	bl	8000a14 <LL_RTC_EnableWriteProtection>

  return;
 8000bb0:	bf00      	nop
}
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40002800 	.word	0x40002800

08000bb8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bc0:	f7ff fe34 	bl	800082c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bc4:	f009 f966 	bl	8009e94 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f7ff fde7 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bce:	bf00      	nop
}
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000bda:	f007 fadf 	bl	800819c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <appe_Tl_Init+0x50>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	2004      	movs	r0, #4
 8000be4:	f009 fa94 	bl	800a110 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <appe_Tl_Init+0x54>)
 8000bea:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <appe_Tl_Init+0x58>)
 8000bee:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480e      	ldr	r0, [pc, #56]	; (8000c30 <appe_Tl_Init+0x5c>)
 8000bf6:	f007 f993 	bl	8007f20 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <appe_Tl_Init+0x60>)
 8000bfc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <appe_Tl_Init+0x64>)
 8000c00:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <appe_Tl_Init+0x68>)
 8000c04:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c06:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c0a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f007 fc05 	bl	8008420 <TL_MM_Init>

  TL_Enable();
 8000c16:	f007 fabb 	bl	8008190 <TL_Enable>

  return;
 8000c1a:	bf00      	nop
}
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08007f59 	.word	0x08007f59
 8000c28:	20030734 	.word	0x20030734
 8000c2c:	08000c41 	.word	0x08000c41
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	2003094c 	.word	0x2003094c
 8000c38:	20030840 	.word	0x20030840
 8000c3c:	200301f8 	.word	0x200301f8

08000c40 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c4a:	bf00      	nop
}
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	330b      	adds	r3, #11
 8000c66:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d860      	bhi.n	8000d38 <APPE_SysUserEvtRx+0xe0>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <APPE_SysUserEvtRx+0x24>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c9d 	.word	0x08000c9d
 8000c80:	08000cdf 	.word	0x08000cdf
 8000c84:	08000ced 	.word	0x08000ced
 8000c88:	08000d39 	.word	0x08000d39
 8000c8c:	08000d09 	.word	0x08000d09
 8000c90:	08000d19 	.word	0x08000d19
 8000c94:	08000d21 	.word	0x08000d21
 8000c98:	08000d31 	.word	0x08000d31
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fef3 	bl	8007a8c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000ca6:	7b3b      	ldrb	r3, [r7, #12]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	7b7b      	ldrb	r3, [r7, #13]
 8000cac:	461a      	mov	r2, r3
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	4824      	ldr	r0, [pc, #144]	; (8000d44 <APPE_SysUserEvtRx+0xec>)
 8000cb2:	f009 fc31 	bl	800a518 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000cb6:	7c3b      	ldrb	r3, [r7, #16]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4823      	ldr	r0, [pc, #140]	; (8000d48 <APPE_SysUserEvtRx+0xf0>)
 8000cbc:	f009 fc2c 	bl	800a518 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000cc0:	7dbb      	ldrb	r3, [r7, #22]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	7e3b      	ldrb	r3, [r7, #24]
 8000cca:	4820      	ldr	r0, [pc, #128]	; (8000d4c <APPE_SysUserEvtRx+0xf4>)
 8000ccc:	f009 fc24 	bl	800a518 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <APPE_SysUserEvtRx+0xf8>)
 8000cd2:	f009 fc21 	bl	800a518 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f870 	bl	8000dbc <APPE_SysEvtReadyProcessing>
    break;
 8000cdc:	e02d      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000cde:	481d      	ldr	r0, [pc, #116]	; (8000d54 <APPE_SysUserEvtRx+0xfc>)
 8000ce0:	f009 fc1a 	bl	800a518 <iprintf>
    APPE_SysEvtError(pPayload);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f843 	bl	8000d70 <APPE_SysEvtError>
    break;
 8000cea:	e026      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000cec:	481a      	ldr	r0, [pc, #104]	; (8000d58 <APPE_SysUserEvtRx+0x100>)
 8000cee:	f009 fc79 	bl	800a5e4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000cf6:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4816      	ldr	r0, [pc, #88]	; (8000d5c <APPE_SysUserEvtRx+0x104>)
 8000d02:	f009 fc09 	bl	800a518 <iprintf>
    break;
 8000d06:	e018      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4813      	ldr	r0, [pc, #76]	; (8000d60 <APPE_SysUserEvtRx+0x108>)
 8000d12:	f009 fc01 	bl	800a518 <iprintf>
    break;
 8000d16:	e010      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <APPE_SysUserEvtRx+0x10c>)
 8000d1a:	f009 fbfd 	bl	800a518 <iprintf>
    break;
 8000d1e:	e00c      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <APPE_SysUserEvtRx+0x110>)
 8000d2a:	f009 fbf5 	bl	800a518 <iprintf>
    break;
 8000d2e:	e004      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <APPE_SysUserEvtRx+0x114>)
 8000d32:	f009 fbf1 	bl	800a518 <iprintf>
    break;
 8000d36:	e000      	b.n	8000d3a <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000d38:	bf00      	nop
  }

  return;
 8000d3a:	bf00      	nop
}
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	0800b704 	.word	0x0800b704
 8000d48:	0800b728 	.word	0x0800b728
 8000d4c:	0800b744 	.word	0x0800b744
 8000d50:	0800b75c 	.word	0x0800b75c
 8000d54:	0800b77c 	.word	0x0800b77c
 8000d58:	0800b7a0 	.word	0x0800b7a0
 8000d5c:	0800b7f0 	.word	0x0800b7f0
 8000d60:	0800b818 	.word	0x0800b818
 8000d64:	0800b854 	.word	0x0800b854
 8000d68:	0800b878 	.word	0x0800b878
 8000d6c:	0800b8b4 	.word	0x0800b8b4

08000d70 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	330b      	adds	r3, #11
 8000d7e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3302      	adds	r3, #2
 8000d84:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <APPE_SysEvtError+0x40>)
 8000d8e:	f009 fbc3 	bl	800a518 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <APPE_SysEvtError+0x44>)
 8000d9c:	f009 fc22 	bl	800a5e4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000da0:	e003      	b.n	8000daa <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <APPE_SysEvtError+0x48>)
 8000da4:	f009 fc1e 	bl	800a5e4 <puts>
  return;
 8000da8:	bf00      	nop
}
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	0800b8d8 	.word	0x0800b8d8
 8000db4:	0800b908 	.word	0x0800b908
 8000db8:	0800b944 	.word	0x0800b944

08000dbc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	330b      	adds	r3, #11
 8000de0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3302      	adds	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d128      	bne.n	8000e42 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000df0:	481d      	ldr	r0, [pc, #116]	; (8000e68 <APPE_SysEvtReadyProcessing+0xac>)
 8000df2:	f009 fbf7 	bl	800a5e4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000df6:	f7ff fbf5 	bl	80005e4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000dfe:	237f      	movs	r3, #127	; 0x7f
 8000e00:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000e02:	f7ff fd97 	bl	8000934 <LL_DBGMCU_GetRevisionID>
 8000e06:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e0a:	4818      	ldr	r0, [pc, #96]	; (8000e6c <APPE_SysEvtReadyProcessing+0xb0>)
 8000e0c:	f009 fb84 	bl	800a518 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000e16:	f7ff fd7f 	bl	8000918 <LL_DBGMCU_GetDeviceID>
 8000e1a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000e1c:	6a39      	ldr	r1, [r7, #32]
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <APPE_SysEvtReadyProcessing+0xb4>)
 8000e20:	f009 fb7a 	bl	800a518 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 fe16 	bl	8007a60 <SHCI_C2_Config>

    APP_BLE_Init();
 8000e34:	f008 f9cc 	bl	80091d0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f009 f83c 	bl	8009eb8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000e40:	e00e      	b.n	8000e60 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <APPE_SysEvtReadyProcessing+0xb8>)
 8000e4c:	f009 fb64 	bl	800a518 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
  return;
 8000e56:	e003      	b.n	8000e60 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <APPE_SysEvtReadyProcessing+0xbc>)
 8000e5a:	f009 fb5d 	bl	800a518 <iprintf>
  return;
 8000e5e:	bf00      	nop
}
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	0800b97c 	.word	0x0800b97c
 8000e6c:	0800b998 	.word	0x0800b998
 8000e70:	0800b9bc 	.word	0x0800b9bc
 8000e74:	0800b9dc 	.word	0x0800b9dc
 8000e78:	0800ba10 	.word	0x0800ba10

08000e7c <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f009 f848 	bl	8009f18 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000e90:	bf00      	nop
}
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f009 f836 	bl	8009f18 <UTIL_SEQ_Run>
  return;
 8000eac:	bf00      	nop
}
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f009 f948 	bl	800a154 <UTIL_SEQ_SetTask>
  return;
 8000ec4:	bf00      	nop
}
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f009 f9a9 	bl	800a22c <UTIL_SEQ_SetEvt>
  return;
 8000eda:	bf00      	nop
}
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f009 f9be 	bl	800a26c <UTIL_SEQ_WaitEvt>
  return;
 8000ef0:	bf00      	nop
}
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LL_EXTI_EnableIT_0_31>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <LL_EXTI_EnableIT_0_31+0x24>)
 8000f02:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000f06:	4905      	ldr	r1, [pc, #20]	; (8000f1c <LL_EXTI_EnableIT_0_31+0x24>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	58000800 	.word	0x58000800

08000f20 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]

}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58000800 	.word	0x58000800

08000f44 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <ReadRtcSsrValue+0x3c>)
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <ReadRtcSsrValue+0x3c>)
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000f5a:	e005      	b.n	8000f68 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <ReadRtcSsrValue+0x3c>)
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d1f5      	bne.n	8000f5c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000f70:	683b      	ldr	r3, [r7, #0]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40002800 	.word	0x40002800

08000f84 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	491d      	ldr	r1, [pc, #116]	; (800100c <LinkTimerAfter+0x88>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3315      	adds	r3, #21
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d009      	beq.n	8000fc2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	4916      	ldr	r1, [pc, #88]	; (800100c <LinkTimerAfter+0x88>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3314      	adds	r3, #20
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	4911      	ldr	r1, [pc, #68]	; (800100c <LinkTimerAfter+0x88>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3315      	adds	r3, #21
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <LinkTimerAfter+0x88>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3314      	adds	r3, #20
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <LinkTimerAfter+0x88>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3315      	adds	r3, #21
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	701a      	strb	r2, [r3, #0]

  return;
 8000ffe:	bf00      	nop
}
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200000e0 	.word	0x200000e0

08001010 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <LinkTimerBefore+0xb8>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	79ba      	ldrb	r2, [r7, #6]
 8001028:	429a      	cmp	r2, r3
 800102a:	d032      	beq.n	8001092 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800102c:	79ba      	ldrb	r2, [r7, #6]
 800102e:	4927      	ldr	r1, [pc, #156]	; (80010cc <LinkTimerBefore+0xbc>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3314      	adds	r3, #20
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	4922      	ldr	r1, [pc, #136]	; (80010cc <LinkTimerBefore+0xbc>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3315      	adds	r3, #21
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	491d      	ldr	r1, [pc, #116]	; (80010cc <LinkTimerBefore+0xbc>)
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	3315      	adds	r3, #21
 8001064:	79ba      	ldrb	r2, [r7, #6]
 8001066:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	4918      	ldr	r1, [pc, #96]	; (80010cc <LinkTimerBefore+0xbc>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3314      	adds	r3, #20
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	4913      	ldr	r1, [pc, #76]	; (80010cc <LinkTimerBefore+0xbc>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3314      	adds	r3, #20
 800108c:	79fa      	ldrb	r2, [r7, #7]
 800108e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001090:	e014      	b.n	80010bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	490d      	ldr	r1, [pc, #52]	; (80010cc <LinkTimerBefore+0xbc>)
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	3315      	adds	r3, #21
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	4908      	ldr	r1, [pc, #32]	; (80010cc <LinkTimerBefore+0xbc>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	3314      	adds	r3, #20
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	701a      	strb	r2, [r3, #0]
  return;
 80010ba:	bf00      	nop
}
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000170 	.word	0x20000170
 80010cc:	200000e0 	.word	0x200000e0

080010d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010da:	4b4e      	ldr	r3, [pc, #312]	; (8001214 <linkTimer+0x144>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b06      	cmp	r3, #6
 80010e2:	d118      	bne.n	8001116 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010e4:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <linkTimer+0x144>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <linkTimer+0x148>)
 80010ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80010ee:	4a49      	ldr	r2, [pc, #292]	; (8001214 <linkTimer+0x144>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	4949      	ldr	r1, [pc, #292]	; (800121c <linkTimer+0x14c>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	3315      	adds	r3, #21
 8001104:	2206      	movs	r2, #6
 8001106:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001108:	4b45      	ldr	r3, [pc, #276]	; (8001220 <linkTimer+0x150>)
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	81fb      	strh	r3, [r7, #14]
 8001114:	e078      	b.n	8001208 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001116:	f000 f909 	bl	800132c <ReturnTimeElapsed>
 800111a:	4603      	mov	r3, r0
 800111c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	493e      	ldr	r1, [pc, #248]	; (800121c <linkTimer+0x14c>)
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	440b      	add	r3, r1
 800112c:	3308      	adds	r3, #8
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	89fb      	ldrh	r3, [r7, #14]
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	4419      	add	r1, r3
 8001136:	4839      	ldr	r0, [pc, #228]	; (800121c <linkTimer+0x14c>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4403      	add	r3, r0
 8001142:	3308      	adds	r3, #8
 8001144:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	4934      	ldr	r1, [pc, #208]	; (800121c <linkTimer+0x14c>)
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	3308      	adds	r3, #8
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <linkTimer+0x144>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <linkTimer+0x14c>)
 8001164:	460b      	mov	r3, r1
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	440b      	add	r3, r1
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	3308      	adds	r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	429a      	cmp	r2, r3
 8001176:	d337      	bcc.n	80011e8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <linkTimer+0x144>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800117e:	7b7a      	ldrb	r2, [r7, #13]
 8001180:	4926      	ldr	r1, [pc, #152]	; (800121c <linkTimer+0x14c>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	440b      	add	r3, r1
 800118c:	3315      	adds	r3, #21
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001192:	e013      	b.n	80011bc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001194:	7b7a      	ldrb	r2, [r7, #13]
 8001196:	4921      	ldr	r1, [pc, #132]	; (800121c <linkTimer+0x14c>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3315      	adds	r3, #21
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80011a8:	7b7a      	ldrb	r2, [r7, #13]
 80011aa:	491c      	ldr	r1, [pc, #112]	; (800121c <linkTimer+0x14c>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	3315      	adds	r3, #21
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80011bc:	7b3b      	ldrb	r3, [r7, #12]
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d00b      	beq.n	80011da <linkTimer+0x10a>
 80011c2:	7b3a      	ldrb	r2, [r7, #12]
 80011c4:	4915      	ldr	r1, [pc, #84]	; (800121c <linkTimer+0x14c>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	3308      	adds	r3, #8
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d2dc      	bcs.n	8001194 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80011da:	7b7a      	ldrb	r2, [r7, #13]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fecf 	bl	8000f84 <LinkTimerAfter>
 80011e6:	e00f      	b.n	8001208 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <linkTimer+0x144>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff0c 	bl	8001010 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <linkTimer+0x144>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <linkTimer+0x148>)
 8001200:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <linkTimer+0x144>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001208:	89fb      	ldrh	r3, [r7, #14]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000170 	.word	0x20000170
 8001218:	20000171 	.word	0x20000171
 800121c:	200000e0 	.word	0x200000e0
 8001220:	20000174 	.word	0x20000174

08001224 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <UnlinkTimer+0xf8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	429a      	cmp	r2, r3
 800123e:	d111      	bne.n	8001264 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <UnlinkTimer+0xf8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <UnlinkTimer+0xfc>)
 8001248:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <UnlinkTimer+0x100>)
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	3315      	adds	r3, #21
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <UnlinkTimer+0xf8>)
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e03e      	b.n	80012e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001264:	79fa      	ldrb	r2, [r7, #7]
 8001266:	492f      	ldr	r1, [pc, #188]	; (8001324 <UnlinkTimer+0x100>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3314      	adds	r3, #20
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001278:	79fa      	ldrb	r2, [r7, #7]
 800127a:	492a      	ldr	r1, [pc, #168]	; (8001324 <UnlinkTimer+0x100>)
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	3315      	adds	r3, #21
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800128c:	79f9      	ldrb	r1, [r7, #7]
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <UnlinkTimer+0x100>)
 8001292:	460b      	mov	r3, r1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	440b      	add	r3, r1
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4403      	add	r3, r0
 800129c:	3315      	adds	r3, #21
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2d8      	uxtb	r0, r3
 80012a2:	4920      	ldr	r1, [pc, #128]	; (8001324 <UnlinkTimer+0x100>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	3315      	adds	r3, #21
 80012b0:	4602      	mov	r2, r0
 80012b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d013      	beq.n	80012e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80012ba:	79f9      	ldrb	r1, [r7, #7]
 80012bc:	7bba      	ldrb	r2, [r7, #14]
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <UnlinkTimer+0x100>)
 80012c0:	460b      	mov	r3, r1
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4403      	add	r3, r0
 80012ca:	3314      	adds	r3, #20
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2d8      	uxtb	r0, r3
 80012d0:	4914      	ldr	r1, [pc, #80]	; (8001324 <UnlinkTimer+0x100>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	3314      	adds	r3, #20
 80012de:	4602      	mov	r2, r0
 80012e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	490f      	ldr	r1, [pc, #60]	; (8001324 <UnlinkTimer+0x100>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	330c      	adds	r3, #12
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <UnlinkTimer+0xf8>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d107      	bne.n	8001310 <UnlinkTimer+0xec>
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d104      	bne.n	8001310 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <UnlinkTimer+0x104>)
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	601a      	str	r2, [r3, #0]
  }

  return;
 800130e:	bf00      	nop
 8001310:	bf00      	nop
}
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000170 	.word	0x20000170
 8001320:	20000171 	.word	0x20000171
 8001324:	200000e0 	.word	0x200000e0
 8001328:	20000174 	.word	0x20000174

0800132c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <ReturnTimeElapsed+0x70>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133a:	d026      	beq.n	800138a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800133c:	f7ff fe02 	bl	8000f44 <ReadRtcSsrValue>
 8001340:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <ReturnTimeElapsed+0x70>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d805      	bhi.n	8001358 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <ReturnTimeElapsed+0x70>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	e00a      	b.n	800136e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <ReturnTimeElapsed+0x74>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <ReturnTimeElapsed+0x70>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	4413      	add	r3, r2
 800136c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <ReturnTimeElapsed+0x78>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <ReturnTimeElapsed+0x7c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	40d3      	lsrs	r3, r2
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	e001      	b.n	800138e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	b29b      	uxth	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000174 	.word	0x20000174
 80013a0:	2000017c 	.word	0x2000017c
 80013a4:	2000017a 	.word	0x2000017a
 80013a8:	20000179 	.word	0x20000179

080013ac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d108      	bne.n	80013ce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80013bc:	f7ff fdc2 	bl	8000f44 <ReadRtcSsrValue>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <RestartWakeupCounter+0x9c>)
 80013c4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f001 fbc3 	bl	8002b52 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80013cc:	e039      	b.n	8001442 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d803      	bhi.n	80013dc <RestartWakeupCounter+0x30>
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <RestartWakeupCounter+0xa0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d002      	beq.n	80013e2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	3b01      	subs	r3, #1
 80013e0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80013e2:	bf00      	nop
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <RestartWakeupCounter+0xa4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f8      	beq.n	80013e4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <RestartWakeupCounter+0xa4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <RestartWakeupCounter+0xa4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001402:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <RestartWakeupCounter+0xa8>)
 8001406:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800140a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800140c:	2003      	movs	r0, #3
 800140e:	f001 fbae 	bl	8002b6e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <RestartWakeupCounter+0xac>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	0c1b      	lsrs	r3, r3, #16
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <RestartWakeupCounter+0xac>)
 800141e:	4313      	orrs	r3, r2
 8001420:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001422:	f7ff fd8f 	bl	8000f44 <ReadRtcSsrValue>
 8001426:	4603      	mov	r3, r0
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <RestartWakeupCounter+0x9c>)
 800142a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <RestartWakeupCounter+0xa4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <RestartWakeupCounter+0xa4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800143a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800143c:	f3af 8000 	nop.w
  return ;
 8001440:	bf00      	nop
}
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000174 	.word	0x20000174
 800144c:	20000179 	.word	0x20000179
 8001450:	200003a8 	.word	0x200003a8
 8001454:	58000800 	.word	0x58000800
 8001458:	40002800 	.word	0x40002800

0800145c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001462:	4b45      	ldr	r3, [pc, #276]	; (8001578 <RescheduleTimerList+0x11c>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146e:	d107      	bne.n	8001480 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001470:	bf00      	nop
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <RescheduleTimerList+0x120>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f8      	bne.n	8001472 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001480:	4b3e      	ldr	r3, [pc, #248]	; (800157c <RescheduleTimerList+0x120>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <RescheduleTimerList+0x120>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800148e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <RescheduleTimerList+0x124>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	493a      	ldr	r1, [pc, #232]	; (8001584 <RescheduleTimerList+0x128>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3308      	adds	r3, #8
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80014aa:	f7ff ff3f 	bl	800132c <ReturnTimeElapsed>
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d205      	bcs.n	80014c6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <RescheduleTimerList+0x12c>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e04d      	b.n	8001562 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <RescheduleTimerList+0x130>)
 80014ca:	8812      	ldrh	r2, [r2, #0]
 80014cc:	b292      	uxth	r2, r2
 80014ce:	4413      	add	r3, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d906      	bls.n	80014e6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <RescheduleTimerList+0x130>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <RescheduleTimerList+0x12c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e03d      	b.n	8001562 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <RescheduleTimerList+0x12c>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014f6:	e034      	b.n	8001562 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	4922      	ldr	r1, [pc, #136]	; (8001584 <RescheduleTimerList+0x128>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	3308      	adds	r3, #8
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	429a      	cmp	r2, r3
 800150e:	d20a      	bcs.n	8001526 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	491c      	ldr	r1, [pc, #112]	; (8001584 <RescheduleTimerList+0x128>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3308      	adds	r3, #8
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	e013      	b.n	800154e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <RescheduleTimerList+0x128>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3308      	adds	r3, #8
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	1ac9      	subs	r1, r1, r3
 800153e:	4811      	ldr	r0, [pc, #68]	; (8001584 <RescheduleTimerList+0x128>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4403      	add	r3, r0
 800154a:	3308      	adds	r3, #8
 800154c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <RescheduleTimerList+0x128>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3315      	adds	r3, #21
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b06      	cmp	r3, #6
 8001566:	d1c7      	bne.n	80014f8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001568:	89bb      	ldrh	r3, [r7, #12]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff1e 	bl	80013ac <RestartWakeupCounter>

  return ;
 8001570:	bf00      	nop
}
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800
 800157c:	200003a8 	.word	0x200003a8
 8001580:	20000170 	.word	0x20000170
 8001584:	200000e0 	.word	0x200000e0
 8001588:	20000178 	.word	0x20000178
 800158c:	2000017e 	.word	0x2000017e

08001590 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001596:	f3ef 8310 	mrs	r3, PRIMASK
 800159a:	617b      	str	r3, [r7, #20]
  return(result);
 800159c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	22ca      	movs	r2, #202	; 0xca
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
 80015ac:	4b57      	ldr	r3, [pc, #348]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2253      	movs	r2, #83	; 0x53
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80015b4:	4b55      	ldr	r3, [pc, #340]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80015cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015d0:	4950      	ldr	r1, [pc, #320]	; (8001714 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	330c      	adds	r3, #12
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d16e      	bne.n	80016c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80015e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015ea:	494a      	ldr	r1, [pc, #296]	; (8001714 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80015fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015fe:	4945      	ldr	r1, [pc, #276]	; (8001714 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3310      	adds	r3, #16
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d04c      	beq.n	80016b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800161a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800161e:	493d      	ldr	r1, [pc, #244]	; (8001714 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	330d      	adds	r3, #13
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d124      	bne.n	800167e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001638:	2101      	movs	r1, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fdf2 	bl	8001224 <UnlinkTimer>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f383 8810 	msr	PRIMASK, r3
}
 800164a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800164c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001650:	4930      	ldr	r1, [pc, #192]	; (8001714 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3304      	adds	r3, #4
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fa32 	bl	8001ad0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	22ca      	movs	r2, #202	; 0xca
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2253      	movs	r2, #83	; 0x53
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
 800167c:	e012      	b.n	80016a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f383 8810 	msr	PRIMASK, r3
}
 8001688:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800168a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f99a 	bl	80019c8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	22ca      	movs	r2, #202	; 0xca
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2253      	movs	r2, #83	; 0x53
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80016a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	4619      	mov	r1, r3
 80016ac:	69b8      	ldr	r0, [r7, #24]
 80016ae:	f000 fa95 	bl	8001bdc <HW_TS_RTC_Int_AppNot>
 80016b2:	e022      	b.n	80016fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80016b4:	f7ff fed2 	bl	800145c <RescheduleTimerList>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f383 8810 	msr	PRIMASK, r3
}
 80016c2:	e01a      	b.n	80016fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80016c4:	bf00      	nop
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f8      	beq.n	80016c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80016e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f383 8810 	msr	PRIMASK, r3
}
 80016f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001702:	bf00      	nop
}
 8001704:	3728      	adds	r7, #40	; 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200003a8 	.word	0x200003a8
 8001710:	20000170 	.word	0x20000170
 8001714:	200000e0 	.word	0x200000e0
 8001718:	20000178 	.word	0x20000178
 800171c:	58000800 	.word	0x58000800

08001720 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800172c:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <HW_TS_Init+0x188>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	22ca      	movs	r2, #202	; 0xca
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
 8001734:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HW_TS_Init+0x188>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2253      	movs	r2, #83	; 0x53
 800173a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800173c:	4b5b      	ldr	r3, [pc, #364]	; (80018ac <HW_TS_Init+0x18c>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a5a      	ldr	r2, [pc, #360]	; (80018ac <HW_TS_Init+0x18c>)
 8001742:	f043 0320 	orr.w	r3, r3, #32
 8001746:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HW_TS_Init+0x18c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f1c3 0304 	rsb	r3, r3, #4
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HW_TS_Init+0x190>)
 800175c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HW_TS_Init+0x18c>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001766:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800176a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	fa92 f2a2 	rbit	r2, r2
 8001772:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	2a00      	cmp	r2, #0
 800177c:	d101      	bne.n	8001782 <HW_TS_Init+0x62>
  {
    return 32U;
 800177e:	2220      	movs	r2, #32
 8001780:	e003      	b.n	800178a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	fab2 f282 	clz	r2, r2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	40d3      	lsrs	r3, r2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <HW_TS_Init+0x194>)
 8001794:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <HW_TS_Init+0x18c>)
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	b29b      	uxth	r3, r3
 800179c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <HW_TS_Init+0x198>)
 80017a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HW_TS_Init+0x198>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HW_TS_Init+0x194>)
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017bc:	4a3c      	ldr	r2, [pc, #240]	; (80018b0 <HW_TS_Init+0x190>)
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	40d3      	lsrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d904      	bls.n	80017d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HW_TS_Init+0x19c>)
 80017d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	e003      	b.n	80017e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HW_TS_Init+0x19c>)
 80017de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017e4:	f7ff fb9c 	bl	8000f20 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017ec:	f7ff fb84 	bl	8000ef8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13d      	bne.n	8001872 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <HW_TS_Init+0x1a0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017fc:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <HW_TS_Init+0x1a4>)
 80017fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001802:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001804:	2300      	movs	r3, #0
 8001806:	77fb      	strb	r3, [r7, #31]
 8001808:	e00c      	b.n	8001824 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800180a:	7ffa      	ldrb	r2, [r7, #31]
 800180c:	492e      	ldr	r1, [pc, #184]	; (80018c8 <HW_TS_Init+0x1a8>)
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	330c      	adds	r3, #12
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	3301      	adds	r3, #1
 8001822:	77fb      	strb	r3, [r7, #31]
 8001824:	7ffb      	ldrb	r3, [r7, #31]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d9ef      	bls.n	800180a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HW_TS_Init+0x1ac>)
 800182c:	2206      	movs	r2, #6
 800182e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HW_TS_Init+0x188>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HW_TS_Init+0x188>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800183e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HW_TS_Init+0x188>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HW_TS_Init+0x188>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001850:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HW_TS_Init+0x1b0>)
 8001854:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001858:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800185a:	2003      	movs	r0, #3
 800185c:	f001 f987 	bl	8002b6e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HW_TS_Init+0x188>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HW_TS_Init+0x188>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e009      	b.n	8001886 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HW_TS_Init+0x188>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001880:	2003      	movs	r0, #3
 8001882:	f001 f966 	bl	8002b52 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HW_TS_Init+0x188>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800188e:	2200      	movs	r2, #0
 8001890:	2103      	movs	r1, #3
 8001892:	2003      	movs	r0, #3
 8001894:	f001 f91b 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001898:	2003      	movs	r0, #3
 800189a:	f001 f932 	bl	8002b02 <HAL_NVIC_EnableIRQ>

  return;
 800189e:	bf00      	nop
}
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200003a8 	.word	0x200003a8
 80018ac:	40002800 	.word	0x40002800
 80018b0:	20000179 	.word	0x20000179
 80018b4:	2000017a 	.word	0x2000017a
 80018b8:	2000017c 	.word	0x2000017c
 80018bc:	2000017e 	.word	0x2000017e
 80018c0:	20000178 	.word	0x20000178
 80018c4:	20000174 	.word	0x20000174
 80018c8:	200000e0 	.word	0x200000e0
 80018cc:	20000170 	.word	0x20000170
 80018d0:	58000800 	.word	0x58000800

080018d4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ea:	f3ef 8310 	mrs	r3, PRIMASK
 80018ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80018f0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018f8:	e004      	b.n	8001904 <HW_TS_Create+0x30>
  {
    loop++;
 80018fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018fe:	3301      	adds	r3, #1
 8001900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001908:	2b05      	cmp	r3, #5
 800190a:	d80c      	bhi.n	8001926 <HW_TS_Create+0x52>
 800190c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001910:	492c      	ldr	r1, [pc, #176]	; (80019c4 <HW_TS_Create+0xf0>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	330c      	adds	r3, #12
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e9      	bne.n	80018fa <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800192a:	2b06      	cmp	r3, #6
 800192c:	d038      	beq.n	80019a0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800192e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001932:	4924      	ldr	r1, [pc, #144]	; (80019c4 <HW_TS_Create+0xf0>)
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	330c      	adds	r3, #12
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f383 8810 	msr	PRIMASK, r3
}
 800194e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001950:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001954:	491b      	ldr	r1, [pc, #108]	; (80019c4 <HW_TS_Create+0xf0>)
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3310      	adds	r3, #16
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001966:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800196a:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HW_TS_Create+0xf0>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	330d      	adds	r3, #13
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800197c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001980:	4910      	ldr	r1, [pc, #64]	; (80019c4 <HW_TS_Create+0xf0>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001996:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800199e:	e008      	b.n	80019b2 <HW_TS_Create+0xde>
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f383 8810 	msr	PRIMASK, r3
}
 80019aa:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80019b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	372c      	adds	r7, #44	; 0x2c
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200000e0 	.word	0x200000e0

080019c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d2:	f3ef 8310 	mrs	r3, PRIMASK
 80019d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80019d8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80019e0:	2003      	movs	r0, #3
 80019e2:	f001 f89c 	bl	8002b1e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HW_TS_Stop+0xf0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	22ca      	movs	r2, #202	; 0xca
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HW_TS_Stop+0xf0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2253      	movs	r2, #83	; 0x53
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	4930      	ldr	r1, [pc, #192]	; (8001abc <HW_TS_Stop+0xf4>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	330c      	adds	r3, #12
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d142      	bne.n	8001a94 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fc06 	bl	8001224 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HW_TS_Stop+0xf8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d12f      	bne.n	8001a84 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HW_TS_Stop+0xfc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a30:	d107      	bne.n	8001a42 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a32:	bf00      	nop
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f8      	bne.n	8001a34 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a50:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a52:	bf00      	nop
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f8      	beq.n	8001a54 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a72:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HW_TS_Stop+0x100>)
 8001a76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a7a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f001 f876 	bl	8002b6e <HAL_NVIC_ClearPendingIRQ>
 8001a82:	e007      	b.n	8001a94 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HW_TS_Stop+0x104>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	7cfa      	ldrb	r2, [r7, #19]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001a90:	f7ff fce4 	bl	800145c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HW_TS_Stop+0xf0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	22ff      	movs	r2, #255	; 0xff
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f001 f830 	bl	8002b02 <HAL_NVIC_EnableIRQ>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f383 8810 	msr	PRIMASK, r3
}
 8001aac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001aae:	bf00      	nop
}
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200003a8 	.word	0x200003a8
 8001abc:	200000e0 	.word	0x200000e0
 8001ac0:	20000170 	.word	0x20000170
 8001ac4:	40002800 	.word	0x40002800
 8001ac8:	58000800 	.word	0x58000800
 8001acc:	20000171 	.word	0x20000171

08001ad0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	493b      	ldr	r1, [pc, #236]	; (8001bcc <HW_TS_Start+0xfc>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	330c      	adds	r3, #12
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d103      	bne.n	8001afc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff66 	bl	80019c8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001afc:	f3ef 8310 	mrs	r3, PRIMASK
 8001b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b02:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b06:	b672      	cpsid	i
}
 8001b08:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f001 f807 	bl	8002b1e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HW_TS_Start+0x100>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	22ca      	movs	r2, #202	; 0xca
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HW_TS_Start+0x100>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2253      	movs	r2, #83	; 0x53
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	492a      	ldr	r1, [pc, #168]	; (8001bcc <HW_TS_Start+0xfc>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	330c      	adds	r3, #12
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	4925      	ldr	r1, [pc, #148]	; (8001bcc <HW_TS_Start+0xfc>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3308      	adds	r3, #8
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	4920      	ldr	r1, [pc, #128]	; (8001bcc <HW_TS_Start+0xfc>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3304      	adds	r3, #4
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fab6 	bl	80010d0 <linkTimer>
 8001b64:	4603      	mov	r3, r0
 8001b66:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HW_TS_Start+0x104>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HW_TS_Start+0x108>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	7c7a      	ldrb	r2, [r7, #17]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d002      	beq.n	8001b80 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001b7a:	f7ff fc6f 	bl	800145c <RescheduleTimerList>
 8001b7e:	e013      	b.n	8001ba8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001b80:	79fa      	ldrb	r2, [r7, #7]
 8001b82:	4912      	ldr	r1, [pc, #72]	; (8001bcc <HW_TS_Start+0xfc>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3308      	adds	r3, #8
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	8a7b      	ldrh	r3, [r7, #18]
 8001b94:	79fa      	ldrb	r2, [r7, #7]
 8001b96:	1ac9      	subs	r1, r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <HW_TS_Start+0xfc>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4403      	add	r3, r0
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HW_TS_Start+0x100>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	22ff      	movs	r2, #255	; 0xff
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 ffa6 	bl	8002b02 <HAL_NVIC_EnableIRQ>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f383 8810 	msr	PRIMASK, r3
}
 8001bc0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bc2:	bf00      	nop
}
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000e0 	.word	0x200000e0
 8001bd0:	200003a8 	.word	0x200003a8
 8001bd4:	20000170 	.word	0x20000170
 8001bd8:	20000171 	.word	0x20000171

08001bdc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	460b      	mov	r3, r1
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4798      	blx	r3

  return;
 8001bee:	bf00      	nop
}
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	4613      	mov	r3, r2
 8001c08:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10e      	bne.n	8001c36 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HW_UART_Transmit_DMA+0x80>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HW_UART_Transmit_DMA+0x84>)
 8001c20:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HW_UART_Transmit_DMA+0x88>)
 8001c22:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	4814      	ldr	r0, [pc, #80]	; (8001c7c <HW_UART_Transmit_DMA+0x84>)
 8001c2c:	f003 feba 	bl	80059a4 <HAL_UART_Transmit_DMA>
 8001c30:	4603      	mov	r3, r0
 8001c32:	75fb      	strb	r3, [r7, #23]
            break;
 8001c34:	e000      	b.n	8001c38 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001c36:	bf00      	nop
    }

    switch (hal_status)
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d816      	bhi.n	8001c6c <HW_UART_Transmit_DMA+0x74>
 8001c3e:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <HW_UART_Transmit_DMA+0x4c>)
 8001c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001c5b 	.word	0x08001c5b
 8001c4c:	08001c61 	.word	0x08001c61
 8001c50:	08001c67 	.word	0x08001c67
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001c54:	2300      	movs	r3, #0
 8001c56:	75bb      	strb	r3, [r7, #22]
            break;
 8001c58:	e009      	b.n	8001c6e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75bb      	strb	r3, [r7, #22]
            break;
 8001c5e:	e006      	b.n	8001c6e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001c60:	2302      	movs	r3, #2
 8001c62:	75bb      	strb	r3, [r7, #22]
            break;
 8001c64:	e003      	b.n	8001c6e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001c66:	2303      	movs	r3, #3
 8001c68:	75bb      	strb	r3, [r7, #22]
            break;
 8001c6a:	e000      	b.n	8001c6e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001c6c:	bf00      	nop
    }

    return hw_status;
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000180 	.word	0x20000180
 8001c7c:	20000254 	.word	0x20000254
 8001c80:	40013800 	.word	0x40013800

08001c84 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_UART_TxCpltCallback+0x34>)
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d107      	bne.n	8001ca8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_UART_TxCpltCallback+0x38>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_UART_TxCpltCallback+0x38>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4798      	blx	r3
            }
            break;
 8001ca6:	e001      	b.n	8001cac <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001ca8:	bf00      	nop
 8001caa:	e000      	b.n	8001cae <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001cac:	bf00      	nop
    }

    return;
 8001cae:	bf00      	nop
}
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	20000180 	.word	0x20000180

08001cc0 <LL_RCC_LSE_SetDriveCapability>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	f023 0218 	bic.w	r2, r3, #24
 8001cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_AHB1_GRP1_EnableClock>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d10:	68fb      	ldr	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_AHB2_GRP1_EnableClock>:
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d54:	f000 fcee 	bl	8002734 <HAL_Init>

  /* Configure The Vector Table address */
  SCB->VTOR = 0x08000000;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <main+0x3c>)
 8001d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5e:	609a      	str	r2, [r3, #8]
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001d60:	f7fe fe88 	bl	8000a74 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d64:	f000 f814 	bl	8001d90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d68:	f000 f86e 	bl	8001e48 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001d6c:	f000 f88c 	bl	8001e88 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f000 f945 	bl	8001ffe <MX_GPIO_Init>
  MX_DMA_Init();
 8001d74:	f000 f926 	bl	8001fc4 <MX_DMA_Init>
  MX_RTC_Init();
 8001d78:	f000 f8f0 	bl	8001f5c <MX_RTC_Init>
  MX_RF_Init();
 8001d7c:	f000 f8e6 	bl	8001f4c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001d80:	f7fe fe86 	bl	8000a90 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001d84:	f7ff f87a 	bl	8000e7c <MX_APPE_Process>
 8001d88:	e7fc      	b.n	8001d84 <main+0x34>
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09a      	sub	sp, #104	; 0x68
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	2248      	movs	r2, #72	; 0x48
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f008 fd54 	bl	800a84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]
 8001db2:	615a      	str	r2, [r3, #20]
 8001db4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001db6:	f001 fdfd 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff ff80 	bl	8001cc0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <SystemClock_Config+0xb4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <SystemClock_Config+0xb4>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <SystemClock_Config+0xb4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ddc:	2307      	movs	r3, #7
 8001dde:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001de6:	2301      	movs	r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df0:	2340      	movs	r3, #64	; 0x40
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 f96d 	bl	80040dc <HAL_RCC_OscConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001e08:	f000 f906 	bl	8002018 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001e0c:	236f      	movs	r3, #111	; 0x6f
 8001e0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e10:	2302      	movs	r3, #2
 8001e12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fcc9 	bl	80047c4 <HAL_RCC_ClockConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e38:	f000 f8ee 	bl	8002018 <Error_Handler>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3768      	adds	r7, #104	; 0x68
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	58000400 	.word	0x58000400

08001e48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2250      	movs	r2, #80	; 0x50
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 fcf9 	bl	800a84c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001e5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e5e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001e60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001e66:	2302      	movs	r3, #2
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f8e4 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001e7c:	f000 f8cc 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e80:	bf00      	nop
 8001e82:	3750      	adds	r7, #80	; 0x50
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_IPCC_Init+0x20>)
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <MX_IPCC_Init+0x24>)
 8001e90:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_IPCC_Init+0x20>)
 8001e94:	f001 fd08 	bl	80038a8 <HAL_IPCC_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e9e:	f000 f8bb 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000184 	.word	0x20000184
 8001eac:	58000c00 	.word	0x58000c00

08001eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <MX_USART1_UART_Init+0x98>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ee2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ee6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001efc:	f003 fd02 	bl	8005904 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f06:	f000 f887 	bl	8002018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001f0e:	f004 fec8 	bl	8006ca2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001f18:	f000 f87e 	bl	8002018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001f20:	f004 fefd 	bl	8006d1e <HAL_UARTEx_SetRxFifoThreshold>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001f2a:	f000 f875 	bl	8002018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_USART1_UART_Init+0x94>)
 8001f30:	f004 fe7e 	bl	8006c30 <HAL_UARTEx_DisableFifoMode>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001f3a:	f000 f86d 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000254 	.word	0x20000254
 8001f48:	40013800 	.word	0x40013800

08001f4c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <MX_RTC_Init+0x64>)
 8001f64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f6e:	220f      	movs	r2, #15
 8001f70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f92:	480a      	ldr	r0, [pc, #40]	; (8001fbc <MX_RTC_Init+0x60>)
 8001f94:	f003 fada 	bl	800554c <HAL_RTC_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001f9e:	f000 f83b 	bl	8002018 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_RTC_Init+0x60>)
 8001fa8:	f003 fbd0 	bl	800574c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001fb2:	f000 f831 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200003a8 	.word	0x200003a8
 8001fc0:	40002800 	.word	0x40002800

08001fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fc8:	2004      	movs	r0, #4
 8001fca:	f7ff fe8f 	bl	8001cec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fe8c 	bl	8001cec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f7ff fe89 	bl	8001cec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	210f      	movs	r1, #15
 8001fde:	200e      	movs	r0, #14
 8001fe0:	f000 fd75 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fe4:	200e      	movs	r0, #14
 8001fe6:	f000 fd8c 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	210f      	movs	r1, #15
 8001fee:	203a      	movs	r0, #58	; 0x3a
 8001ff0:	f000 fd6d 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001ff4:	203a      	movs	r0, #58	; 0x3a
 8001ff6:	f000 fd84 	bl	8002b02 <HAL_NVIC_EnableIRQ>

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2004      	movs	r0, #4
 8002004:	f7ff fe8b 	bl	8001d1e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	2001      	movs	r0, #1
 800200a:	f7ff fe88 	bl	8001d1e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2002      	movs	r0, #2
 8002010:	f7ff fe85 	bl	8001d1e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>

08002022 <LL_RCC_EnableRTC>:
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_AHB2_GRP1_EnableClock>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4313      	orrs	r3, r2
 800205a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_AHB3_GRP1_EnableClock>:
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800207e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_APB1_GRP1_EnableClock>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_APB1_GRP2_EnableClock>:
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_APB2_GRP1_EnableClock>:
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4313      	orrs	r3, r2
 8002122:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002130:	68fb      	ldr	r3, [r7, #12]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002142:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002146:	f7ff ff96 	bl	8002076 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	202e      	movs	r0, #46	; 0x2e
 8002150:	f000 fcbd 	bl	8002ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002154:	202e      	movs	r0, #46	; 0x2e
 8002156:	f000 fcd4 	bl	8002b02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_IPCC_MspInit+0x44>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002176:	f7ff ff7e 	bl	8002076 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	202c      	movs	r0, #44	; 0x2c
 8002180:	f000 fca5 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002184:	202c      	movs	r0, #44	; 0x2c
 8002186:	f000 fcbc 	bl	8002b02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	202d      	movs	r0, #45	; 0x2d
 8002190:	f000 fc9d 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002194:	202d      	movs	r0, #45	; 0x2d
 8002196:	f000 fcb4 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	58000c00 	.word	0x58000c00

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0a0      	sub	sp, #128	; 0x80
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2250      	movs	r2, #80	; 0x50
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f008 fb3f 	bl	800a84c <memset>
  if(huart->Instance==LPUART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_UART_MspInit+0x1cc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d16e      	bne.n	80022b6 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021d8:	2302      	movs	r3, #2
 80021da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 ff2a 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021f0:	f7ff ff12 	bl	8002018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff ff70 	bl	80020da <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff ff22 	bl	8002044 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002200:	230c      	movs	r3, #12
 8002202:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002210:	2308      	movs	r3, #8
 8002212:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002214:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f001 f997 	bl	8003550 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002222:	4b55      	ldr	r3, [pc, #340]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_UART_MspInit+0x1d4>)
 8002226:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 800222a:	2211      	movs	r2, #17
 800222c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800222e:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 8002230:	2210      	movs	r2, #16
 8002232:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800223a:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002240:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002246:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800224c:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002258:	4847      	ldr	r0, [pc, #284]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 800225a:	f000 fc97 	bl	8002b8c <HAL_DMA_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002264:	f7ff fed8 	bl	8002018 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002268:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800226c:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800226e:	2300      	movs	r3, #0
 8002270:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002282:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002286:	4619      	mov	r1, r3
 8002288:	483b      	ldr	r0, [pc, #236]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 800228a:	f000 ffb1 	bl	80031f0 <HAL_DMAEx_ConfigMuxSync>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002294:	f7ff fec0 	bl	8002018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a37      	ldr	r2, [pc, #220]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 800229c:	67da      	str	r2, [r3, #124]	; 0x7c
 800229e:	4a36      	ldr	r2, [pc, #216]	; (8002378 <HAL_UART_MspInit+0x1d0>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2025      	movs	r0, #37	; 0x25
 80022aa:	f000 fc10 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80022ae:	2025      	movs	r0, #37	; 0x25
 80022b0:	f000 fc27 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022b4:	e05a      	b.n	800236c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <HAL_UART_MspInit+0x1d8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d155      	bne.n	800236c <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 feb6 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0x134>
      Error_Handler();
 80022d8:	f7ff fe9e 	bl	8002018 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022e0:	f7ff ff14 	bl	800210c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	2002      	movs	r0, #2
 80022e6:	f7ff fead 	bl	8002044 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022fa:	2307      	movs	r3, #7
 80022fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002302:	4619      	mov	r1, r3
 8002304:	481f      	ldr	r0, [pc, #124]	; (8002384 <HAL_UART_MspInit+0x1dc>)
 8002306:	f001 f923 	bl	8003550 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800230a:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 800230c:	4a1f      	ldr	r2, [pc, #124]	; (800238c <HAL_UART_MspInit+0x1e4>)
 800230e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002312:	220f      	movs	r2, #15
 8002314:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002318:	2210      	movs	r2, #16
 800231a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002328:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002340:	4811      	ldr	r0, [pc, #68]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002342:	f000 fc23 	bl	8002b8c <HAL_DMA_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800234c:	f7ff fe64 	bl	8002018 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002354:	67da      	str	r2, [r3, #124]	; 0x7c
 8002356:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <HAL_UART_MspInit+0x1e0>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	2024      	movs	r0, #36	; 0x24
 8002362:	f000 fbb4 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002366:	2024      	movs	r0, #36	; 0x24
 8002368:	f000 fbcb 	bl	8002b02 <HAL_NVIC_EnableIRQ>
}
 800236c:	bf00      	nop
 800236e:	3780      	adds	r7, #128	; 0x80
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40008000 	.word	0x40008000
 8002378:	200002e8 	.word	0x200002e8
 800237c:	40020044 	.word	0x40020044
 8002380:	40013800 	.word	0x40013800
 8002384:	48000400 	.word	0x48000400
 8002388:	20000348 	.word	0x20000348
 800238c:	40020444 	.word	0x40020444

08002390 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b096      	sub	sp, #88	; 0x58
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	2250      	movs	r2, #80	; 0x50
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f008 fa53 	bl	800a84c <memset>
  if(hrtc->Instance==RTC)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_RTC_MspInit+0x64>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d11d      	bne.n	80023ec <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fe3c 	bl	800503e <HAL_RCCEx_PeriphCLKConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023cc:	f7ff fe24 	bl	8002018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023d0:	f7ff fe27 	bl	8002022 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023d8:	f7ff fe66 	bl	80020a8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 fb74 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80023e6:	2003      	movs	r0, #3
 80023e8:	f000 fb8b 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3758      	adds	r7, #88	; 0x58
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40002800 	.word	0x40002800

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002444:	f000 f9d0 	bl	80027e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002450:	f7ff f89e 	bl	8001590 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA1_Channel4_IRQHandler+0x10>)
 800245e:	f000 fd76 	bl	8002f4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200002e8 	.word	0x200002e8

0800246c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <USART1_IRQHandler+0x10>)
 8002472:	f003 fb17 	bl	8005aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000254 	.word	0x20000254

08002480 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <LPUART1_IRQHandler+0x10>)
 8002486:	f003 fb0d 	bl	8005aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200001c0 	.word	0x200001c0

08002494 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002498:	f007 fa2a 	bl	80098f0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80024a4:	f007 fa5a 	bl	800995c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80024b0:	f001 f9d6 	bl	8003860 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA2_Channel4_IRQHandler+0x10>)
 80024be:	f000 fd46 	bl	8002f4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000348 	.word	0x20000348

080024cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e00a      	b.n	80024f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024de:	f3af 8000 	nop.w
 80024e2:	4601      	mov	r1, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf0      	blt.n	80024de <_read+0x12>
  }

  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252e:	605a      	str	r2, [r3, #4]
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_isatty>:

int _isatty(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f008 f9a2 	bl	800a8e8 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2002fc08 	.word	0x2002fc08
 80025d0:	00001000 	.word	0x00001000
 80025d4:	200003cc 	.word	0x200003cc
 80025d8:	200016b8 	.word	0x200016b8

080025dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <SystemInit+0x98>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <SystemInit+0x98>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002608:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <SystemInit+0x9c>)
 8002616:	4013      	ands	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002626:	f023 0305 	bic.w	r3, r3, #5
 800262a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	4a0d      	ldr	r2, [pc, #52]	; (800267c <SystemInit+0xa0>)
 8002648:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <SystemInit+0xa0>)
 8002650:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	faf6fefb 	.word	0xfaf6fefb
 800267c:	22041000 	.word	0x22041000

08002680 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002680:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002682:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002684:	3304      	adds	r3, #4

08002686 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002686:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002688:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800268a:	d3f9      	bcc.n	8002680 <CopyDataInit>
  bx lr
 800268c:	4770      	bx	lr

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800268e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002690:	3004      	adds	r0, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002692:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>
  bx lr
 8002696:	4770      	bx	lr

08002698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800269a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800269c:	f7ff ff9e 	bl	80025dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026a0:	480b      	ldr	r0, [pc, #44]	; (80026d0 <LoopForever+0x6>)
 80026a2:	490c      	ldr	r1, [pc, #48]	; (80026d4 <LoopForever+0xa>)
 80026a4:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <LoopForever+0xe>)
 80026a6:	2300      	movs	r3, #0
 80026a8:	f7ff ffed 	bl	8002686 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <LoopForever+0x12>)
 80026ae:	490c      	ldr	r1, [pc, #48]	; (80026e0 <LoopForever+0x16>)
 80026b0:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <LoopForever+0x1a>)
 80026b2:	2300      	movs	r3, #0
 80026b4:	f7ff ffe7 	bl	8002686 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80026b8:	480b      	ldr	r0, [pc, #44]	; (80026e8 <LoopForever+0x1e>)
 80026ba:	490c      	ldr	r1, [pc, #48]	; (80026ec <LoopForever+0x22>)
 80026bc:	2300      	movs	r3, #0
 80026be:	f7ff ffe8 	bl	8002692 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026c2:	f008 f917 	bl	800a8f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026c6:	f7ff fb43 	bl	8001d50 <main>

080026ca <LoopForever>:

LoopForever:
  b LoopForever
 80026ca:	e7fe      	b.n	80026ca <LoopForever>
  ldr   r0, =_estack
 80026cc:	2002fc08 	.word	0x2002fc08
  INIT_DATA _sdata, _edata, _sidata
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000078 	.word	0x20000078
 80026d8:	0800c280 	.word	0x0800c280
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80026dc:	200301e4 	.word	0x200301e4
 80026e0:	20030a67 	.word	0x20030a67
 80026e4:	0800c336 	.word	0x0800c336
  INIT_BSS _sbss, _ebss
 80026e8:	200000c4 	.word	0x200000c4
 80026ec:	200016b8 	.word	0x200016b8

080026f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_IRQHandler>
	...

080026f4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6053      	str	r3, [r2, #4]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e0042000 	.word	0xe0042000

08002714 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	6053      	str	r3, [r2, #4]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e0042000 	.word	0xe0042000

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_Init+0x3c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <HAL_Init+0x3c>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274a:	2003      	movs	r0, #3
 800274c:	f000 f9b4 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002750:	2000      	movs	r0, #0
 8002752:	f000 f80f 	bl	8002774 <HAL_InitTick>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	71fb      	strb	r3, [r7, #7]
 8002760:	e001      	b.n	8002766 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002762:	f7ff fcec 	bl	800213e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002766:	79fb      	ldrb	r3, [r7, #7]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	58004000 	.word	0x58004000

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_InitTick+0x6c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d024      	beq.n	80027d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002788:	f002 f9c8 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_InitTick+0x6c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002798:	fbb3 f3f1 	udiv	r3, r3, r1
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f9ca 	bl	8002b3a <HAL_SYSTICK_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	d809      	bhi.n	80027c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b2:	2200      	movs	r2, #0
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ba:	f000 f988 	bl	8002ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_InitTick+0x70>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e007      	b.n	80027d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e004      	b.n	80027d6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e001      	b.n	80027d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000010 	.word	0x20000010
 80027e4:	2000000c 	.word	0x2000000c

080027e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000010 	.word	0x20000010
 800280c:	200003d0 	.word	0x200003d0

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	200003d0 	.word	0x200003d0

08002828 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_GetTickPrio+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000000c 	.word	0x2000000c

08002840 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002844:	f7ff ff56 	bl	80026f4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002850:	f7ff ff60 	bl	8002714 <LL_DBGMCU_EnableDBGStopMode>
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	; (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db12      	blt.n	8002930 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	490a      	ldr	r1, [pc, #40]	; (800293c <__NVIC_DisableIRQ+0x44>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	3320      	adds	r3, #32
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002924:	f3bf 8f4f 	dsb	sy
}
 8002928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
}
 800292e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0c      	blt.n	800296c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	; (8002978 <__NVIC_SetPendingIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	3340      	adds	r3, #64	; 0x40
 8002968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0c      	blt.n	80029a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <__NVIC_ClearPendingIRQ+0x38>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	3360      	adds	r3, #96	; 0x60
 80029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	; (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
         );
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f7ff ff8e 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fec9 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff fee0 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff90 	bl	8002a0c <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5f 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fed3 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fee3 	bl	80028f8 <__NVIC_DisableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff96 	bl	8002a74 <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff feed 	bl	8002940 <__NVIC_SetPendingIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fefd 	bl	800297c <__NVIC_ClearPendingIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e08e      	b.n	8002cbc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_DMA_Init+0x138>)
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d80f      	bhi.n	8002bca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <HAL_DMA_Init+0x13c>)
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a45      	ldr	r2, [pc, #276]	; (8002ccc <HAL_DMA_Init+0x140>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	009a      	lsls	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a42      	ldr	r2, [pc, #264]	; (8002cd0 <HAL_DMA_Init+0x144>)
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc8:	e00e      	b.n	8002be8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_DMA_Init+0x148>)
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <HAL_DMA_Init+0x140>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	009a      	lsls	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a3c      	ldr	r2, [pc, #240]	; (8002cd8 <HAL_DMA_Init+0x14c>)
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa74 	bl	8003128 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c48:	d102      	bne.n	8002c50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c66:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_DMA_Init+0x106>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d80c      	bhi.n	8002c92 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fa93 	bl	80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e008      	b.n	8002ca4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40020407 	.word	0x40020407
 8002cc8:	bffdfff8 	.word	0xbffdfff8
 8002ccc:	cccccccd 	.word	0xcccccccd
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	bffdfbf8 	.word	0xbffdfbf8
 8002cd8:	40020400 	.word	0x40020400

08002cdc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Start_IT+0x20>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e066      	b.n	8002dca <HAL_DMA_Start_IT+0xee>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d155      	bne.n	8002dbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f9b9 	bl	80030ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 020e 	orr.w	r2, r2, #14
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e00f      	b.n	8002d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 020a 	orr.w	r2, r2, #10
 8002d72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e005      	b.n	8002dc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04f      	b.n	8002e84 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d008      	beq.n	8002e02 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2204      	movs	r2, #4
 8002df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e040      	b.n	8002e84 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 020e 	bic.w	r2, r2, #14
 8002e10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f003 021c 	and.w	r2, r3, #28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d005      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	e047      	b.n	8002f44 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f003 021c 	and.w	r2, r3, #28
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
    }
  }
  return status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 031c 	and.w	r3, r3, #28
 8002f6e:	2204      	movs	r2, #4
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d026      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x7a>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d021      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d107      	bne.n	8002fa2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0204 	bic.w	r2, r2, #4
 8002fa0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f003 021c 	and.w	r2, r3, #28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	2104      	movs	r1, #4
 8002fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d071      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fc6:	e06c      	b.n	80030a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	f003 031c 	and.w	r3, r3, #28
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02e      	beq.n	800303a <HAL_DMA_IRQHandler+0xec>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d029      	beq.n	800303a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 020a 	bic.w	r2, r2, #10
 8003002:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f003 021c 	and.w	r2, r3, #28
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2102      	movs	r1, #2
 800301a:	fa01 f202 	lsl.w	r2, r1, r2
 800301e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d038      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003038:	e033      	b.n	80030a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f003 031c 	and.w	r3, r3, #28
 8003042:	2208      	movs	r2, #8
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02a      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x156>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d025      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 020e 	bic.w	r2, r2, #14
 8003066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f003 021c 	and.w	r2, r3, #28
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
}
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f003 021c 	and.w	r2, r3, #28
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d108      	bne.n	800310c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800310a:	e007      	b.n	800311c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003138:	429a      	cmp	r2, r3
 800313a:	d80a      	bhi.n	8003152 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003148:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6493      	str	r3, [r2, #72]	; 0x48
 8003150:	e007      	b.n	8003162 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	009a      	lsls	r2, r3, #2
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800315c:	4413      	add	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3b08      	subs	r3, #8
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003178:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40020407 	.word	0x40020407
 8003198:	4002081c 	.word	0x4002081c
 800319c:	cccccccd 	.word	0xcccccccd
 80031a0:	40020880 	.word	0x40020880

080031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80031c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	1000823f 	.word	0x1000823f
 80031ec:	40020940 	.word	0x40020940

080031f0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d12b      	bne.n	800325e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003210:	2302      	movs	r3, #2
 8003212:	e025      	b.n	8003260 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8003224:	4013      	ands	r3, r2
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	6811      	ldr	r1, [r2, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	3a01      	subs	r2, #1
 8003230:	04d2      	lsls	r2, r2, #19
 8003232:	4311      	orrs	r1, r2
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	6852      	ldr	r2, [r2, #4]
 8003238:	4311      	orrs	r1, r2
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	7a12      	ldrb	r2, [r2, #8]
 800323e:	0412      	lsls	r2, r2, #16
 8003240:	4311      	orrs	r1, r2
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	7a52      	ldrb	r2, [r2, #9]
 8003246:	0252      	lsls	r2, r2, #9
 8003248:	4311      	orrs	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800324e:	430b      	orrs	r3, r1
 8003250:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e000      	b.n	8003260 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000fdff 	.word	0xe000fdff

08003270 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_FLASH_Unlock+0x38>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	da0b      	bge.n	800329a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_FLASH_Unlock+0x38>)
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_FLASH_Unlock+0x3c>)
 8003286:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_FLASH_Unlock+0x38>)
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_FLASH_Unlock+0x40>)
 800328c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_FLASH_Unlock+0x38>)
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da01      	bge.n	800329a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800329a:	79fb      	ldrb	r3, [r7, #7]
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	58004000 	.word	0x58004000
 80032ac:	45670123 	.word	0x45670123
 80032b0:	cdef89ab 	.word	0xcdef89ab

080032b4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_FLASH_Lock+0x30>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <HAL_FLASH_Lock+0x30>)
 80032c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032c8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_FLASH_Lock+0x30>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	db01      	blt.n	80032d6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	58004000 	.word	0x58004000

080032e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80032f0:	f7ff fa8e 	bl	8002810 <HAL_GetTick>
 80032f4:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80032f6:	e009      	b.n	800330c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80032f8:	f7ff fa8a 	bl	8002810 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	d801      	bhi.n	800330c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e054      	b.n	80033b6 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800330c:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d0ee      	beq.n	80032f8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 800332c:	2201      	movs	r2, #1
 800332e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800333a:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 800333c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003340:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003348:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <FLASH_WaitForLastOperation+0x86>
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003368:	4915      	ldr	r1, [pc, #84]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	618b      	str	r3, [r1, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <FLASH_WaitForLastOperation+0x9a>
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003380:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003388:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <FLASH_WaitForLastOperation+0xdc>)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e011      	b.n	80033b6 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003392:	f7ff fa3d 	bl	8002810 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d801      	bhi.n	80033a6 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e007      	b.n	80033b6 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <FLASH_WaitForLastOperation+0xd8>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033b2:	d0ee      	beq.n	8003392 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	58004000 	.word	0x58004000
 80033c4:	200003d4 	.word	0x200003d4

080033c8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_FLASHEx_Erase+0x9c>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_FLASHEx_Erase+0x16>
 80033da:	2302      	movs	r3, #2
 80033dc:	e03d      	b.n	800345a <HAL_FLASHEx_Erase+0x92>
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_FLASHEx_Erase+0x9c>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_FLASHEx_Erase+0x9c>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ee:	f7ff ff7b 	bl	80032e8 <FLASH_WaitForLastOperation>
 80033f2:	4603      	mov	r3, r0
 80033f4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d12a      	bne.n	8003452 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d124      	bne.n	800344e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f04f 32ff 	mov.w	r2, #4294967295
 800340a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	e012      	b.n	800343a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8003414:	68b8      	ldr	r0, [r7, #8]
 8003416:	f000 f827 	bl	8003468 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800341a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800341e:	f7ff ff63 	bl	80032e8 <FLASH_WaitForLastOperation>
 8003422:	4603      	mov	r3, r0
 8003424:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	601a      	str	r2, [r3, #0]
          break;
 8003432:	e00a      	b.n	800344a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3301      	adds	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4413      	add	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3e4      	bcc.n	8003414 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800344a:	f000 f86f 	bl	800352c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800344e:	f000 f825 	bl	800349c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_FLASHEx_Erase+0x9c>)
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]

  return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200003d4 	.word	0x200003d4

08003468 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <FLASH_PageErase+0x30>)
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4313      	orrs	r3, r2
 800347e:	4a06      	ldr	r2, [pc, #24]	; (8003498 <FLASH_PageErase+0x30>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	6153      	str	r3, [r2, #20]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	58004000 	.word	0x58004000

0800349c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ac:	d117      	bne.n	80034de <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b8:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034ba:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a17      	ldr	r2, [pc, #92]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d0:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034d2:	4b15      	ldr	r3, [pc, #84]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a14      	ldr	r2, [pc, #80]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034dc:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ea:	d117      	bne.n	800351c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <FLASH_FlushCaches+0x8c>)
 80034fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <FLASH_FlushCaches+0x8c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a07      	ldr	r2, [pc, #28]	; (8003528 <FLASH_FlushCaches+0x8c>)
 800350a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <FLASH_FlushCaches+0x8c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <FLASH_FlushCaches+0x8c>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
  }
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	58004000 	.word	0x58004000

0800352c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <FLASH_AcknowledgePageErase+0x20>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	4a05      	ldr	r2, [pc, #20]	; (800354c <FLASH_AcknowledgePageErase+0x20>)
 8003536:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800353a:	f023 0302 	bic.w	r3, r3, #2
 800353e:	6153      	str	r3, [r2, #20]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	58004000 	.word	0x58004000

08003550 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800355e:	e14c      	b.n	80037fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 813e 	beq.w	80037f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d005      	beq.n	8003590 <HAL_GPIO_Init+0x40>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d130      	bne.n	80035f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035c6:	2201      	movs	r2, #1
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	f003 0201 	and.w	r2, r3, #1
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d017      	beq.n	800362e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d123      	bne.n	8003682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	220f      	movs	r2, #15
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	6939      	ldr	r1, [r7, #16]
 800367e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	2203      	movs	r2, #3
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0203 	and.w	r2, r3, #3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8098 	beq.w	80037f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_GPIO_Init+0x2c8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036ee:	d019      	beq.n	8003724 <HAL_GPIO_Init+0x1d4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_GPIO_Init+0x2cc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_GPIO_Init+0x1d0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a49      	ldr	r2, [pc, #292]	; (8003820 <HAL_GPIO_Init+0x2d0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00d      	beq.n	800371c <HAL_GPIO_Init+0x1cc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a48      	ldr	r2, [pc, #288]	; (8003824 <HAL_GPIO_Init+0x2d4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <HAL_GPIO_Init+0x1c8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a47      	ldr	r2, [pc, #284]	; (8003828 <HAL_GPIO_Init+0x2d8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_GPIO_Init+0x1c4>
 8003710:	2304      	movs	r3, #4
 8003712:	e008      	b.n	8003726 <HAL_GPIO_Init+0x1d6>
 8003714:	2307      	movs	r3, #7
 8003716:	e006      	b.n	8003726 <HAL_GPIO_Init+0x1d6>
 8003718:	2303      	movs	r3, #3
 800371a:	e004      	b.n	8003726 <HAL_GPIO_Init+0x1d6>
 800371c:	2302      	movs	r3, #2
 800371e:	e002      	b.n	8003726 <HAL_GPIO_Init+0x1d6>
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_GPIO_Init+0x1d6>
 8003724:	2300      	movs	r3, #0
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	f002 0203 	and.w	r2, r2, #3
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	4093      	lsls	r3, r2
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003736:	4938      	ldr	r1, [pc, #224]	; (8003818 <HAL_GPIO_Init+0x2c8>)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003744:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_GPIO_Init+0x2dc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	43db      	mvns	r3, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003768:	4a30      	ldr	r2, [pc, #192]	; (800382c <HAL_GPIO_Init+0x2dc>)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_GPIO_Init+0x2dc>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003792:	4a26      	ldr	r2, [pc, #152]	; (800382c <HAL_GPIO_Init+0x2dc>)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_GPIO_Init+0x2dc>)
 800379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037be:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_GPIO_Init+0x2dc>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_GPIO_Init+0x2dc>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <HAL_GPIO_Init+0x2dc>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3301      	adds	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f aeab 	bne.w	8003560 <HAL_GPIO_Init+0x10>
  }
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40010000 	.word	0x40010000
 800381c:	48000400 	.word	0x48000400
 8003820:	48000800 	.word	0x48000800
 8003824:	48000c00 	.word	0x48000c00
 8003828:	48001000 	.word	0x48001000
 800382c:	58000800 	.word	0x58000800

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800384c:	e002      	b.n	8003854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_HSEM_IRQHandler+0x30>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_HSEM_IRQHandler+0x30>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	43db      	mvns	r3, r3
 8003874:	4906      	ldr	r1, [pc, #24]	; (8003890 <HAL_HSEM_IRQHandler+0x30>)
 8003876:	4013      	ands	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800387a:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_HSEM_IRQHandler+0x30>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f807 	bl	8003894 <HAL_HSEM_FreeCallback>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	58001500 	.word	0x58001500

08003894 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01e      	beq.n	80038f8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_IPCC_Init+0x60>)
 80038bc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe fc48 	bl	8002160 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80038d0:	68b8      	ldr	r0, [r7, #8]
 80038d2:	f000 f85b 	bl	800398c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f82c 	bl	8003940 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80038f6:	e001      	b.n	80038fc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	58000c00 	.word	0x58000c00

0800390c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e00f      	b.n	800396e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <IPCC_SetDefaultCallbacks+0x44>)
 8003958:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3306      	adds	r3, #6
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	4a08      	ldr	r2, [pc, #32]	; (8003988 <IPCC_SetDefaultCallbacks+0x48>)
 8003966:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d9ec      	bls.n	800394e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	0800390d 	.word	0x0800390d
 8003988:	08003927 	.word	0x08003927

0800398c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80039a0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223f      	movs	r2, #63	; 0x3f
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	58000400 	.word	0x58000400

080039d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <HAL_PWREx_GetVoltageRange+0x18>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	58000400 	.word	0x58000400

080039f0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80039f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a02:	d101      	bne.n	8003a08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_RCC_HSE_Enable>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_HSE_Disable>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_RCC_HSE_IsReady>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a62:	d101      	bne.n	8003a68 <LL_RCC_HSE_IsReady+0x18>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <LL_RCC_HSE_IsReady+0x1a>
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_RCC_HSI_Enable>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_RCC_HSI_Disable>:
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	6013      	str	r3, [r2, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_HSI_IsReady>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d101      	bne.n	8003ac8 <LL_RCC_HSI_IsReady+0x18>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <LL_RCC_HSI_IsReady+0x1a>
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_HSI48_Enable>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_HSI48_Disable>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_HSI48_IsReady>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d101      	bne.n	8003b5a <LL_RCC_HSI48_IsReady+0x18>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <LL_RCC_HSI48_IsReady+0x1a>
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_RCC_LSE_Enable>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_LSE_Disable>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_RCC_LSE_EnableBypass>:
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_LSE_DisableBypass>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_LSE_IsReady>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d101      	bne.n	8003c06 <LL_RCC_LSE_IsReady+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_RCC_LSE_IsReady+0x1a>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_LSI1_Enable>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_LSI1_Disable>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_LSI1_IsReady>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d101      	bne.n	8003c6e <LL_RCC_LSI1_IsReady+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_RCC_LSI1_IsReady+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_LSI2_Enable>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_LSI2_Disable>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_LSI2_IsReady>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d101      	bne.n	8003cd6 <LL_RCC_LSI2_IsReady+0x18>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_RCC_LSI2_IsReady+0x1a>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_RCC_LSI2_SetTrimming>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_RCC_MSI_Enable>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_MSI_Disable>:
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6013      	str	r3, [r2, #0]
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_RCC_MSI_IsReady>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d101      	bne.n	8003d62 <LL_RCC_MSI_IsReady+0x16>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_RCC_MSI_IsReady+0x18>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_MSI_SetRange>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_MSI_GetRange>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2bb0      	cmp	r3, #176	; 0xb0
 8003dac:	d901      	bls.n	8003db2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003dae:	23b0      	movs	r3, #176	; 0xb0
 8003db0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003db2:	687b      	ldr	r3, [r7, #4]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_SetSysClkSource>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 0203 	bic.w	r2, r3, #3
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_GetSysClkSource>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_SetAHBPrescaler>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_SetAHB4Prescaler>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e8e:	f023 020f 	bic.w	r2, r3, #15
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_RCC_SetAPB1Prescaler>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	608b      	str	r3, [r1, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_SetAPB2Prescaler>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_GetAHBPrescaler>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <LL_RCC_GetAHB4Prescaler>:
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_GetAPB1Prescaler>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_GetAPB2Prescaler>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_RCC_PLL_Enable>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_PLL_Disable>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_PLL_IsReady>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fae:	d101      	bne.n	8003fb4 <LL_RCC_PLL_IsReady+0x18>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <LL_RCC_PLL_IsReady+0x1a>
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_RCC_PLL_GetN>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_RCC_PLL_GetR>:
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_PLL_GetDivider>:
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_PLL_GetMainSource>:
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0303 	and.w	r3, r3, #3
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d101      	bne.n	800403a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800405a:	d101      	bne.n	8004060 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004074:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004080:	d101      	bne.n	8004086 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a4:	d101      	bne.n	80040aa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c8:	d101      	bne.n	80040ce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b08d      	sub	sp, #52	; 0x34
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e363      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 808d 	beq.w	8004216 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fc:	f7ff fe89 	bl	8003e12 <LL_RCC_GetSysClkSource>
 8004100:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004102:	f7ff ff82 	bl	800400a <LL_RCC_PLL_GetMainSource>
 8004106:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x3e>
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d147      	bne.n	80041a4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	2b01      	cmp	r3, #1
 8004118:	d144      	bne.n	80041a4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e347      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800412a:	f7ff fe34 	bl	8003d96 <LL_RCC_MSI_GetRange>
 800412e:	4603      	mov	r3, r0
 8004130:	429c      	cmp	r4, r3
 8004132:	d914      	bls.n	800415e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fd2f 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e336      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe0e 	bl	8003d6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe32 	bl	8003dc0 <LL_RCC_MSI_SetCalibTrimming>
 800415c:	e013      	b.n	8004186 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fe03 	bl	8003d6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fe27 	bl	8003dc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fd10 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e317      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004186:	f000 fcc9 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 800418a:	4603      	mov	r3, r0
 800418c:	4aa4      	ldr	r2, [pc, #656]	; (8004420 <HAL_RCC_OscConfig+0x344>)
 800418e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004190:	4ba4      	ldr	r3, [pc, #656]	; (8004424 <HAL_RCC_OscConfig+0x348>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe faed 	bl	8002774 <HAL_InitTick>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d039      	beq.n	8004214 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e308      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01e      	beq.n	80041ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ac:	f7ff fdb0 	bl	8003d10 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fb2e 	bl	8002810 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041b8:	f7fe fb2a 	bl	8002810 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e2f5      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ca:	f7ff fdbf 	bl	8003d4c <LL_RCC_MSI_IsReady>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f1      	beq.n	80041b8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fdc8 	bl	8003d6e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fdec 	bl	8003dc0 <LL_RCC_MSI_SetCalibTrimming>
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ea:	f7ff fda0 	bl	8003d2e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ee:	f7fe fb0f 	bl	8002810 <HAL_GetTick>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f6:	f7fe fb0b 	bl	8002810 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e2d6      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004208:	f7ff fda0 	bl	8003d4c <LL_RCC_MSI_IsReady>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f1      	bne.n	80041f6 <HAL_RCC_OscConfig+0x11a>
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004214:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d047      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004222:	f7ff fdf6 	bl	8003e12 <LL_RCC_GetSysClkSource>
 8004226:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004228:	f7ff feef 	bl	800400a <LL_RCC_PLL_GetMainSource>
 800422c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d005      	beq.n	8004240 <HAL_RCC_OscConfig+0x164>
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d108      	bne.n	800424c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d134      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e2b4      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x180>
 8004256:	f7ff fbdd 	bl	8003a14 <LL_RCC_HSE_Enable>
 800425a:	e001      	b.n	8004260 <HAL_RCC_OscConfig+0x184>
 800425c:	f7ff fbe9 	bl	8003a32 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fad2 	bl	8002810 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe face 	bl	8002810 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e299      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004282:	f7ff fbe5 	bl	8003a50 <LL_RCC_HSE_IsReady>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f1      	beq.n	8004270 <HAL_RCC_OscConfig+0x194>
 800428c:	e011      	b.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fe fabf 	bl	8002810 <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004296:	f7fe fabb 	bl	8002810 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b64      	cmp	r3, #100	; 0x64
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e286      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042a8:	f7ff fbd2 	bl	8003a50 <LL_RCC_HSE_IsReady>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f1      	bne.n	8004296 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04c      	beq.n	8004358 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	f7ff fda8 	bl	8003e12 <LL_RCC_GetSysClkSource>
 80042c2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c4:	f7ff fea1 	bl	800400a <LL_RCC_PLL_GetMainSource>
 80042c8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e266      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fbf1 	bl	8003ad4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042f2:	e031      	b.n	8004358 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d019      	beq.n	8004330 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	f7ff fbba 	bl	8003a74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fa86 	bl	8002810 <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004308:	f7fe fa82 	bl	8002810 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e24d      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800431a:	f7ff fbc9 	bl	8003ab0 <LL_RCC_HSI_IsReady>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f1      	beq.n	8004308 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fbd3 	bl	8003ad4 <LL_RCC_HSI_SetCalibTrimming>
 800432e:	e013      	b.n	8004358 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004330:	f7ff fbaf 	bl	8003a92 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe fa6c 	bl	8002810 <HAL_GetTick>
 8004338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433c:	f7fe fa68 	bl	8002810 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e233      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800434e:	f7ff fbaf 	bl	8003ab0 <LL_RCC_HSI_IsReady>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f1      	bne.n	800433c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80a3 	beq.w	80044b8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d076      	beq.n	8004468 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d046      	beq.n	8004414 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004386:	f7ff fc66 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d113      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004390:	f7ff fc3f 	bl	8003c12 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004394:	f7fe fa3c 	bl	8002810 <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800439c:	f7fe fa38 	bl	8002810 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e203      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043ae:	f7ff fc52 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f1      	beq.n	800439c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80043b8:	f7ff fc5f 	bl	8003c7a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fa28 	bl	8002810 <HAL_GetTick>
 80043c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043c4:	f7fe fa24 	bl	8002810 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1ef      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043d6:	f7ff fc72 	bl	8003cbe <LL_RCC_LSI2_IsReady>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f1      	beq.n	80043c4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fc7c 	bl	8003ce2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80043ea:	f7ff fc23 	bl	8003c34 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7fe fa0f 	bl	8002810 <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043f6:	f7fe fa0b 	bl	8002810 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e1d6      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004408:	f7ff fc25 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f1      	bne.n	80043f6 <HAL_RCC_OscConfig+0x31a>
 8004412:	e051      	b.n	80044b8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004414:	f7ff fbfd 	bl	8003c12 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fe f9fa 	bl	8002810 <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800441e:	e00c      	b.n	800443a <HAL_RCC_OscConfig+0x35e>
 8004420:	20000008 	.word	0x20000008
 8004424:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004428:	f7fe f9f2 	bl	8002810 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1bd      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800443a:	f7ff fc0c 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f1      	beq.n	8004428 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004444:	f7ff fc2a 	bl	8003c9c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800444a:	f7fe f9e1 	bl	8002810 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b03      	cmp	r3, #3
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e1ac      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800445c:	f7ff fc2f 	bl	8003cbe <LL_RCC_LSI2_IsReady>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f1      	bne.n	800444a <HAL_RCC_OscConfig+0x36e>
 8004466:	e027      	b.n	80044b8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004468:	f7ff fc18 	bl	8003c9c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fe f9d0 	bl	8002810 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004474:	f7fe f9cc 	bl	8002810 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b03      	cmp	r3, #3
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e197      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004486:	f7ff fc1a 	bl	8003cbe <LL_RCC_LSI2_IsReady>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f1      	bne.n	8004474 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004490:	f7ff fbd0 	bl	8003c34 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fe f9bc 	bl	8002810 <HAL_GetTick>
 8004498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800449c:	f7fe f9b8 	bl	8002810 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e183      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044ae:	f7ff fbd2 	bl	8003c56 <LL_RCC_LSI1_IsReady>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f1      	bne.n	800449c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c4:	4ba7      	ldr	r3, [pc, #668]	; (8004764 <HAL_RCC_OscConfig+0x688>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d114      	bne.n	80044fa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044d0:	f7ff fa70 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d4:	f7fe f99c 	bl	8002810 <HAL_GetTick>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044dc:	f7fe f998 	bl	8002810 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e163      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ee:	4b9d      	ldr	r3, [pc, #628]	; (8004764 <HAL_RCC_OscConfig+0x688>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_RCC_OscConfig+0x42c>
 8004502:	f7ff fb30 	bl	8003b66 <LL_RCC_LSE_Enable>
 8004506:	e00c      	b.n	8004522 <HAL_RCC_OscConfig+0x446>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d104      	bne.n	800451a <HAL_RCC_OscConfig+0x43e>
 8004510:	f7ff fb4b 	bl	8003baa <LL_RCC_LSE_EnableBypass>
 8004514:	f7ff fb27 	bl	8003b66 <LL_RCC_LSE_Enable>
 8004518:	e003      	b.n	8004522 <HAL_RCC_OscConfig+0x446>
 800451a:	f7ff fb35 	bl	8003b88 <LL_RCC_LSE_Disable>
 800451e:	f7ff fb55 	bl	8003bcc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d014      	beq.n	8004554 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fe f971 	bl	8002810 <HAL_GetTick>
 800452e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7fe f96d 	bl	8002810 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e136      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004548:	f7ff fb51 	bl	8003bee <LL_RCC_LSE_IsReady>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ef      	beq.n	8004532 <HAL_RCC_OscConfig+0x456>
 8004552:	e013      	b.n	800457c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fe f95c 	bl	8002810 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fe f958 	bl	8002810 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e121      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004572:	f7ff fb3c 	bl	8003bee <LL_RCC_LSE_IsReady>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ef      	bne.n	800455c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d014      	beq.n	80045ba <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004590:	f7ff fab5 	bl	8003afe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fe f93c 	bl	8002810 <HAL_GetTick>
 8004598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459c:	f7fe f938 	bl	8002810 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e103      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045ae:	f7ff fac8 	bl	8003b42 <LL_RCC_HSI48_IsReady>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f1      	beq.n	800459c <HAL_RCC_OscConfig+0x4c0>
 80045b8:	e013      	b.n	80045e2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ba:	f7ff fab1 	bl	8003b20 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fe f927 	bl	8002810 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fe f923 	bl	8002810 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0ee      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045d8:	f7ff fab3 	bl	8003b42 <LL_RCC_HSI48_IsReady>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f1      	bne.n	80045c6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80e4 	beq.w	80047b4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ec:	f7ff fc11 	bl	8003e12 <LL_RCC_GetSysClkSource>
 80045f0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	2b02      	cmp	r3, #2
 8004600:	f040 80b4 	bne.w	800476c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	429a      	cmp	r2, r3
 8004610:	d123      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d11c      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d114      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d10d      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d05d      	beq.n	8004716 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d058      	beq.n	8004712 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0a1      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004672:	f7ff fc84 	bl	8003f7e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004676:	f7fe f8cb 	bl	8002810 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe f8c7 	bl	8002810 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e092      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ef      	bne.n	800467e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCC_OscConfig+0x68c>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b6:	0212      	lsls	r2, r2, #8
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046ca:	430a      	orrs	r2, r1
 80046cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046d4:	f7ff fc44 	bl	8003f60 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e8:	f7fe f892 	bl	8002810 <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fe f88e 	bl	8002810 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e059      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ef      	beq.n	80046f0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004710:	e050      	b.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d147      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004724:	f7ff fc1c 	bl	8003f60 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004738:	f7fe f86a 	bl	8002810 <HAL_GetTick>
 800473c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fe f866 	bl	8002810 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e031      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RCC_OscConfig+0x664>
 8004760:	e028      	b.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
 8004762:	bf00      	nop
 8004764:	58000400 	.word	0x58000400
 8004768:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d01e      	beq.n	80047b0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	f7ff fc04 	bl	8003f7e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fe f84b 	bl	8002810 <HAL_GetTick>
 800477a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477e:	f7fe f847 	bl	8002810 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e012      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ef      	bne.n	800477e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800479e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCC_OscConfig+0x6e4>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]
 80047ae:	e001      	b.n	80047b4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3734      	adds	r7, #52	; 0x34
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	bf00      	nop
 80047c0:	eefefffc 	.word	0xeefefffc

080047c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e12d      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d8:	4b98      	ldr	r3, [pc, #608]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d91b      	bls.n	800481e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b95      	ldr	r3, [pc, #596]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 0207 	bic.w	r2, r3, #7
 80047ee:	4993      	ldr	r1, [pc, #588]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f6:	f7fe f80b 	bl	8002810 <HAL_GetTick>
 80047fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047fe:	f7fe f807 	bl	8002810 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e111      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004810:	4b8a      	ldr	r3, [pc, #552]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d1ef      	bne.n	80047fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fafb 	bl	8003e2a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004834:	f7fd ffec 	bl	8002810 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800483c:	f7fd ffe8 	bl	8002810 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0f2      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800484e:	f7ff fbe8 	bl	8004022 <LL_RCC_IsActiveFlag_HPRE>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f1      	beq.n	800483c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff faf2 	bl	8003e52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800486e:	f7fd ffcf 	bl	8002810 <HAL_GetTick>
 8004872:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004876:	f7fd ffcb 	bl	8002810 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0d5      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004888:	f7ff fbdd 	bl	8004046 <LL_RCC_IsActiveFlag_C2HPRE>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f1      	beq.n	8004876 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff faeb 	bl	8003e7e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048a8:	f7fd ffb2 	bl	8002810 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048b0:	f7fd ffae 	bl	8002810 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e0b8      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048c2:	f7ff fbd3 	bl	800406c <LL_RCC_IsActiveFlag_SHDHPRE>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f1      	beq.n	80048b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d016      	beq.n	8004906 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fae5 	bl	8003eac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048e2:	f7fd ff95 	bl	8002810 <HAL_GetTick>
 80048e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ea:	f7fd ff91 	bl	8002810 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e09b      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048fc:	f7ff fbc9 	bl	8004092 <LL_RCC_IsActiveFlag_PPRE1>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f1      	beq.n	80048ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fadb 	bl	8003ed4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800491e:	f7fd ff77 	bl	8002810 <HAL_GetTick>
 8004922:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004926:	f7fd ff73 	bl	8002810 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e07d      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004938:	f7ff fbbd 	bl	80040b6 <LL_RCC_IsActiveFlag_PPRE2>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f1      	beq.n	8004926 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d043      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d106      	bne.n	8004964 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004956:	f7ff f87b 	bl	8003a50 <LL_RCC_HSE_IsReady>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11e      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e067      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d106      	bne.n	800497a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800496c:	f7ff fb16 	bl	8003f9c <LL_RCC_PLL_IsReady>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d113      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e05c      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004982:	f7ff f9e3 	bl	8003d4c <LL_RCC_MSI_IsReady>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e051      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004990:	f7ff f88e 	bl	8003ab0 <LL_RCC_HSI_IsReady>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e04a      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fa21 	bl	8003dea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a8:	f7fd ff32 	bl	8002810 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	e00a      	b.n	80049c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b0:	f7fd ff2e 	bl	8002810 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e036      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	f7ff fa24 	bl	8003e12 <LL_RCC_GetSysClkSource>
 80049ca:	4602      	mov	r2, r0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d1ec      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d6:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d21b      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 0207 	bic.w	r2, r3, #7
 80049ec:	4913      	ldr	r1, [pc, #76]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f4:	f7fd ff0c 	bl	8002810 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049fc:	f7fd ff08 	bl	8002810 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e012      	b.n	8004a34 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCC_ClockConfig+0x278>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d1ef      	bne.n	80049fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a1c:	f000 f87e 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <HAL_RCC_ClockConfig+0x27c>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a26:	f7fd feff 	bl	8002828 <HAL_GetTickPrio>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fd fea1 	bl	8002774 <HAL_InitTick>
 8004a32:	4603      	mov	r3, r0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58004000 	.word	0x58004000
 8004a40:	20000008 	.word	0x20000008

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4a:	f7ff f9e2 	bl	8003e12 <LL_RCC_GetSysClkSource>
 8004a4e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a56:	f7ff f99e 	bl	8003d96 <LL_RCC_MSI_GetRange>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e04b      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d102      	bne.n	8004a78 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e045      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d10a      	bne.n	8004a94 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a7e:	f7fe ffb7 	bl	80039f0 <LL_RCC_HSE_IsEnabledDiv2>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d102      	bne.n	8004a8e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e03a      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004a8e:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e037      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004a94:	f7ff fab9 	bl	800400a <LL_RCC_PLL_GetMainSource>
 8004a98:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x64>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x6a>
 8004aa6:	e00d      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aaa:	60bb      	str	r3, [r7, #8]
        break;
 8004aac:	e015      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004aae:	f7fe ff9f 	bl	80039f0 <LL_RCC_HSE_IsEnabledDiv2>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ab8:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004abc:	e00d      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ac0:	60bb      	str	r3, [r7, #8]
        break;
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ac4:	f7ff f967 	bl	8003d96 <LL_RCC_MSI_GetRange>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad6:	60bb      	str	r3, [r7, #8]
        break;
 8004ad8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004ada:	f7ff fa71 	bl	8003fc0 <LL_RCC_PLL_GetN>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	fb03 f402 	mul.w	r4, r3, r2
 8004ae6:	f7ff fa84 	bl	8003ff2 <LL_RCC_PLL_GetDivider>
 8004aea:	4603      	mov	r3, r0
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	3301      	adds	r3, #1
 8004af0:	fbb4 f4f3 	udiv	r4, r4, r3
 8004af4:	f7ff fa71 	bl	8003fda <LL_RCC_PLL_GetR>
 8004af8:	4603      	mov	r3, r0
 8004afa:	0f5b      	lsrs	r3, r3, #29
 8004afc:	3301      	adds	r3, #1
 8004afe:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b02:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	0800c19c 	.word	0x0800c19c
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	01e84800 	.word	0x01e84800

08004b1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b598      	push	{r3, r4, r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b20:	f7ff ff90 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004b24:	4604      	mov	r4, r0
 8004b26:	f7ff f9e9 	bl	8003efc <LL_RCC_GetAHBPrescaler>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	4a03      	ldr	r2, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd98      	pop	{r3, r4, r7, pc}
 8004b40:	0800c13c 	.word	0x0800c13c

08004b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b44:	b598      	push	{r3, r4, r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b48:	f7ff ffe8 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	f7ff f9ef 	bl	8003f30 <LL_RCC_GetAPB1Prescaler>
 8004b52:	4603      	mov	r3, r0
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd98      	pop	{r3, r4, r7, pc}
 8004b6c:	0800c17c 	.word	0x0800c17c

08004b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b598      	push	{r3, r4, r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b74:	f7ff ffd2 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	f7ff f9e5 	bl	8003f48 <LL_RCC_GetAPB2Prescaler>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	0adb      	lsrs	r3, r3, #11
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd98      	pop	{r3, r4, r7, pc}
 8004b98:	0800c17c 	.word	0x0800c17c

08004b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ba8:	d903      	bls.n	8004bb2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e007      	b.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bc2:	f7ff f9a7 	bl	8003f14 <LL_RCC_GetAHB4Prescaler>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	4a0d      	ldr	r2, [pc, #52]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	0c9c      	lsrs	r4, r3, #18
 8004be6:	f7fe fef5 	bl	80039d4 <HAL_PWREx_GetVoltageRange>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4619      	mov	r1, r3
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f80c 	bl	8004c0c <RCC_SetFlashLatency>
 8004bf4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	0800c19c 	.word	0x0800c19c
 8004c04:	0800c13c 	.word	0x0800c13c
 8004c08:	431bde83 	.word	0x431bde83

08004c0c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b093      	sub	sp, #76	; 0x4c
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <RCC_SetFlashLatency+0xe8>)
 8004c18:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c22:	4a35      	ldr	r2, [pc, #212]	; (8004cf8 <RCC_SetFlashLatency+0xec>)
 8004c24:	f107 031c 	add.w	r3, r7, #28
 8004c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c2e:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <RCC_SetFlashLatency+0xf0>)
 8004c30:	f107 040c 	add.w	r4, r7, #12
 8004c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d11a      	bne.n	8004c7c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	643b      	str	r3, [r7, #64]	; 0x40
 8004c4a:	e013      	b.n	8004c74 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3348      	adds	r3, #72	; 0x48
 8004c52:	443b      	add	r3, r7
 8004c54:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d807      	bhi.n	8004c6e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3348      	adds	r3, #72	; 0x48
 8004c64:	443b      	add	r3, r7
 8004c66:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c6a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004c6c:	e020      	b.n	8004cb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c70:	3301      	adds	r3, #1
 8004c72:	643b      	str	r3, [r7, #64]	; 0x40
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d9e8      	bls.n	8004c4c <RCC_SetFlashLatency+0x40>
 8004c7a:	e019      	b.n	8004cb0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c80:	e013      	b.n	8004caa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	3348      	adds	r3, #72	; 0x48
 8004c88:	443b      	add	r3, r7
 8004c8a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d807      	bhi.n	8004ca4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	3348      	adds	r3, #72	; 0x48
 8004c9a:	443b      	add	r3, r7
 8004c9c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ca0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ca2:	e005      	b.n	8004cb0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d9e8      	bls.n	8004c82 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 0207 	bic.w	r2, r3, #7
 8004cb8:	4911      	ldr	r1, [pc, #68]	; (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cc0:	f7fd fda6 	bl	8002810 <HAL_GetTick>
 8004cc4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cc6:	e008      	b.n	8004cda <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cc8:	f7fd fda2 	bl	8002810 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e007      	b.n	8004cea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <RCC_SetFlashLatency+0xf4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d1ef      	bne.n	8004cc8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	374c      	adds	r7, #76	; 0x4c
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	0800ba44 	.word	0x0800ba44
 8004cf8:	0800ba54 	.word	0x0800ba54
 8004cfc:	0800ba60 	.word	0x0800ba60
 8004d00:	58004000 	.word	0x58004000

08004d04 <LL_RCC_LSE_IsEnabled>:
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <LL_RCC_LSE_IsEnabled+0x18>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <LL_RCC_LSE_IsEnabled+0x1a>
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <LL_RCC_LSE_IsReady>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d101      	bne.n	8004d40 <LL_RCC_LSE_IsReady+0x18>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <LL_RCC_LSE_IsReady+0x1a>
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_RCC_SetRFWKPClockSource>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_SetSMPSClockSource>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_SetSMPSPrescaler>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_SetUSARTClockSource>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f023 0203 	bic.w	r2, r3, #3
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_RCC_SetLPUARTClockSource>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_RCC_SetI2CClockSource>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_SetLPTIMClockSource>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	43db      	mvns	r3, r3
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_RCC_SetSAIClockSource>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_SetRNGClockSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_SetCLK48ClockSource>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <LL_RCC_SetUSBClockSource>:
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ffe3 	bl	8004ee6 <LL_RCC_SetCLK48ClockSource>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <LL_RCC_SetADCClockSource>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_RCC_SetRTCClockSource>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_GetRTCClockSource>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <LL_RCC_ForceBackupDomainReset>:
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_RCC_PLLSAI1_Enable>:
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff0:	6013      	str	r3, [r2, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_PLLSAI1_Disable>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800500a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800500e:	6013      	str	r3, [r2, #0]
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_PLLSAI1_IsReady>:
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502c:	d101      	bne.n	8005032 <LL_RCC_PLLSAI1_IsReady+0x18>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005046:	2300      	movs	r3, #0
 8005048:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800504a:	2300      	movs	r3, #0
 800504c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d034      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005062:	d021      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005068:	d81b      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800506a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506e:	d01d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005074:	d815      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507e:	d110      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005090:	e00d      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f947 	bl	800532a <RCCEx_PLLSAI1_ConfigNP>
 800509c:	4603      	mov	r3, r0
 800509e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050a0:	e005      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77fb      	strb	r3, [r7, #31]
        break;
 80050a6:	e002      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050a8:	bf00      	nop
 80050aa:	e000      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fee8 	bl	8004e8e <LL_RCC_SetSAIClockSource>
 80050be:	e001      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	7ffb      	ldrb	r3, [r7, #31]
 80050c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d046      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80050d0:	f7ff ff56 	bl	8004f80 <LL_RCC_GetRTCClockSource>
 80050d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d03c      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050e0:	f7fe fc68 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ff30 	bl	8004f54 <LL_RCC_SetRTCClockSource>
 80050f4:	e02e      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005100:	f7ff ff4b 	bl	8004f9a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005104:	f7ff ff5a 	bl	8004fbc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005120:	f7ff fdf0 	bl	8004d04 <LL_RCC_LSE_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d114      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800512a:	f7fd fb71 	bl	8002810 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005130:	e00b      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd fb6d 	bl	8002810 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d902      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	77fb      	strb	r3, [r7, #31]
              break;
 8005148:	e004      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800514a:	f7ff fded 	bl	8004d28 <LL_RCC_LSE_IsReady>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d1ee      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005154:	7ffb      	ldrb	r3, [r7, #31]
 8005156:	77bb      	strb	r3, [r7, #30]
 8005158:	e001      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fe2a 	bl	8004dc8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fe35 	bl	8004df4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fe5d 	bl	8004e5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff fe52 	bl	8004e5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fe2a 	bl	8004e20 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fe1f 	bl	8004e20 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d022      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fe8d 	bl	8004f12 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005200:	d107      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005210:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800521a:	d10b      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f8dd 	bl	80053e0 <RCCEx_PLLSAI1_ConfigNQ>
 8005226:	4603      	mov	r3, r0
 8005228:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02b      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005248:	d008      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005252:	d003      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fe2a 	bl	8004eba <LL_RCC_SetRNGClockSource>
 8005266:	e00a      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff fe21 	bl	8004eba <LL_RCC_SetRNGClockSource>
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fe34 	bl	8004ee6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005286:	d107      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d022      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fe3d 	bl	8004f28 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b6:	d107      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d0:	d10b      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f8dd 	bl	8005496 <RCCEx_PLLSAI1_ConfigNR>
 80052dc:	4603      	mov	r3, r0
 80052de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fd26 	bl	8004d4c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fd45 	bl	8004da0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fd2c 	bl	8004d78 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005320:	7fbb      	ldrb	r3, [r7, #30]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005336:	f7ff fe61 	bl	8004ffc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800533a:	f7fd fa69 	bl	8002810 <HAL_GetTick>
 800533e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005340:	e009      	b.n	8005356 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005342:	f7fd fa65 	bl	8002810 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d902      	bls.n	8005356 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	73fb      	strb	r3, [r7, #15]
      break;
 8005354:	e004      	b.n	8005360 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005356:	f7ff fe60 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d137      	bne.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800537a:	4313      	orrs	r3, r2
 800537c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005390:	4313      	orrs	r3, r2
 8005392:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005394:	f7ff fe23 	bl	8004fde <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005398:	f7fd fa3a 	bl	8002810 <HAL_GetTick>
 800539c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800539e:	e009      	b.n	80053b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053a0:	f7fd fa36 	bl	8002810 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d902      	bls.n	80053b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	73fb      	strb	r3, [r7, #15]
        break;
 80053b2:	e004      	b.n	80053be <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053b4:	f7ff fe31 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d1f0      	bne.n	80053a0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d2:	4313      	orrs	r3, r2
 80053d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053ec:	f7ff fe06 	bl	8004ffc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053f0:	f7fd fa0e 	bl	8002810 <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053f6:	e009      	b.n	800540c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f8:	f7fd fa0a 	bl	8002810 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d902      	bls.n	800540c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	73fb      	strb	r3, [r7, #15]
      break;
 800540a:	e004      	b.n	8005416 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800540c:	f7ff fe05 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d137      	bne.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005446:	4313      	orrs	r3, r2
 8005448:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800544a:	f7ff fdc8 	bl	8004fde <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544e:	f7fd f9df 	bl	8002810 <HAL_GetTick>
 8005452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005454:	e009      	b.n	800546a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005456:	f7fd f9db 	bl	8002810 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d902      	bls.n	800546a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	73fb      	strb	r3, [r7, #15]
        break;
 8005468:	e004      	b.n	8005474 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800546a:	f7ff fdd6 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 800546e:	4603      	mov	r3, r0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d1f0      	bne.n	8005456 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800547a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054a2:	f7ff fdab 	bl	8004ffc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054a6:	f7fd f9b3 	bl	8002810 <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054ac:	e009      	b.n	80054c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ae:	f7fd f9af 	bl	8002810 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d902      	bls.n	80054c2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e004      	b.n	80054cc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054c2:	f7ff fdaa 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d137      	bne.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e6:	4313      	orrs	r3, r2
 80054e8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80054ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005500:	f7ff fd6d 	bl	8004fde <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fd f984 	bl	8002810 <HAL_GetTick>
 8005508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800550a:	e009      	b.n	8005520 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800550c:	f7fd f980 	bl	8002810 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d902      	bls.n	8005520 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	73fb      	strb	r3, [r7, #15]
        break;
 800551e:	e004      	b.n	800552a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005520:	f7ff fd7b 	bl	800501a <LL_RCC_PLLSAI1_IsReady>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d1f0      	bne.n	800550c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e09f      	b.n	800569e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc ff0c 	bl	8002390 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005580:	4b49      	ldr	r3, [pc, #292]	; (80056a8 <HAL_RTC_Init+0x15c>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b10      	cmp	r3, #16
 800558a:	d07e      	beq.n	800568a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22ca      	movs	r2, #202	; 0xca
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2253      	movs	r2, #83	; 0x53
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8ab 	bl	80056f8 <RTC_EnterInitMode>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	22ff      	movs	r2, #255	; 0xff
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2204      	movs	r2, #4
 80055b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e067      	b.n	800568e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6899      	ldr	r1, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68d2      	ldr	r2, [r2, #12]
 80055f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6919      	ldr	r1, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	041a      	lsls	r2, r3, #16
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800561c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0203 	bic.w	r2, r2, #3
 800562c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d113      	bne.n	800567c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f829 	bl	80056ac <HAL_RTC_WaitForSynchro>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	22ff      	movs	r2, #255	; 0xff
 8005666:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2204      	movs	r2, #4
 800566c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e010      	b.n	800569e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	22ff      	movs	r2, #255	; 0xff
 8005682:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	e001      	b.n	800568e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40002800 	.word	0x40002800

080056ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056c4:	f7fd f8a4 	bl	8002810 <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056ca:	e009      	b.n	80056e0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056cc:	f7fd f8a0 	bl	8002810 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056da:	d901      	bls.n	80056e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e007      	b.n	80056f0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ee      	beq.n	80056cc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d119      	bne.n	8005742 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005718:	f7fd f87a 	bl	8002810 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800571e:	e009      	b.n	8005734 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005720:	f7fd f876 	bl	8002810 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572e:	d901      	bls.n	8005734 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e007      	b.n	8005744 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0ee      	beq.n	8005720 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005762:	2302      	movs	r3, #2
 8005764:	e0a8      	b.n	80058b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	22ca      	movs	r2, #202	; 0xca
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2253      	movs	r2, #83	; 0x53
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005794:	f7fd f83c 	bl	8002810 <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800579a:	e015      	b.n	80057c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800579c:	f7fd f838 	bl	8002810 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057aa:	d90d      	bls.n	80057c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2203      	movs	r2, #3
 80057b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e077      	b.n	80058b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e2      	bne.n	800579c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80057f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80057f8:	f7fd f80a 	bl	8002810 <HAL_GetTick>
 80057fc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057fe:	e015      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005800:	f7fd f806 	bl	8002810 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800580e:	d90d      	bls.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2203      	movs	r2, #3
 800581c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e045      	b.n	80058b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0e2      	beq.n	8005800 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0207 	bic.w	r2, r2, #7
 8005850:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005862:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005868:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800586a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	22ff      	movs	r2, #255	; 0xff
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	58000800 	.word	0x58000800

080058c4 <LL_RCC_GetUSARTClockSource>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4013      	ands	r3, r2
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_RCC_GetLPUARTClockSource>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4013      	ands	r3, r2
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e042      	b.n	800599c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7fc fc3d 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2224      	movs	r2, #36	; 0x24
 8005932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fe14 	bl	800657c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fbe9 	bl	800612c <UART_SetConfig>
 800595a:	4603      	mov	r3, r0
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e01b      	b.n	800599c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fe93 	bl	80066c0 <UART_CheckIdleState>
 800599a:	4603      	mov	r3, r0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4613      	mov	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d167      	bne.n	8005a8c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Transmit_DMA+0x24>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e060      	b.n	8005a8e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	88fa      	ldrh	r2, [r7, #6]
 80059de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2221      	movs	r2, #33	; 0x21
 80059ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d028      	beq.n	8005a4c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fe:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <HAL_UART_Transmit_DMA+0xf4>)
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a06:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <HAL_UART_Transmit_DMA+0xf8>)
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0e:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <HAL_UART_Transmit_DMA+0xfc>)
 8005a10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a16:	2200      	movs	r2, #0
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	4619      	mov	r1, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3328      	adds	r3, #40	; 0x28
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	f7fd f955 	bl	8002cdc <HAL_DMA_Start_IT>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d009      	beq.n	8005a4c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e020      	b.n	8005a8e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2240      	movs	r2, #64	; 0x40
 8005a52:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	613b      	str	r3, [r7, #16]
   return(result);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	623a      	str	r2, [r7, #32]
 8005a76:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3728      	adds	r7, #40	; 0x28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08006a3d 	.word	0x08006a3d
 8005a9c:	08006ad7 	.word	0x08006ad7
 8005aa0:	08006af3 	.word	0x08006af3

08005aa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b0ba      	sub	sp, #232	; 0xe8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ace:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11b      	bne.n	8005b18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d015      	beq.n	8005b18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 82e3 	beq.w	80060d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
      }
      return;
 8005b16:	e2dd      	b.n	80060d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8123 	beq.w	8005d68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b26:	4b8d      	ldr	r3, [pc, #564]	; (8005d5c <HAL_UART_IRQHandler+0x2b8>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b32:	4b8b      	ldr	r3, [pc, #556]	; (8005d60 <HAL_UART_IRQHandler+0x2bc>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8116 	beq.w	8005d68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d011      	beq.n	8005b6c <HAL_UART_IRQHandler+0xc8>
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <HAL_UART_IRQHandler+0xf8>
 8005b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b92:	f043 0204 	orr.w	r2, r3, #4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d011      	beq.n	8005bcc <HAL_UART_IRQHandler+0x128>
 8005ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc2:	f043 0202 	orr.w	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d017      	beq.n	8005c08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005be4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005be8:	4b5c      	ldr	r3, [pc, #368]	; (8005d5c <HAL_UART_IRQHandler+0x2b8>)
 8005bea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfe:	f043 0208 	orr.w	r2, r3, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d012      	beq.n	8005c3a <HAL_UART_IRQHandler+0x196>
 8005c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00c      	beq.n	8005c3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8249 	beq.w	80060d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d105      	bne.n	8005c6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d005      	beq.n	8005c9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d054      	beq.n	8005d48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fe66 	bl	8006970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d146      	bne.n	8005d40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1d9      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d0e:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <HAL_UART_IRQHandler+0x2c0>)
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fd f8b9 	bl	8002e90 <HAL_DMA_Abort_IT>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d019      	beq.n	8005d58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005d32:	4610      	mov	r0, r2
 8005d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d36:	e00f      	b.n	8005d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9e1 	bl	8006100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3e:	e00b      	b.n	8005d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9dd 	bl	8006100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d46:	e007      	b.n	8005d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9d9 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005d56:	e1bf      	b.n	80060d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	bf00      	nop
    return;
 8005d5a:	e1bd      	b.n	80060d8 <HAL_UART_IRQHandler+0x634>
 8005d5c:	10000001 	.word	0x10000001
 8005d60:	04000120 	.word	0x04000120
 8005d64:	08006b73 	.word	0x08006b73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	f040 8153 	bne.w	8006018 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 814c 	beq.w	8006018 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8145 	beq.w	8006018 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2210      	movs	r2, #16
 8005d94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	f040 80bb 	bne.w	8005f1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 818f 	beq.w	80060dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f080 8187 	bcs.w	80060dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8087 	bne.w	8005efa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1da      	bne.n	8005dec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e1      	bne.n	8005e36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e3      	bne.n	8005e72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec8:	f023 0310 	bic.w	r3, r3, #16
 8005ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005edc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e4      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fc ff6c 	bl	8002dd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8fd 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f1a:	e0df      	b.n	80060dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80d1 	beq.w	80060e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005f3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80cc 	beq.w	80060e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e4      	bne.n	8005f48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e1      	bne.n	8005f7e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0310 	bic.w	r3, r3, #16
 8005fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e4      	bne.n	8005fce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800600a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f87f 	bl	8006114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006016:	e063      	b.n	80060e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <HAL_UART_IRQHandler+0x59e>
 8006024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fdda 	bl	8006bf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006040:	e051      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b00      	cmp	r3, #0
 800604c:	d014      	beq.n	8006078 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800604e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606a:	2b00      	cmp	r3, #0
 800606c:	d03a      	beq.n	80060e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
    }
    return;
 8006076:	e035      	b.n	80060e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <HAL_UART_IRQHandler+0x5f4>
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fd84 	bl	8006b9e <UART_EndTransmit_IT>
    return;
 8006096:	e026      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <HAL_UART_IRQHandler+0x614>
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fdb3 	bl	8006c1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060b6:	e016      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <HAL_UART_IRQHandler+0x642>
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da0c      	bge.n	80060e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fd9b 	bl	8006c08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060d2:	e008      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
      return;
 80060d4:	bf00      	nop
 80060d6:	e006      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
    return;
 80060d8:	bf00      	nop
 80060da:	e004      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
      return;
 80060dc:	bf00      	nop
 80060de:	e002      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
      return;
 80060e0:	bf00      	nop
 80060e2:	e000      	b.n	80060e6 <HAL_UART_IRQHandler+0x642>
    return;
 80060e4:	bf00      	nop
  }
}
 80060e6:	37e8      	adds	r7, #232	; 0xe8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800612c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006130:	b08c      	sub	sp, #48	; 0x30
 8006132:	af00      	add	r7, sp, #0
 8006134:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	431a      	orrs	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	431a      	orrs	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4313      	orrs	r3, r2
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4baf      	ldr	r3, [pc, #700]	; (8006418 <UART_SetConfig+0x2ec>)
 800615c:	4013      	ands	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006164:	430b      	orrs	r3, r1
 8006166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4aa4      	ldr	r2, [pc, #656]	; (800641c <UART_SetConfig+0x2f0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d004      	beq.n	8006198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006194:	4313      	orrs	r3, r2
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80061a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	f023 010f 	bic.w	r1, r3, #15
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a95      	ldr	r2, [pc, #596]	; (8006420 <UART_SetConfig+0x2f4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d125      	bne.n	800621c <UART_SetConfig+0xf0>
 80061d0:	2003      	movs	r0, #3
 80061d2:	f7ff fb77 	bl	80058c4 <LL_RCC_GetUSARTClockSource>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d81b      	bhi.n	8006214 <UART_SetConfig+0xe8>
 80061dc:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0xb8>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006205 	.word	0x08006205
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	0800620d 	.word	0x0800620d
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fa:	e042      	b.n	8006282 <UART_SetConfig+0x156>
 80061fc:	2302      	movs	r3, #2
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006202:	e03e      	b.n	8006282 <UART_SetConfig+0x156>
 8006204:	2304      	movs	r3, #4
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620a:	e03a      	b.n	8006282 <UART_SetConfig+0x156>
 800620c:	2308      	movs	r3, #8
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006212:	e036      	b.n	8006282 <UART_SetConfig+0x156>
 8006214:	2310      	movs	r3, #16
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621a:	e032      	b.n	8006282 <UART_SetConfig+0x156>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a7e      	ldr	r2, [pc, #504]	; (800641c <UART_SetConfig+0x2f0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d12a      	bne.n	800627c <UART_SetConfig+0x150>
 8006226:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800622a:	f7ff fb5b 	bl	80058e4 <LL_RCC_GetLPUARTClockSource>
 800622e:	4603      	mov	r3, r0
 8006230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006234:	d01a      	beq.n	800626c <UART_SetConfig+0x140>
 8006236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800623a:	d81b      	bhi.n	8006274 <UART_SetConfig+0x148>
 800623c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006240:	d00c      	beq.n	800625c <UART_SetConfig+0x130>
 8006242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006246:	d815      	bhi.n	8006274 <UART_SetConfig+0x148>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <UART_SetConfig+0x128>
 800624c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006250:	d008      	beq.n	8006264 <UART_SetConfig+0x138>
 8006252:	e00f      	b.n	8006274 <UART_SetConfig+0x148>
 8006254:	2300      	movs	r3, #0
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625a:	e012      	b.n	8006282 <UART_SetConfig+0x156>
 800625c:	2302      	movs	r3, #2
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006262:	e00e      	b.n	8006282 <UART_SetConfig+0x156>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626a:	e00a      	b.n	8006282 <UART_SetConfig+0x156>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006272:	e006      	b.n	8006282 <UART_SetConfig+0x156>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627a:	e002      	b.n	8006282 <UART_SetConfig+0x156>
 800627c:	2310      	movs	r3, #16
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a65      	ldr	r2, [pc, #404]	; (800641c <UART_SetConfig+0x2f0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	f040 8097 	bne.w	80063bc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800628e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006292:	2b08      	cmp	r3, #8
 8006294:	d823      	bhi.n	80062de <UART_SetConfig+0x1b2>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <UART_SetConfig+0x170>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062df 	.word	0x080062df
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062df 	.word	0x080062df
 80062ac:	080062cf 	.word	0x080062cf
 80062b0:	080062df 	.word	0x080062df
 80062b4:	080062df 	.word	0x080062df
 80062b8:	080062df 	.word	0x080062df
 80062bc:	080062d7 	.word	0x080062d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c0:	f7fe fc40 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 80062c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c6:	e010      	b.n	80062ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c8:	4b56      	ldr	r3, [pc, #344]	; (8006424 <UART_SetConfig+0x2f8>)
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062cc:	e00d      	b.n	80062ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ce:	f7fe fbb9 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80062d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062d4:	e009      	b.n	80062ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062dc:	e005      	b.n	80062ea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 812b 	beq.w	8006548 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	4a4c      	ldr	r2, [pc, #304]	; (8006428 <UART_SetConfig+0x2fc>)
 80062f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fc:	461a      	mov	r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	fbb3 f3f2 	udiv	r3, r3, r2
 8006304:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	4413      	add	r3, r2
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	429a      	cmp	r2, r3
 8006314:	d305      	bcc.n	8006322 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	429a      	cmp	r2, r3
 8006320:	d903      	bls.n	800632a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006328:	e10e      	b.n	8006548 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	2200      	movs	r2, #0
 800632e:	60bb      	str	r3, [r7, #8]
 8006330:	60fa      	str	r2, [r7, #12]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	4a3c      	ldr	r2, [pc, #240]	; (8006428 <UART_SetConfig+0x2fc>)
 8006338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633c:	b29b      	uxth	r3, r3
 800633e:	2200      	movs	r2, #0
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800634c:	f7f9 ff70 	bl	8000230 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4610      	mov	r0, r2
 8006356:	4619      	mov	r1, r3
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	020b      	lsls	r3, r1, #8
 8006362:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006366:	0202      	lsls	r2, r0, #8
 8006368:	6979      	ldr	r1, [r7, #20]
 800636a:	6849      	ldr	r1, [r1, #4]
 800636c:	0849      	lsrs	r1, r1, #1
 800636e:	2000      	movs	r0, #0
 8006370:	460c      	mov	r4, r1
 8006372:	4605      	mov	r5, r0
 8006374:	eb12 0804 	adds.w	r8, r2, r4
 8006378:	eb43 0905 	adc.w	r9, r3, r5
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	469a      	mov	sl, r3
 8006384:	4693      	mov	fp, r2
 8006386:	4652      	mov	r2, sl
 8006388:	465b      	mov	r3, fp
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7f9 ff4f 	bl	8000230 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4613      	mov	r3, r2
 8006398:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a0:	d308      	bcc.n	80063b4 <UART_SetConfig+0x288>
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a8:	d204      	bcs.n	80063b4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	e0c9      	b.n	8006548 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063ba:	e0c5      	b.n	8006548 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c4:	d16d      	bne.n	80064a2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80063c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ca:	3b01      	subs	r3, #1
 80063cc:	2b07      	cmp	r3, #7
 80063ce:	d82d      	bhi.n	800642c <UART_SetConfig+0x300>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x2ac>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063f9 	.word	0x080063f9
 80063dc:	08006401 	.word	0x08006401
 80063e0:	0800642d 	.word	0x0800642d
 80063e4:	08006407 	.word	0x08006407
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	0800642d 	.word	0x0800642d
 80063f4:	0800640f 	.word	0x0800640f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fe fbba 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063fe:	e01b      	b.n	8006438 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <UART_SetConfig+0x2f8>)
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006404:	e018      	b.n	8006438 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7fe fb1d 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800640c:	e014      	b.n	8006438 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006414:	e010      	b.n	8006438 <UART_SetConfig+0x30c>
 8006416:	bf00      	nop
 8006418:	cfff69f3 	.word	0xcfff69f3
 800641c:	40008000 	.word	0x40008000
 8006420:	40013800 	.word	0x40013800
 8006424:	00f42400 	.word	0x00f42400
 8006428:	0800c1dc 	.word	0x0800c1dc
      default:
        pclk = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006436:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8084 	beq.w	8006548 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	4a4b      	ldr	r2, [pc, #300]	; (8006574 <UART_SetConfig+0x448>)
 8006446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644a:	461a      	mov	r2, r3
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006452:	005a      	lsls	r2, r3, #1
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	441a      	add	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2b0f      	cmp	r3, #15
 800646a:	d916      	bls.n	800649a <UART_SetConfig+0x36e>
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006472:	d212      	bcs.n	800649a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f023 030f 	bic.w	r3, r3, #15
 800647c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	b29b      	uxth	r3, r3
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	b29a      	uxth	r2, r3
 800648a:	8bfb      	ldrh	r3, [r7, #30]
 800648c:	4313      	orrs	r3, r2
 800648e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	8bfa      	ldrh	r2, [r7, #30]
 8006496:	60da      	str	r2, [r3, #12]
 8006498:	e056      	b.n	8006548 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064a0:	e052      	b.n	8006548 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064a6:	3b01      	subs	r3, #1
 80064a8:	2b07      	cmp	r3, #7
 80064aa:	d822      	bhi.n	80064f2 <UART_SetConfig+0x3c6>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <UART_SetConfig+0x388>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064d5 	.word	0x080064d5
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	080064f3 	.word	0x080064f3
 80064c0:	080064e3 	.word	0x080064e3
 80064c4:	080064f3 	.word	0x080064f3
 80064c8:	080064f3 	.word	0x080064f3
 80064cc:	080064f3 	.word	0x080064f3
 80064d0:	080064eb 	.word	0x080064eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fe fb4c 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064da:	e010      	b.n	80064fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064dc:	4b26      	ldr	r3, [pc, #152]	; (8006578 <UART_SetConfig+0x44c>)
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064e0:	e00d      	b.n	80064fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e2:	f7fe faaf 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064e8:	e009      	b.n	80064fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064f0:	e005      	b.n	80064fe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064fc:	bf00      	nop
    }

    if (pclk != 0U)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d021      	beq.n	8006548 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <UART_SetConfig+0x448>)
 800650a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650e:	461a      	mov	r2, r3
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	fbb3 f2f2 	udiv	r2, r3, r2
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	441a      	add	r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d909      	bls.n	8006542 <UART_SetConfig+0x416>
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d205      	bcs.n	8006542 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	b29a      	uxth	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e002      	b.n	8006548 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2201      	movs	r2, #1
 800654c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006564:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006568:	4618      	mov	r0, r3
 800656a:	3730      	adds	r7, #48	; 0x30
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	0800c1dc 	.word	0x0800c1dc
 8006578:	00f42400 	.word	0x00f42400

0800657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667a:	d10a      	bne.n	8006692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b098      	sub	sp, #96	; 0x60
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d0:	f7fc f89e 	bl	8002810 <HAL_GetTick>
 80066d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d12f      	bne.n	8006744 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f88e 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d022      	beq.n	8006744 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006712:	653b      	str	r3, [r7, #80]	; 0x50
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671c:	647b      	str	r3, [r7, #68]	; 0x44
 800671e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e063      	b.n	800680c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b04      	cmp	r3, #4
 8006750:	d149      	bne.n	80067e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006752:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675a:	2200      	movs	r2, #0
 800675c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f857 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d03c      	beq.n	80067e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	623b      	str	r3, [r7, #32]
   return(result);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678a:	633b      	str	r3, [r7, #48]	; 0x30
 800678c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e6      	bne.n	800676c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3308      	adds	r3, #8
 80067a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067be:	61fa      	str	r2, [r7, #28]
 80067c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	69b9      	ldr	r1, [r7, #24]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	e841 2300 	strex	r3, r2, [r1]
 80067ca:	617b      	str	r3, [r7, #20]
   return(result);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1e5      	bne.n	800679e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e012      	b.n	800680c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3758      	adds	r7, #88	; 0x58
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	e04f      	b.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682c:	d04b      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682e:	f7fb ffef 	bl	8002810 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	429a      	cmp	r2, r3
 800683c:	d302      	bcc.n	8006844 <UART_WaitOnFlagUntilTimeout+0x30>
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e04e      	b.n	80068e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d037      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d034      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d031      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d110      	bne.n	8006892 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2208      	movs	r2, #8
 8006876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f879 	bl	8006970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2208      	movs	r2, #8
 8006882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e029      	b.n	80068e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a0:	d111      	bne.n	80068c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f85f 	bl	8006970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e00f      	b.n	80068e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4013      	ands	r3, r2
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d0a0      	beq.n	8006826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b08f      	sub	sp, #60	; 0x3c
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	61fb      	str	r3, [r7, #28]
   return(result);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006916:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800691a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60bb      	str	r3, [r7, #8]
   return(result);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006948:	61ba      	str	r2, [r7, #24]
 800694a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6979      	ldr	r1, [r7, #20]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	613b      	str	r3, [r7, #16]
   return(result);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006964:	bf00      	nop
 8006966:	373c      	adds	r7, #60	; 0x3c
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b095      	sub	sp, #84	; 0x54
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800698c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	643b      	str	r3, [r7, #64]	; 0x40
 8006998:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800699c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e6      	bne.n	8006978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e3      	bne.n	80069aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d118      	bne.n	8006a1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0310 	bic.w	r3, r3, #16
 80069fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6979      	ldr	r1, [r7, #20]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	613b      	str	r3, [r7, #16]
   return(result);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e6      	bne.n	80069ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a30:	bf00      	nop
 8006a32:	3754      	adds	r7, #84	; 0x54
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b090      	sub	sp, #64	; 0x40
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d137      	bne.n	8006ac8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3308      	adds	r3, #8
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a80:	633a      	str	r2, [r7, #48]	; 0x30
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e5      	bne.n	8006a60 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	69b9      	ldr	r1, [r7, #24]
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ac6:	e002      	b.n	8006ace <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ac8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006aca:	f7fb f8db 	bl	8001c84 <HAL_UART_TxCpltCallback>
}
 8006ace:	bf00      	nop
 8006ad0:	3740      	adds	r7, #64	; 0x40
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fb01 	bl	80060ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b086      	sub	sp, #24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b06:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b80      	cmp	r3, #128	; 0x80
 8006b1c:	d109      	bne.n	8006b32 <UART_DMAError+0x40>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b21      	cmp	r3, #33	; 0x21
 8006b22:	d106      	bne.n	8006b32 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006b2c:	6978      	ldr	r0, [r7, #20]
 8006b2e:	f7ff fede 	bl	80068ee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d109      	bne.n	8006b54 <UART_DMAError+0x62>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b22      	cmp	r3, #34	; 0x22
 8006b44:	d106      	bne.n	8006b54 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006b4e:	6978      	ldr	r0, [r7, #20]
 8006b50:	f7ff ff0e 	bl	8006970 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f043 0210 	orr.w	r2, r3, #16
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b64:	6978      	ldr	r0, [r7, #20]
 8006b66:	f7ff facb 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fab5 	bl	8006100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fb f84c 	bl	8001c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bec:	bf00      	nop
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e027      	b.n	8006c96 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2224      	movs	r2, #36	; 0x24
 8006c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0201 	bic.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e02d      	b.n	8006d16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	; 0x24
 8006cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f850 	bl	8006d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e02d      	b.n	8006d92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2224      	movs	r2, #36	; 0x24
 8006d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0201 	bic.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f812 	bl	8006d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d108      	bne.n	8006dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dbc:	e031      	b.n	8006e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	0e5b      	lsrs	r3, r3, #25
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	0f5b      	lsrs	r3, r3, #29
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	7b3a      	ldrb	r2, [r7, #12]
 8006dea:	4911      	ldr	r1, [pc, #68]	; (8006e30 <UARTEx_SetNbDataToProcess+0x94>)
 8006dec:	5c8a      	ldrb	r2, [r1, r2]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006df2:	7b3a      	ldrb	r2, [r7, #12]
 8006df4:	490f      	ldr	r1, [pc, #60]	; (8006e34 <UARTEx_SetNbDataToProcess+0x98>)
 8006df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	7b7a      	ldrb	r2, [r7, #13]
 8006e08:	4909      	ldr	r1, [pc, #36]	; (8006e30 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0a:	5c8a      	ldrb	r2, [r1, r2]
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e10:	7b7a      	ldrb	r2, [r7, #13]
 8006e12:	4908      	ldr	r1, [pc, #32]	; (8006e34 <UARTEx_SetNbDataToProcess+0x98>)
 8006e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	0800c1f4 	.word	0x0800c1f4
 8006e34:	0800c1fc 	.word	0x0800c1fc

08006e38 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e42:	f107 0308 	add.w	r3, r7, #8
 8006e46:	2218      	movs	r2, #24
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fcc0 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e50:	233f      	movs	r3, #63	; 0x3f
 8006e52:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006e54:	2381      	movs	r3, #129	; 0x81
 8006e56:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006e58:	1dfb      	adds	r3, r7, #7
 8006e5a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 ff28 	bl	8007cbc <hci_send_req>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da01      	bge.n	8006e76 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006e72:	23ff      	movs	r3, #255	; 0xff
 8006e74:	e000      	b.n	8006e78 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006e76:	79fb      	ldrb	r3, [r7, #7]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006e80:	b5b0      	push	{r4, r5, r7, lr}
 8006e82:	b0ce      	sub	sp, #312	; 0x138
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4605      	mov	r5, r0
 8006e88:	460c      	mov	r4, r1
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e92:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e96:	462a      	mov	r2, r5
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006eaa:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006eae:	4602      	mov	r2, r0
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006eb6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006eba:	460a      	mov	r2, r1
 8006ebc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006ebe:	f107 0310 	add.w	r3, r7, #16
 8006ec2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006ec6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006eca:	3308      	adds	r3, #8
 8006ecc:	f107 0210 	add.w	r2, r7, #16
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006ed6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006eda:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006ede:	4413      	add	r3, r2
 8006ee0:	3309      	adds	r3, #9
 8006ee2:	f107 0210 	add.w	r2, r7, #16
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006eec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ef0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f02:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f06:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f12:	3301      	adds	r3, #1
 8006f14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f1c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f20:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006f24:	8812      	ldrh	r2, [r2, #0]
 8006f26:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f2e:	3302      	adds	r3, #2
 8006f30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f38:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f3c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006f40:	8812      	ldrh	r2, [r2, #0]
 8006f42:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f4a:	3302      	adds	r3, #2
 8006f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006f50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f58:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006f5c:	7812      	ldrb	r2, [r2, #0]
 8006f5e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f64:	3301      	adds	r3, #1
 8006f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006f6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f6e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006f72:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006f74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f82:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f86:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f96:	3308      	adds	r3, #8
 8006f98:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f9c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fc05 	bl	80077b0 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006fa6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006faa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fae:	4413      	add	r3, r2
 8006fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006fb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fb8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006fbc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006fc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006fd2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fbea 	bl	80077b0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006fdc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006fe0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fee:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006ff2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007006:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800700c:	3302      	adds	r3, #2
 800700e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007016:	2218      	movs	r2, #24
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fbd8 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007020:	233f      	movs	r3, #63	; 0x3f
 8007022:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007026:	2383      	movs	r3, #131	; 0x83
 8007028:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800702c:	f107 0310 	add.w	r3, r7, #16
 8007030:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007038:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800703c:	f107 030f 	add.w	r3, r7, #15
 8007040:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007044:	2301      	movs	r3, #1
 8007046:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800704a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fe33 	bl	8007cbc <hci_send_req>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	da01      	bge.n	8007060 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800705c:	23ff      	movs	r3, #255	; 0xff
 800705e:	e004      	b.n	800706a <aci_gap_set_discoverable+0x1ea>
  return status;
 8007060:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007064:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007068:	781b      	ldrb	r3, [r3, #0]
}
 800706a:	4618      	mov	r0, r3
 800706c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007070:	46bd      	mov	sp, r7
 8007072:	bdb0      	pop	{r4, r5, r7, pc}

08007074 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b0cd      	sub	sp, #308	; 0x134
 8007078:	af00      	add	r7, sp, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007084:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007092:	4622      	mov	r2, r4
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800709e:	4602      	mov	r2, r0
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80070aa:	460a      	mov	r2, r1
 80070ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80070ae:	f107 0310 	add.w	r3, r7, #16
 80070b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	2207      	movs	r2, #7
 80070bc:	2100      	movs	r1, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fb86 	bl	80077d0 <Osal_MemSet>
  int index_input = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070d2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80070e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80070f0:	7812      	ldrb	r2, [r2, #0]
 80070f2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80070f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070f8:	3301      	adds	r3, #1
 80070fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80070fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007106:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800710e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800711c:	2218      	movs	r2, #24
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fb55 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007126:	233f      	movs	r3, #63	; 0x3f
 8007128:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800712c:	238a      	movs	r3, #138	; 0x8a
 800712e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007132:	f107 0310 	add.w	r3, r7, #16
 8007136:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800713a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800713e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800714a:	2307      	movs	r3, #7
 800714c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fdb0 	bl	8007cbc <hci_send_req>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	da01      	bge.n	8007166 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007162:	23ff      	movs	r3, #255	; 0xff
 8007164:	e02e      	b.n	80071c4 <aci_gap_init+0x150>
  if ( resp.Status )
 8007166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <aci_gap_init+0x10c>
    return resp.Status;
 8007174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007178:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	e021      	b.n	80071c4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007184:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007188:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800718c:	b29a      	uxth	r2, r3
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80071a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80071ac:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80071b6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80071c0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd90      	pop	{r4, r7, pc}

080071ce <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b0cc      	sub	sp, #304	; 0x130
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	4602      	mov	r2, r0
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071de:	6019      	str	r1, [r3, #0]
 80071e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80071ea:	f107 0310 	add.w	r3, r7, #16
 80071ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800720c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007218:	3301      	adds	r3, #1
 800721a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800721e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007222:	1c58      	adds	r0, r3, #1
 8007224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007228:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800722c:	781a      	ldrb	r2, [r3, #0]
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007236:	6819      	ldr	r1, [r3, #0]
 8007238:	f000 faba 	bl	80077b0 <Osal_MemCpy>
  index_input += AdvDataLen;
 800723c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007240:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800724a:	4413      	add	r3, r2
 800724c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007254:	2218      	movs	r2, #24
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fab9 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800725e:	233f      	movs	r3, #63	; 0x3f
 8007260:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007264:	238e      	movs	r3, #142	; 0x8e
 8007266:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800727a:	f107 030f 	add.w	r3, r7, #15
 800727e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007288:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fd14 	bl	8007cbc <hci_send_req>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	da01      	bge.n	800729e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800729a:	23ff      	movs	r3, #255	; 0xff
 800729c:	e004      	b.n	80072a8 <aci_gap_update_adv_data+0xda>
  return status;
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072a6:	781b      	ldrb	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b088      	sub	sp, #32
 80072b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072bc:	f107 0308 	add.w	r3, r7, #8
 80072c0:	2218      	movs	r2, #24
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fa83 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80072ca:	233f      	movs	r3, #63	; 0x3f
 80072cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80072ce:	f240 1301 	movw	r3, #257	; 0x101
 80072d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80072d4:	1dfb      	adds	r3, r7, #7
 80072d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80072d8:	2301      	movs	r3, #1
 80072da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fcea 	bl	8007cbc <hci_send_req>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da01      	bge.n	80072f2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80072ee:	23ff      	movs	r3, #255	; 0xff
 80072f0:	e000      	b.n	80072f4 <aci_gatt_init+0x42>
  return status;
 80072f2:	79fb      	ldrb	r3, [r7, #7]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80072fc:	b5b0      	push	{r4, r5, r7, lr}
 80072fe:	b0cc      	sub	sp, #304	; 0x130
 8007300:	af00      	add	r7, sp, #0
 8007302:	4605      	mov	r5, r0
 8007304:	460c      	mov	r4, r1
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007312:	462a      	mov	r2, r5
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800731e:	4622      	mov	r2, r4
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800732a:	4602      	mov	r2, r0
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007336:	460a      	mov	r2, r1
 8007338:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800733a:	f107 0310 	add.w	r3, r7, #16
 800733e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007358:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800735c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007360:	8812      	ldrh	r2, [r2, #0]
 8007362:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007368:	3302      	adds	r3, #2
 800736a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800736e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007376:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800737a:	8812      	ldrh	r2, [r2, #0]
 800737c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800737e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007382:	3302      	adds	r3, #2
 8007384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007390:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007394:	7812      	ldrb	r2, [r2, #0]
 8007396:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739c:	3301      	adds	r3, #1
 800739e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073aa:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80073ae:	7812      	ldrb	r2, [r2, #0]
 80073b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80073b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b6:	3301      	adds	r3, #1
 80073b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	1d98      	adds	r0, r3, #6
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80073d2:	f000 f9ed 	bl	80077b0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073e4:	4413      	add	r3, r2
 80073e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ee:	2218      	movs	r2, #24
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f9ec 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073f8:	233f      	movs	r3, #63	; 0x3f
 80073fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80073fe:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007402:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007406:	f107 0310 	add.w	r3, r7, #16
 800740a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800740e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007412:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007416:	f107 030f 	add.w	r3, r7, #15
 800741a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800741e:	2301      	movs	r3, #1
 8007420:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007424:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fc46 	bl	8007cbc <hci_send_req>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	da01      	bge.n	800743a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007436:	23ff      	movs	r3, #255	; 0xff
 8007438:	e004      	b.n	8007444 <aci_gatt_update_char_value+0x148>
  return status;
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007442:	781b      	ldrb	r3, [r3, #0]
}
 8007444:	4618      	mov	r0, r3
 8007446:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800744a:	46bd      	mov	sp, r7
 800744c:	bdb0      	pop	{r4, r5, r7, pc}

0800744e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b0cc      	sub	sp, #304	; 0x130
 8007452:	af00      	add	r7, sp, #0
 8007454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007462:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007466:	4602      	mov	r2, r0
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007472:	460a      	mov	r2, r1
 8007474:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007476:	f107 0310 	add.w	r3, r7, #16
 800747a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007494:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007498:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074a4:	3301      	adds	r3, #1
 80074a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80074aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80074b6:	7812      	ldrb	r2, [r2, #0]
 80074b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80074ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074be:	3301      	adds	r3, #1
 80074c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80074c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c8:	1c98      	adds	r0, r3, #2
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074dc:	6819      	ldr	r1, [r3, #0]
 80074de:	f000 f967 	bl	80077b0 <Osal_MemCpy>
  index_input += Length;
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80074f0:	4413      	add	r3, r2
 80074f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074fa:	2218      	movs	r2, #24
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 f966 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007504:	233f      	movs	r3, #63	; 0x3f
 8007506:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800750a:	230c      	movs	r3, #12
 800750c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007518:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800751c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007520:	f107 030f 	add.w	r3, r7, #15
 8007524:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007528:	2301      	movs	r3, #1
 800752a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800752e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fbc1 	bl	8007cbc <hci_send_req>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	da01      	bge.n	8007544 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	e004      	b.n	800754e <aci_hal_write_config_data+0x100>
  return status;
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800754c:	781b      	ldrb	r3, [r3, #0]
}
 800754e:	4618      	mov	r0, r3
 8007550:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b0cc      	sub	sp, #304	; 0x130
 800755c:	af00      	add	r7, sp, #0
 800755e:	4602      	mov	r2, r0
 8007560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007564:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007572:	460a      	mov	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007576:	f107 0310 	add.w	r3, r7, #16
 800757a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800757e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007582:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007594:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007598:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80075a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075a4:	3301      	adds	r3, #1
 80075a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80075aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80075ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075be:	3301      	adds	r3, #1
 80075c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075c8:	2218      	movs	r2, #24
 80075ca:	2100      	movs	r1, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 f8ff 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075d2:	233f      	movs	r3, #63	; 0x3f
 80075d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80075d8:	230f      	movs	r3, #15
 80075da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075de:	f107 0310 	add.w	r3, r7, #16
 80075e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075ee:	f107 030f 	add.w	r3, r7, #15
 80075f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fb5a 	bl	8007cbc <hci_send_req>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	da01      	bge.n	8007612 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800760e:	23ff      	movs	r3, #255	; 0xff
 8007610:	e004      	b.n	800761c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800761a:	781b      	ldrb	r3, [r3, #0]
}
 800761c:	4618      	mov	r0, r3
 800761e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b088      	sub	sp, #32
 800762a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	2218      	movs	r2, #24
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f8c9 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x03;
 800763e:	2303      	movs	r3, #3
 8007640:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007642:	2303      	movs	r3, #3
 8007644:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007646:	1dfb      	adds	r3, r7, #7
 8007648:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800764a:	2301      	movs	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800764e:	f107 0308 	add.w	r3, r7, #8
 8007652:	2100      	movs	r1, #0
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fb31 	bl	8007cbc <hci_send_req>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	da01      	bge.n	8007664 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007660:	23ff      	movs	r3, #255	; 0xff
 8007662:	e000      	b.n	8007666 <hci_reset+0x40>
  return status;
 8007664:	79fb      	ldrb	r3, [r7, #7]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <hci_read_bd_addr>:
  Osal_MemCpy( (void*)LMP_Features, (const void*)resp.LMP_Features, 8 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_read_bd_addr( uint8_t* BD_ADDR )
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b08a      	sub	sp, #40	; 0x28
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_read_bd_addr_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	2207      	movs	r2, #7
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f8a6 	bl	80077d0 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	2218      	movs	r2, #24
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f89f 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x04;
 8007692:	2304      	movs	r3, #4
 8007694:	823b      	strh	r3, [r7, #16]
  rq.ocf = 0x009;
 8007696:	2309      	movs	r3, #9
 8007698:	827b      	strh	r3, [r7, #18]
  rq.rparam = &resp;
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	623b      	str	r3, [r7, #32]
  rq.rlen = sizeof(resp);
 80076a0:	2307      	movs	r3, #7
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076a4:	f107 0310 	add.w	r3, r7, #16
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fb06 	bl	8007cbc <hci_send_req>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da01      	bge.n	80076ba <hci_read_bd_addr+0x4c>
    return BLE_STATUS_TIMEOUT;
 80076b6:	23ff      	movs	r3, #255	; 0xff
 80076b8:	e00d      	b.n	80076d6 <hci_read_bd_addr+0x68>
  if ( resp.Status )
 80076ba:	7a3b      	ldrb	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <hci_read_bd_addr+0x56>
    return resp.Status;
 80076c0:	7a3b      	ldrb	r3, [r7, #8]
 80076c2:	e008      	b.n	80076d6 <hci_read_bd_addr+0x68>
  Osal_MemCpy( (void*)BD_ADDR, (const void*)resp.BD_ADDR, 6 );
 80076c4:	f107 0308 	add.w	r3, r7, #8
 80076c8:	3301      	adds	r3, #1
 80076ca:	2206      	movs	r2, #6
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f86e 	bl	80077b0 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3728      	adds	r7, #40	; 0x28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b0cc      	sub	sp, #304	; 0x130
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	4602      	mov	r2, r0
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ee:	6019      	str	r1, [r3, #0]
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80076f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80076fa:	f107 0310 	add.w	r3, r7, #16
 80076fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8007714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007718:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800771c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007728:	3301      	adds	r3, #1
 800772a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 800772e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007732:	1c58      	adds	r0, r3, #1
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773c:	221f      	movs	r2, #31
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	f000 f836 	bl	80077b0 <Osal_MemCpy>
  index_input += 31;
 8007744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007748:	331f      	adds	r3, #31
 800774a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800774e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007752:	2218      	movs	r2, #24
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f83a 	bl	80077d0 <Osal_MemSet>
  rq.ogf = 0x08;
 800775c:	2308      	movs	r3, #8
 800775e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8007762:	2309      	movs	r3, #9
 8007764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007768:	f107 0310 	add.w	r3, r7, #16
 800776c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007778:	f107 030f 	add.w	r3, r7, #15
 800777c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007780:	2301      	movs	r3, #1
 8007782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fa95 	bl	8007cbc <hci_send_req>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	da01      	bge.n	800779c <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007798:	23ff      	movs	r3, #255	; 0xff
 800779a:	e004      	b.n	80077a6 <hci_le_set_scan_response_data+0xc8>
  return status;
 800779c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077a4:	781b      	ldrb	r3, [r3, #0]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f003 f8be 	bl	800a942 <memcpy>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f003 f833 	bl	800a84c <memset>
 80077e6:	4603      	mov	r3, r0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return;
 80077f4:	bf00      	nop
}
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80077fe:	b480      	push	{r7}
 8007800:	af00      	add	r7, sp, #0
  return;
 8007802:	bf00      	nop
}
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  return;
 8007810:	bf00      	nop
}
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0
  return;
 800781e:	bf00      	nop
}
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return;
 800782c:	bf00      	nop
}
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007836:	b480      	push	{r7}
 8007838:	af00      	add	r7, sp, #0
  return;
 800783a:	bf00      	nop
}
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
  return;
 8007848:	bf00      	nop
}
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007852:	b480      	push	{r7}
 8007854:	af00      	add	r7, sp, #0
  return;
 8007856:	bf00      	nop
}
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  return;
 8007864:	bf00      	nop
}
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800786e:	b480      	push	{r7}
 8007870:	af00      	add	r7, sp, #0
  return;
 8007872:	bf00      	nop
}
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  return;
 8007880:	bf00      	nop
}
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800788a:	b480      	push	{r7}
 800788c:	af00      	add	r7, sp, #0
  return;
 800788e:	bf00      	nop
}
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return;
 800789c:	bf00      	nop
}
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0
  return;
 80078aa:	bf00      	nop
}
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  return;
 80078b8:	bf00      	nop
}
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80078c2:	b480      	push	{r7}
 80078c4:	af00      	add	r7, sp, #0
  return;
 80078c6:	bf00      	nop
}
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return;
 80078d4:	bf00      	nop
}
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80078de:	b480      	push	{r7}
 80078e0:	af00      	add	r7, sp, #0
  return;
 80078e2:	bf00      	nop
}
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <SVCCTL_Init+0x18>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80078f6:	4b04      	ldr	r3, [pc, #16]	; (8007908 <SVCCTL_Init+0x1c>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80078fc:	f000 f806 	bl	800790c <SVCCTL_SvcInit>

  return;
 8007900:	bf00      	nop
}
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000078 	.word	0x20000078
 8007908:	20000098 	.word	0x20000098

0800790c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  BAS_Init();
 8007910:	f7ff ff6e 	bl	80077f0 <BAS_Init>

  BLS_Init();
 8007914:	f7ff ff73 	bl	80077fe <BLS_Init>

  CRS_STM_Init();
 8007918:	f7ff ff78 	bl	800780c <CRS_STM_Init>

  DIS_Init();
 800791c:	f7ff ff7d 	bl	800781a <DIS_Init>

  EDS_STM_Init();
 8007920:	f7ff ff82 	bl	8007828 <EDS_STM_Init>

  HIDS_Init();
 8007924:	f7ff ff87 	bl	8007836 <HIDS_Init>

  HRS_Init();
 8007928:	f7ff ff8c 	bl	8007844 <HRS_Init>

  HTS_Init();
 800792c:	f7ff ff91 	bl	8007852 <HTS_Init>

  IAS_Init();
 8007930:	f7ff ff96 	bl	8007860 <IAS_Init>

  LLS_Init();
 8007934:	f7ff ff9b 	bl	800786e <LLS_Init>

  TPS_Init();
 8007938:	f7ff ffa0 	bl	800787c <TPS_Init>

  MOTENV_STM_Init();
 800793c:	f7ff ffa5 	bl	800788a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007940:	f7ff ffaa 	bl	8007898 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007944:	f7ff ffaf 	bl	80078a6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007948:	f7ff ffb4 	bl	80078b4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800794c:	f7ff ffc0 	bl	80078d0 <BVOPUS_STM_Init>

  MESH_Init();
 8007950:	f7ff ffb7 	bl	80078c2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007954:	f7ff ffc3 	bl	80078de <SVCCTL_InitCustomSvc>
  
  return;
 8007958:	bf00      	nop
}
 800795a:	bd80      	pop	{r7, pc}

0800795c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3301      	adds	r3, #1
 8007968:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2bff      	cmp	r3, #255	; 0xff
 8007974:	d125      	bne.n	80079c2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	3302      	adds	r3, #2
 800797a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007986:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800798a:	d118      	bne.n	80079be <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800798c:	2300      	movs	r3, #0
 800798e:	757b      	strb	r3, [r7, #21]
 8007990:	e00d      	b.n	80079ae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007992:	7d7b      	ldrb	r3, [r7, #21]
 8007994:	4a1a      	ldr	r2, [pc, #104]	; (8007a00 <SVCCTL_UserEvtRx+0xa4>)
 8007996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d108      	bne.n	80079ba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80079a8:	7d7b      	ldrb	r3, [r7, #21]
 80079aa:	3301      	adds	r3, #1
 80079ac:	757b      	strb	r3, [r7, #21]
 80079ae:	4b14      	ldr	r3, [pc, #80]	; (8007a00 <SVCCTL_UserEvtRx+0xa4>)
 80079b0:	7f1b      	ldrb	r3, [r3, #28]
 80079b2:	7d7a      	ldrb	r2, [r7, #21]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3ec      	bcc.n	8007992 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80079b8:	e002      	b.n	80079c0 <SVCCTL_UserEvtRx+0x64>
              break;
 80079ba:	bf00      	nop
          break;
 80079bc:	e000      	b.n	80079c0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80079be:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80079c0:	e000      	b.n	80079c4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80079c2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d00f      	beq.n	80079ea <SVCCTL_UserEvtRx+0x8e>
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	dc10      	bgt.n	80079f0 <SVCCTL_UserEvtRx+0x94>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <SVCCTL_UserEvtRx+0x7c>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d006      	beq.n	80079e4 <SVCCTL_UserEvtRx+0x88>
 80079d6:	e00b      	b.n	80079f0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fc49 	bl	8009270 <SVCCTL_App_Notification>
 80079de:	4603      	mov	r3, r0
 80079e0:	75bb      	strb	r3, [r7, #22]
      break;
 80079e2:	e008      	b.n	80079f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75bb      	strb	r3, [r7, #22]
      break;
 80079e8:	e005      	b.n	80079f6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75bb      	strb	r3, [r7, #22]
      break;
 80079ee:	e002      	b.n	80079f6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75bb      	strb	r3, [r7, #22]
      break;
 80079f4:	bf00      	nop
  }

  return (return_status);
 80079f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000078 	.word	0x20000078

08007a04 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	212e      	movs	r1, #46	; 0x2e
 8007a1c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007a20:	f000 fae8 	bl	8007ff4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	330b      	adds	r3, #11
 8007a28:	78db      	ldrb	r3, [r3, #3]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b088      	sub	sp, #32
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	210f      	movs	r1, #15
 8007a4a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007a4e:	f000 fad1 	bl	8007ff4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	330b      	adds	r3, #11
 8007a56:	78db      	ldrb	r3, [r3, #3]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	2110      	movs	r1, #16
 8007a74:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007a78:	f000 fabc 	bl	8007ff4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	330b      	adds	r3, #11
 8007a80:	78db      	ldrb	r3, [r3, #3]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b08b      	sub	sp, #44	; 0x2c
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007ab4:	4b4a      	ldr	r3, [pc, #296]	; (8007be0 <SHCI_GetWirelessFwInfo+0x154>)
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007abc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007ac6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a44      	ldr	r2, [pc, #272]	; (8007be4 <SHCI_GetWirelessFwInfo+0x158>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d10f      	bne.n	8007af8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	e01a      	b.n	8007b2e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007b00:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007b04:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	0e1b      	lsrs	r3, r3, #24
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	0c1b      	lsrs	r3, r3, #16
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	0a1b      	lsrs	r3, r3, #8
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	091b      	lsrs	r3, r3, #4
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 030f 	and.w	r3, r3, #15
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	0e1b      	lsrs	r3, r3, #24
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	0a1b      	lsrs	r3, r3, #8
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	0e1b      	lsrs	r3, r3, #24
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	0e1b      	lsrs	r3, r3, #24
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	0c1b      	lsrs	r3, r3, #16
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	372c      	adds	r7, #44	; 0x2c
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	58004000 	.word	0x58004000
 8007be4:	a94656b9 	.word	0xa94656b9

08007be8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <hci_init+0x30>)
 8007bf8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007bfa:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <hci_init+0x34>)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007c00:	4806      	ldr	r0, [pc, #24]	; (8007c1c <hci_init+0x34>)
 8007c02:	f000 f979 	bl	8007ef8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f8da 	bl	8007dc4 <TlInit>

  return;
 8007c10:	bf00      	nop
}
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000414 	.word	0x20000414
 8007c1c:	200003ec 	.word	0x200003ec

08007c20 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c26:	4822      	ldr	r0, [pc, #136]	; (8007cb0 <hci_user_evt_proc+0x90>)
 8007c28:	f000 fde8 	bl	80087fc <LST_is_empty>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d12b      	bne.n	8007c8a <hci_user_evt_proc+0x6a>
 8007c32:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <hci_user_evt_proc+0x94>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d027      	beq.n	8007c8a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007c3a:	f107 030c 	add.w	r3, r7, #12
 8007c3e:	4619      	mov	r1, r3
 8007c40:	481b      	ldr	r0, [pc, #108]	; (8007cb0 <hci_user_evt_proc+0x90>)
 8007c42:	f000 fe6a 	bl	800891a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007c46:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <hci_user_evt_proc+0x98>)
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007c52:	2301      	movs	r3, #1
 8007c54:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <hci_user_evt_proc+0x98>)
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	1d3a      	adds	r2, r7, #4
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007c60:	793a      	ldrb	r2, [r7, #4]
 8007c62:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <hci_user_evt_proc+0x94>)
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e002      	b.n	8007c6e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <hci_user_evt_proc+0x94>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <hci_user_evt_proc+0x94>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d004      	beq.n	8007c80 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fc0d 	bl	8008498 <TL_MM_EvtDone>
 8007c7e:	e004      	b.n	8007c8a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4619      	mov	r1, r3
 8007c84:	480a      	ldr	r0, [pc, #40]	; (8007cb0 <hci_user_evt_proc+0x90>)
 8007c86:	f000 fddb 	bl	8008840 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c8a:	4809      	ldr	r0, [pc, #36]	; (8007cb0 <hci_user_evt_proc+0x90>)
 8007c8c:	f000 fdb6 	bl	80087fc <LST_is_empty>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <hci_user_evt_proc+0x86>
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <hci_user_evt_proc+0x94>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007c9e:	4804      	ldr	r0, [pc, #16]	; (8007cb0 <hci_user_evt_proc+0x90>)
 8007ca0:	f001 fcc2 	bl	8009628 <hci_notify_asynch_evt>
  }


  return;
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
}
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200000a0 	.word	0x200000a0
 8007cb4:	200000ac 	.word	0x200000ac
 8007cb8:	200003ec 	.word	0x200003ec

08007cbc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f000 f8d1 	bl	8007e70 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	885b      	ldrh	r3, [r3, #2]
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cdc:	b21a      	sxth	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	b21b      	sxth	r3, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b21b      	sxth	r3, r3
 8007cea:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007cec:	4b33      	ldr	r3, [pc, #204]	; (8007dbc <hci_send_req+0x100>)
 8007cee:	2201      	movs	r2, #1
 8007cf0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	b2d9      	uxtb	r1, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	8bbb      	ldrh	r3, [r7, #28]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f890 	bl	8007e24 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007d04:	e04e      	b.n	8007da4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007d06:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007d0a:	f001 fca4 	bl	8009656 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007d0e:	e043      	b.n	8007d98 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007d10:	f107 030c 	add.w	r3, r7, #12
 8007d14:	4619      	mov	r1, r3
 8007d16:	482a      	ldr	r0, [pc, #168]	; (8007dc0 <hci_send_req+0x104>)
 8007d18:	f000 fdff 	bl	800891a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	7a5b      	ldrb	r3, [r3, #9]
 8007d20:	2b0f      	cmp	r3, #15
 8007d22:	d114      	bne.n	8007d4e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	330b      	adds	r3, #11
 8007d28:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	885b      	ldrh	r3, [r3, #2]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8bba      	ldrh	r2, [r7, #28]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d104      	bne.n	8007d40 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d027      	beq.n	8007d98 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e024      	b.n	8007d98 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	330b      	adds	r3, #11
 8007d52:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8bba      	ldrh	r2, [r7, #28]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d114      	bne.n	8007d8c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	7a9b      	ldrb	r3, [r3, #10]
 8007d66:	3b03      	subs	r3, #3
 8007d68:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	bfa8      	it	ge
 8007d74:	461a      	movge	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6918      	ldr	r0, [r3, #16]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	1cd9      	adds	r1, r3, #3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f002 fddb 	bl	800a942 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d94:	2301      	movs	r3, #1
 8007d96:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007d98:	4809      	ldr	r0, [pc, #36]	; (8007dc0 <hci_send_req+0x104>)
 8007d9a:	f000 fd2f 	bl	80087fc <LST_is_empty>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0b5      	beq.n	8007d10 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007da4:	7ffb      	ldrb	r3, [r7, #31]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0ad      	beq.n	8007d06 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007daa:	2001      	movs	r0, #1
 8007dac:	f000 f860 	bl	8007e70 <NotifyCmdStatus>

  return 0;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3720      	adds	r7, #32
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000418 	.word	0x20000418
 8007dc0:	2000040c 	.word	0x2000040c

08007dc4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007dcc:	480f      	ldr	r0, [pc, #60]	; (8007e0c <TlInit+0x48>)
 8007dce:	f000 fd05 	bl	80087dc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007dd2:	4a0f      	ldr	r2, [pc, #60]	; (8007e10 <TlInit+0x4c>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007dd8:	480e      	ldr	r0, [pc, #56]	; (8007e14 <TlInit+0x50>)
 8007dda:	f000 fcff 	bl	80087dc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007dde:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <TlInit+0x54>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007de4:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <TlInit+0x58>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <TlInit+0x5c>)
 8007df2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <TlInit+0x58>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f107 0208 	add.w	r2, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
  }

  return;
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
}
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	2000040c 	.word	0x2000040c
 8007e10:	200000a8 	.word	0x200000a8
 8007e14:	200000a0 	.word	0x200000a0
 8007e18:	200000ac 	.word	0x200000ac
 8007e1c:	200003ec 	.word	0x200003ec
 8007e20:	08007eb1 	.word	0x08007eb1

08007e24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	603a      	str	r2, [r7, #0]
 8007e2e:	80fb      	strh	r3, [r7, #6]
 8007e30:	460b      	mov	r3, r1
 8007e32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <SendCmd+0x44>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	88fa      	ldrh	r2, [r7, #6]
 8007e3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <SendCmd+0x44>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	797a      	ldrb	r2, [r7, #5]
 8007e44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007e46:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <SendCmd+0x44>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	797a      	ldrb	r2, [r7, #5]
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f002 fd76 	bl	800a942 <memcpy>

  hciContext.io.Send(0,0);
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <SendCmd+0x48>)
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	4798      	blx	r3

  return;
 8007e60:	bf00      	nop
}
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	200000a8 	.word	0x200000a8
 8007e6c:	200003ec 	.word	0x200003ec

08007e70 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d108      	bne.n	8007e92 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007e80:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <NotifyCmdStatus+0x3c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007e88:	4b08      	ldr	r3, [pc, #32]	; (8007eac <NotifyCmdStatus+0x3c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007e90:	e008      	b.n	8007ea4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007e92:	4b06      	ldr	r3, [pc, #24]	; (8007eac <NotifyCmdStatus+0x3c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007e9a:	4b04      	ldr	r3, [pc, #16]	; (8007eac <NotifyCmdStatus+0x3c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	4798      	blx	r3
  return;
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
}
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000414 	.word	0x20000414

08007eb0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7a5b      	ldrb	r3, [r3, #9]
 8007ebc:	2b0f      	cmp	r3, #15
 8007ebe:	d003      	beq.n	8007ec8 <TlEvtReceived+0x18>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7a5b      	ldrb	r3, [r3, #9]
 8007ec4:	2b0e      	cmp	r3, #14
 8007ec6:	d107      	bne.n	8007ed8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <TlEvtReceived+0x40>)
 8007ecc:	f000 fcde 	bl	800888c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f001 fbb5 	bl	8009640 <hci_cmd_resp_release>
 8007ed6:	e006      	b.n	8007ee6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	4806      	ldr	r0, [pc, #24]	; (8007ef4 <TlEvtReceived+0x44>)
 8007edc:	f000 fcd6 	bl	800888c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007ee0:	4804      	ldr	r0, [pc, #16]	; (8007ef4 <TlEvtReceived+0x44>)
 8007ee2:	f001 fba1 	bl	8009628 <hci_notify_asynch_evt>
  }

  return;
 8007ee6:	bf00      	nop
}
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	2000040c 	.word	0x2000040c
 8007ef4:	200000a0 	.word	0x200000a0

08007ef8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a05      	ldr	r2, [pc, #20]	; (8007f18 <hci_register_io_bus+0x20>)
 8007f04:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a04      	ldr	r2, [pc, #16]	; (8007f1c <hci_register_io_bus+0x24>)
 8007f0a:	611a      	str	r2, [r3, #16]

  return;
 8007f0c:	bf00      	nop
}
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	08008211 	.word	0x08008211
 8007f1c:	08008279 	.word	0x08008279

08007f20 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <shci_init+0x30>)
 8007f30:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007f32:	4a08      	ldr	r2, [pc, #32]	; (8007f54 <shci_init+0x34>)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007f38:	4806      	ldr	r0, [pc, #24]	; (8007f54 <shci_init+0x34>)
 8007f3a:	f000 f915 	bl	8008168 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 f898 	bl	8008078 <TlInit>

  return;
 8007f48:	bf00      	nop
}
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	2000043c 	.word	0x2000043c
 8007f54:	2000041c 	.word	0x2000041c

08007f58 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f5e:	4822      	ldr	r0, [pc, #136]	; (8007fe8 <shci_user_evt_proc+0x90>)
 8007f60:	f000 fc4c 	bl	80087fc <LST_is_empty>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d12b      	bne.n	8007fc2 <shci_user_evt_proc+0x6a>
 8007f6a:	4b20      	ldr	r3, [pc, #128]	; (8007fec <shci_user_evt_proc+0x94>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d027      	beq.n	8007fc2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007f72:	f107 030c 	add.w	r3, r7, #12
 8007f76:	4619      	mov	r1, r3
 8007f78:	481b      	ldr	r0, [pc, #108]	; (8007fe8 <shci_user_evt_proc+0x90>)
 8007f7a:	f000 fcce 	bl	800891a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <shci_user_evt_proc+0x98>)
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00c      	beq.n	8007fa0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007f8e:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <shci_user_evt_proc+0x98>)
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	1d3a      	adds	r2, r7, #4
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007f98:	793a      	ldrb	r2, [r7, #4]
 8007f9a:	4b14      	ldr	r3, [pc, #80]	; (8007fec <shci_user_evt_proc+0x94>)
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e002      	b.n	8007fa6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007fa0:	4b12      	ldr	r3, [pc, #72]	; (8007fec <shci_user_evt_proc+0x94>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <shci_user_evt_proc+0x94>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fa71 	bl	8008498 <TL_MM_EvtDone>
 8007fb6:	e004      	b.n	8007fc2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	480a      	ldr	r0, [pc, #40]	; (8007fe8 <shci_user_evt_proc+0x90>)
 8007fbe:	f000 fc3f 	bl	8008840 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007fc2:	4809      	ldr	r0, [pc, #36]	; (8007fe8 <shci_user_evt_proc+0x90>)
 8007fc4:	f000 fc1a 	bl	80087fc <LST_is_empty>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d107      	bne.n	8007fde <shci_user_evt_proc+0x86>
 8007fce:	4b07      	ldr	r3, [pc, #28]	; (8007fec <shci_user_evt_proc+0x94>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007fd6:	4804      	ldr	r0, [pc, #16]	; (8007fe8 <shci_user_evt_proc+0x90>)
 8007fd8:	f7f8 ff6c 	bl	8000eb4 <shci_notify_asynch_evt>
  }


  return;
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
}
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200000b0 	.word	0x200000b0
 8007fec:	200000c0 	.word	0x200000c0
 8007ff0:	2000041c 	.word	0x2000041c

08007ff4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60ba      	str	r2, [r7, #8]
 8007ffc:	607b      	str	r3, [r7, #4]
 8007ffe:	4603      	mov	r3, r0
 8008000:	81fb      	strh	r3, [r7, #14]
 8008002:	460b      	mov	r3, r1
 8008004:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008006:	2000      	movs	r0, #0
 8008008:	f000 f868 	bl	80080dc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800800c:	4b17      	ldr	r3, [pc, #92]	; (800806c <shci_send+0x78>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	89fa      	ldrh	r2, [r7, #14]
 8008012:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <shci_send+0x78>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	7b7a      	ldrb	r2, [r7, #13]
 800801c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <shci_send+0x78>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	330c      	adds	r3, #12
 8008024:	7b7a      	ldrb	r2, [r7, #13]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	4618      	mov	r0, r3
 800802a:	f002 fc8a 	bl	800a942 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <shci_send+0x7c>)
 8008030:	2201      	movs	r2, #1
 8008032:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <shci_send+0x80>)
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2100      	movs	r1, #0
 800803a:	2000      	movs	r0, #0
 800803c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800803e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008042:	f7f8 ff4e 	bl	8000ee2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f103 0008 	add.w	r0, r3, #8
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <shci_send+0x78>)
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <shci_send+0x78>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	789b      	ldrb	r3, [r3, #2]
 8008056:	3303      	adds	r3, #3
 8008058:	461a      	mov	r2, r3
 800805a:	f002 fc72 	bl	800a942 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800805e:	2001      	movs	r0, #1
 8008060:	f000 f83c 	bl	80080dc <Cmd_SetStatus>

  return;
 8008064:	bf00      	nop
}
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200000bc 	.word	0x200000bc
 8008070:	20000440 	.word	0x20000440
 8008074:	2000041c 	.word	0x2000041c

08008078 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008080:	4a10      	ldr	r2, [pc, #64]	; (80080c4 <TlInit+0x4c>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008086:	4810      	ldr	r0, [pc, #64]	; (80080c8 <TlInit+0x50>)
 8008088:	f000 fba8 	bl	80087dc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800808c:	2001      	movs	r0, #1
 800808e:	f000 f825 	bl	80080dc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008092:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <TlInit+0x54>)
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <TlInit+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80080a4:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <TlInit+0x5c>)
 80080a6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80080a8:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <TlInit+0x60>)
 80080aa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80080ac:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <TlInit+0x58>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f107 020c 	add.w	r2, r7, #12
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
  }

  return;
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
}
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200000bc 	.word	0x200000bc
 80080c8:	200000b0 	.word	0x200000b0
 80080cc:	200000c0 	.word	0x200000c0
 80080d0:	2000041c 	.word	0x2000041c
 80080d4:	0800812d 	.word	0x0800812d
 80080d8:	08008145 	.word	0x08008145

080080dc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <Cmd_SetStatus+0x48>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80080f4:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <Cmd_SetStatus+0x48>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2000      	movs	r0, #0
 80080fa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <Cmd_SetStatus+0x4c>)
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008102:	e00b      	b.n	800811c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008104:	4b08      	ldr	r3, [pc, #32]	; (8008128 <Cmd_SetStatus+0x4c>)
 8008106:	2201      	movs	r2, #1
 8008108:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <Cmd_SetStatus+0x48>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008112:	4b04      	ldr	r3, [pc, #16]	; (8008124 <Cmd_SetStatus+0x48>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2001      	movs	r0, #1
 8008118:	4798      	blx	r3
  return;
 800811a:	bf00      	nop
 800811c:	bf00      	nop
}
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	2000043c 	.word	0x2000043c
 8008128:	200000b8 	.word	0x200000b8

0800812c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008134:	2000      	movs	r0, #0
 8008136:	f7f8 fec9 	bl	8000ecc <shci_cmd_resp_release>

  return;
 800813a:	bf00      	nop
}
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4805      	ldr	r0, [pc, #20]	; (8008164 <TlUserEvtReceived+0x20>)
 8008150:	f000 fb9c 	bl	800888c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008154:	4803      	ldr	r0, [pc, #12]	; (8008164 <TlUserEvtReceived+0x20>)
 8008156:	f7f8 fead 	bl	8000eb4 <shci_notify_asynch_evt>

  return;
 800815a:	bf00      	nop
}
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200000b0 	.word	0x200000b0

08008168 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a05      	ldr	r2, [pc, #20]	; (8008188 <shci_register_io_bus+0x20>)
 8008174:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a04      	ldr	r2, [pc, #16]	; (800818c <shci_register_io_bus+0x24>)
 800817a:	611a      	str	r2, [r3, #16]

  return;
 800817c:	bf00      	nop
}
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	08008325 	.word	0x08008325
 800818c:	08008379 	.word	0x08008379

08008190 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008194:	f001 fc18 	bl	80099c8 <HW_IPCC_Enable>

  return;
 8008198:	bf00      	nop
}
 800819a:	bd80      	pop	{r7, pc}

0800819c <TL_Init>:


void TL_Init( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80081a0:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <TL_Init+0x48>)
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <TL_Init+0x4c>)
 80081a4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <TL_Init+0x48>)
 80081a8:	4a10      	ldr	r2, [pc, #64]	; (80081ec <TL_Init+0x50>)
 80081aa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <TL_Init+0x48>)
 80081ae:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <TL_Init+0x54>)
 80081b0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <TL_Init+0x48>)
 80081b4:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <TL_Init+0x58>)
 80081b6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <TL_Init+0x48>)
 80081ba:	4a0f      	ldr	r2, [pc, #60]	; (80081f8 <TL_Init+0x5c>)
 80081bc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80081be:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <TL_Init+0x48>)
 80081c0:	4a0e      	ldr	r2, [pc, #56]	; (80081fc <TL_Init+0x60>)
 80081c2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80081c4:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <TL_Init+0x48>)
 80081c6:	4a0e      	ldr	r2, [pc, #56]	; (8008200 <TL_Init+0x64>)
 80081c8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80081ca:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <TL_Init+0x48>)
 80081cc:	4a0d      	ldr	r2, [pc, #52]	; (8008204 <TL_Init+0x68>)
 80081ce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <TL_Init+0x48>)
 80081d2:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <TL_Init+0x6c>)
 80081d4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <TL_Init+0x48>)
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <TL_Init+0x70>)
 80081da:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80081dc:	f001 fc08 	bl	80099f0 <HW_IPCC_Init>

  return;
 80081e0:	bf00      	nop
}
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20030000 	.word	0x20030000
 80081e8:	20030028 	.word	0x20030028
 80081ec:	20030048 	.word	0x20030048
 80081f0:	20030058 	.word	0x20030058
 80081f4:	20030068 	.word	0x20030068
 80081f8:	20030070 	.word	0x20030070
 80081fc:	20030078 	.word	0x20030078
 8008200:	20030080 	.word	0x20030080
 8008204:	2003009c 	.word	0x2003009c
 8008208:	200300a0 	.word	0x200300a0
 800820c:	200300ac 	.word	0x200300ac

08008210 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800821c:	4811      	ldr	r0, [pc, #68]	; (8008264 <TL_BLE_Init+0x54>)
 800821e:	f000 fadd 	bl	80087dc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <TL_BLE_Init+0x58>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4a0c      	ldr	r2, [pc, #48]	; (800826c <TL_BLE_Init+0x5c>)
 800823c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <TL_BLE_Init+0x54>)
 8008242:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008244:	f001 fbea 	bl	8009a1c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <TL_BLE_Init+0x60>)
 800824e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	4a07      	ldr	r2, [pc, #28]	; (8008274 <TL_BLE_Init+0x64>)
 8008256:	6013      	str	r3, [r2, #0]

  return 0;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200300c8 	.word	0x200300c8
 8008268:	20030000 	.word	0x20030000
 800826c:	20030a58 	.word	0x20030a58
 8008270:	2000044c 	.word	0x2000044c
 8008274:	20000450 	.word	0x20000450

08008278 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008284:	4b09      	ldr	r3, [pc, #36]	; (80082ac <TL_BLE_SendCmd+0x34>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2201      	movs	r2, #1
 800828c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800828e:	4b07      	ldr	r3, [pc, #28]	; (80082ac <TL_BLE_SendCmd+0x34>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4619      	mov	r1, r3
 8008296:	2001      	movs	r0, #1
 8008298:	f000 f96c 	bl	8008574 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800829c:	f001 fbc8 	bl	8009a30 <HW_IPCC_BLE_SendCmd>

  return 0;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20030000 	.word	0x20030000

080082b0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80082b6:	e01c      	b.n	80082f2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4812      	ldr	r0, [pc, #72]	; (8008308 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80082be:	f000 fb2c 	bl	800891a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7a5b      	ldrb	r3, [r3, #9]
 80082c6:	2b0f      	cmp	r3, #15
 80082c8:	d003      	beq.n	80082d2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7a5b      	ldrb	r3, [r3, #9]
 80082ce:	2b0e      	cmp	r3, #14
 80082d0:	d105      	bne.n	80082de <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4619      	mov	r1, r3
 80082d6:	2002      	movs	r0, #2
 80082d8:	f000 f94c 	bl	8008574 <OutputDbgTrace>
 80082dc:	e004      	b.n	80082e8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4619      	mov	r1, r3
 80082e2:	2003      	movs	r0, #3
 80082e4:	f000 f946 	bl	8008574 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4610      	mov	r0, r2
 80082f0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80082f2:	4805      	ldr	r0, [pc, #20]	; (8008308 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80082f4:	f000 fa82 	bl	80087fc <LST_is_empty>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0dc      	beq.n	80082b8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80082fe:	bf00      	nop
}
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	200300c8 	.word	0x200300c8
 800830c:	2000044c 	.word	0x2000044c

08008310 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008314:	4b02      	ldr	r3, [pc, #8]	; (8008320 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4798      	blx	r3

  return;
 800831a:	bf00      	nop
}
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000450 	.word	0x20000450

08008324 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008330:	480d      	ldr	r0, [pc, #52]	; (8008368 <TL_SYS_Init+0x44>)
 8008332:	f000 fa53 	bl	80087dc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <TL_SYS_Init+0x48>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4a08      	ldr	r2, [pc, #32]	; (8008368 <TL_SYS_Init+0x44>)
 8008348:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800834a:	f001 fb93 	bl	8009a74 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a07      	ldr	r2, [pc, #28]	; (8008370 <TL_SYS_Init+0x4c>)
 8008354:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4a06      	ldr	r2, [pc, #24]	; (8008374 <TL_SYS_Init+0x50>)
 800835c:	6013      	str	r3, [r2, #0]

  return 0;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	200300d0 	.word	0x200300d0
 800836c:	20030000 	.word	0x20030000
 8008370:	20000454 	.word	0x20000454
 8008374:	20000458 	.word	0x20000458

08008378 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008384:	4b09      	ldr	r3, [pc, #36]	; (80083ac <TL_SYS_SendCmd+0x34>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2210      	movs	r2, #16
 800838c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <TL_SYS_SendCmd+0x34>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4619      	mov	r1, r3
 8008396:	2004      	movs	r0, #4
 8008398:	f000 f8ec 	bl	8008574 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800839c:	f001 fb74 	bl	8009a88 <HW_IPCC_SYS_SendCmd>

  return 0;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20030000 	.word	0x20030000

080083b0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4619      	mov	r1, r3
 80083bc:	2005      	movs	r0, #5
 80083be:	f000 f8d9 	bl	8008574 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a03      	ldr	r2, [pc, #12]	; (80083d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80083c8:	68d2      	ldr	r2, [r2, #12]
 80083ca:	6812      	ldr	r2, [r2, #0]
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3

  return;
 80083d0:	bf00      	nop
}
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20030000 	.word	0x20030000
 80083d8:	20000454 	.word	0x20000454

080083dc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80083e2:	e00e      	b.n	8008402 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80083e4:	1d3b      	adds	r3, r7, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	480b      	ldr	r0, [pc, #44]	; (8008418 <HW_IPCC_SYS_EvtNot+0x3c>)
 80083ea:	f000 fa96 	bl	800891a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4619      	mov	r1, r3
 80083f2:	2006      	movs	r0, #6
 80083f4:	f000 f8be 	bl	8008574 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <HW_IPCC_SYS_EvtNot+0x40>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008402:	4805      	ldr	r0, [pc, #20]	; (8008418 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008404:	f000 f9fa 	bl	80087fc <LST_is_empty>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ea      	beq.n	80083e4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800840e:	bf00      	nop
}
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200300d0 	.word	0x200300d0
 800841c:	20000458 	.word	0x20000458

08008420 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008428:	4817      	ldr	r0, [pc, #92]	; (8008488 <TL_MM_Init+0x68>)
 800842a:	f000 f9d7 	bl	80087dc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800842e:	4817      	ldr	r0, [pc, #92]	; (800848c <TL_MM_Init+0x6c>)
 8008430:	f000 f9d4 	bl	80087dc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008434:	4b16      	ldr	r3, [pc, #88]	; (8008490 <TL_MM_Init+0x70>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	4a16      	ldr	r2, [pc, #88]	; (8008494 <TL_MM_Init+0x74>)
 800843a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800843c:	4b15      	ldr	r3, [pc, #84]	; (8008494 <TL_MM_Init+0x74>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6892      	ldr	r2, [r2, #8]
 8008444:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008446:	4b13      	ldr	r3, [pc, #76]	; (8008494 <TL_MM_Init+0x74>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68d2      	ldr	r2, [r2, #12]
 800844e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008450:	4b10      	ldr	r3, [pc, #64]	; (8008494 <TL_MM_Init+0x74>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <TL_MM_Init+0x68>)
 8008456:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008458:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <TL_MM_Init+0x74>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6812      	ldr	r2, [r2, #0]
 8008460:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <TL_MM_Init+0x74>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	6852      	ldr	r2, [r2, #4]
 800846a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <TL_MM_Init+0x74>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6912      	ldr	r2, [r2, #16]
 8008474:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008476:	4b07      	ldr	r3, [pc, #28]	; (8008494 <TL_MM_Init+0x74>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6952      	ldr	r2, [r2, #20]
 800847e:	619a      	str	r2, [r3, #24]

  return;
 8008480:	bf00      	nop
}
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	200300b8 	.word	0x200300b8
 800848c:	20000444 	.word	0x20000444
 8008490:	20030000 	.word	0x20030000
 8008494:	2000045c 	.word	0x2000045c

08008498 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80084a0:	6879      	ldr	r1, [r7, #4]
 80084a2:	4807      	ldr	r0, [pc, #28]	; (80084c0 <TL_MM_EvtDone+0x28>)
 80084a4:	f000 f9f2 	bl	800888c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	2000      	movs	r0, #0
 80084ac:	f000 f862 	bl	8008574 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80084b0:	4804      	ldr	r0, [pc, #16]	; (80084c4 <TL_MM_EvtDone+0x2c>)
 80084b2:	f001 fb0f 	bl	8009ad4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80084b6:	bf00      	nop
}
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20000444 	.word	0x20000444
 80084c4:	080084c9 	.word	0x080084c9

080084c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80084ce:	e00c      	b.n	80084ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80084d0:	1d3b      	adds	r3, r7, #4
 80084d2:	4619      	mov	r1, r3
 80084d4:	480a      	ldr	r0, [pc, #40]	; (8008500 <SendFreeBuf+0x38>)
 80084d6:	f000 fa20 	bl	800891a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80084da:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <SendFreeBuf+0x3c>)
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 f9d1 	bl	800888c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80084ea:	4805      	ldr	r0, [pc, #20]	; (8008500 <SendFreeBuf+0x38>)
 80084ec:	f000 f986 	bl	80087fc <LST_is_empty>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0ec      	beq.n	80084d0 <SendFreeBuf+0x8>
  }

  return;
 80084f6:	bf00      	nop
}
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000444 	.word	0x20000444
 8008504:	20030000 	.word	0x20030000

08008508 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800850c:	4805      	ldr	r0, [pc, #20]	; (8008524 <TL_TRACES_Init+0x1c>)
 800850e:	f000 f965 	bl	80087dc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <TL_TRACES_Init+0x20>)
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	4a03      	ldr	r2, [pc, #12]	; (8008524 <TL_TRACES_Init+0x1c>)
 8008518:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800851a:	f001 fb11 	bl	8009b40 <HW_IPCC_TRACES_Init>

  return;
 800851e:	bf00      	nop
}
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200300c0 	.word	0x200300c0
 8008528:	20030000 	.word	0x20030000

0800852c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008532:	e008      	b.n	8008546 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008534:	1d3b      	adds	r3, r7, #4
 8008536:	4619      	mov	r1, r3
 8008538:	4808      	ldr	r0, [pc, #32]	; (800855c <HW_IPCC_TRACES_EvtNot+0x30>)
 800853a:	f000 f9ee 	bl	800891a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f80d 	bl	8008560 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008546:	4805      	ldr	r0, [pc, #20]	; (800855c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008548:	f000 f958 	bl	80087fc <LST_is_empty>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008552:	bf00      	nop
}
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200300c0 	.word	0x200300c0

08008560 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b06      	cmp	r3, #6
 8008584:	d845      	bhi.n	8008612 <OutputDbgTrace+0x9e>
 8008586:	a201      	add	r2, pc, #4	; (adr r2, 800858c <OutputDbgTrace+0x18>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085a9 	.word	0x080085a9
 8008590:	080085cd 	.word	0x080085cd
 8008594:	080085d3 	.word	0x080085d3
 8008598:	080085e7 	.word	0x080085e7
 800859c:	080085f3 	.word	0x080085f3
 80085a0:	080085f9 	.word	0x080085f9
 80085a4:	08008607 	.word	0x08008607
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	7a5b      	ldrb	r3, [r3, #9]
 80085b0:	2bff      	cmp	r3, #255	; 0xff
 80085b2:	d005      	beq.n	80085c0 <OutputDbgTrace+0x4c>
 80085b4:	2bff      	cmp	r3, #255	; 0xff
 80085b6:	dc05      	bgt.n	80085c4 <OutputDbgTrace+0x50>
 80085b8:	2b0e      	cmp	r3, #14
 80085ba:	d005      	beq.n	80085c8 <OutputDbgTrace+0x54>
 80085bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80085be:	e001      	b.n	80085c4 <OutputDbgTrace+0x50>
          break;
 80085c0:	bf00      	nop
 80085c2:	e027      	b.n	8008614 <OutputDbgTrace+0xa0>
          break;
 80085c4:	bf00      	nop
 80085c6:	e025      	b.n	8008614 <OutputDbgTrace+0xa0>
          break;
 80085c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80085ca:	e023      	b.n	8008614 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80085d0:	e020      	b.n	8008614 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	7a5b      	ldrb	r3, [r3, #9]
 80085da:	2b0e      	cmp	r3, #14
 80085dc:	d001      	beq.n	80085e2 <OutputDbgTrace+0x6e>
 80085de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80085e0:	e000      	b.n	80085e4 <OutputDbgTrace+0x70>
          break;
 80085e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085e4:	e016      	b.n	8008614 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7a5b      	ldrb	r3, [r3, #9]
 80085ee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085f0:	e010      	b.n	8008614 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80085f6:	e00d      	b.n	8008614 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	7a5b      	ldrb	r3, [r3, #9]
 8008600:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008602:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008604:	e006      	b.n	8008614 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	7a5b      	ldrb	r3, [r3, #9]
 800860e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008610:	e000      	b.n	8008614 <OutputDbgTrace+0xa0>

    default:
      break;
 8008612:	bf00      	nop
  }

  return;
 8008614:	bf00      	nop
}
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008626:	f3ef 8310 	mrs	r3, PRIMASK
 800862a:	60fb      	str	r3, [r7, #12]
  return(result);
 800862c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800862e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008630:	b672      	cpsid	i
}
 8008632:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008634:	1cbb      	adds	r3, r7, #2
 8008636:	4619      	mov	r1, r3
 8008638:	4812      	ldr	r0, [pc, #72]	; (8008684 <DbgTrace_TxCpltCallback+0x64>)
 800863a:	f000 fbe6 	bl	8008e0a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800863e:	1cbb      	adds	r3, r7, #2
 8008640:	4619      	mov	r1, r3
 8008642:	4810      	ldr	r0, [pc, #64]	; (8008684 <DbgTrace_TxCpltCallback+0x64>)
 8008644:	f000 fcd2 	bl	8008fec <CircularQueue_Sense>
 8008648:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00c      	beq.n	800866a <DbgTrace_TxCpltCallback+0x4a>
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f383 8810 	msr	PRIMASK, r3
}
 800865a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800865c:	887b      	ldrh	r3, [r7, #2]
 800865e:	4a0a      	ldr	r2, [pc, #40]	; (8008688 <DbgTrace_TxCpltCallback+0x68>)
 8008660:	4619      	mov	r1, r3
 8008662:	6938      	ldr	r0, [r7, #16]
 8008664:	f7f8 f889 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008668:	e008      	b.n	800867c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <DbgTrace_TxCpltCallback+0x6c>)
 800866c:	2201      	movs	r2, #1
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f383 8810 	msr	PRIMASK, r3
}
 800867a:	bf00      	nop
}
 800867c:	bf00      	nop
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000460 	.word	0x20000460
 8008688:	08008621 	.word	0x08008621
 800868c:	20000011 	.word	0x20000011

08008690 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8008696:	f7f8 f86a 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800869a:	2302      	movs	r3, #2
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	2300      	movs	r3, #0
 80086a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086a4:	4903      	ldr	r1, [pc, #12]	; (80086b4 <DbgTraceInit+0x24>)
 80086a6:	4804      	ldr	r0, [pc, #16]	; (80086b8 <DbgTraceInit+0x28>)
 80086a8:	f000 f956 	bl	8008958 <CircularQueue_Init>
#endif 
#endif
  return;
 80086ac:	bf00      	nop
}
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000480 	.word	0x20000480
 80086b8:	20000460 	.word	0x20000460

080086bc <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f805 	bl	80086dc <DbgTraceWrite>
 80086d2:	4603      	mov	r3, r0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ec:	f3ef 8310 	mrs	r3, PRIMASK
 80086f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80086f2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80086f4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fc:	d102      	bne.n	8008704 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
 8008702:	e037      	b.n	8008774 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d006      	beq.n	8008718 <DbgTraceWrite+0x3c>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d003      	beq.n	8008718 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008710:	f04f 33ff 	mov.w	r3, #4294967295
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
 8008716:	e02d      	b.n	8008774 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d02a      	beq.n	8008774 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008722:	b672      	cpsid	i
}
 8008724:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	b29a      	uxth	r2, r3
 800872a:	2301      	movs	r3, #1
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	4814      	ldr	r0, [pc, #80]	; (8008780 <DbgTraceWrite+0xa4>)
 8008730:	f000 f944 	bl	80089bc <CircularQueue_Add>
 8008734:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d015      	beq.n	8008768 <DbgTraceWrite+0x8c>
 800873c:	4b11      	ldr	r3, [pc, #68]	; (8008784 <DbgTraceWrite+0xa8>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d010      	beq.n	8008768 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <DbgTraceWrite+0xa8>)
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f383 8810 	msr	PRIMASK, r3
}
 8008756:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	b29b      	uxth	r3, r3
 800875c:	4a0a      	ldr	r2, [pc, #40]	; (8008788 <DbgTraceWrite+0xac>)
 800875e:	4619      	mov	r1, r3
 8008760:	69f8      	ldr	r0, [r7, #28]
 8008762:	f7f8 f80a 	bl	800077a <DbgOutputTraces>
 8008766:	e005      	b.n	8008774 <DbgTraceWrite+0x98>
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f383 8810 	msr	PRIMASK, r3
}
 8008772:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008776:	4618      	mov	r0, r3
 8008778:	3728      	adds	r7, #40	; 0x28
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000460 	.word	0x20000460
 8008784:	20000011 	.word	0x20000011
 8008788:	08008621 	.word	0x08008621

0800878c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008796:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <OTP_Read+0x48>)
 8008798:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800879a:	e002      	b.n	80087a2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3b08      	subs	r3, #8
 80087a0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3307      	adds	r3, #7
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	79fa      	ldrb	r2, [r7, #7]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d003      	beq.n	80087b6 <OTP_Read+0x2a>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4a09      	ldr	r2, [pc, #36]	; (80087d8 <OTP_Read+0x4c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d1f2      	bne.n	800879c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3307      	adds	r3, #7
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	79fa      	ldrb	r2, [r7, #7]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d001      	beq.n	80087c6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80087c6:	68fb      	ldr	r3, [r7, #12]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	1fff73f8 	.word	0x1fff73f8
 80087d8:	1fff7000 	.word	0x1fff7000

080087dc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008804:	f3ef 8310 	mrs	r3, PRIMASK
 8008808:	60fb      	str	r3, [r7, #12]
  return(result);
 800880a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800880c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800880e:	b672      	cpsid	i
}
 8008810:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d102      	bne.n	8008822 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800881c:	2301      	movs	r3, #1
 800881e:	75fb      	strb	r3, [r7, #23]
 8008820:	e001      	b.n	8008826 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	75fb      	strb	r3, [r7, #23]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f383 8810 	msr	PRIMASK, r3
}
 8008830:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800884a:	f3ef 8310 	mrs	r3, PRIMASK
 800884e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008850:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008854:	b672      	cpsid	i
}
 8008856:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	605a      	str	r2, [r3, #4]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f383 8810 	msr	PRIMASK, r3
}
 800887e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008880:	bf00      	nop
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008896:	f3ef 8310 	mrs	r3, PRIMASK
 800889a:	60fb      	str	r3, [r7, #12]
  return(result);
 800889c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800889e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088a0:	b672      	cpsid	i
}
 80088a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f383 8810 	msr	PRIMASK, r3
}
 80088ca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80088cc:	bf00      	nop
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e0:	f3ef 8310 	mrs	r3, PRIMASK
 80088e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80088e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80088e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088ea:	b672      	cpsid	i
}
 80088ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6852      	ldr	r2, [r2, #4]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f383 8810 	msr	PRIMASK, r3
}
 800890c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b086      	sub	sp, #24
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008924:	f3ef 8310 	mrs	r3, PRIMASK
 8008928:	60fb      	str	r3, [r7, #12]
  return(result);
 800892a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800892c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800892e:	b672      	cpsid	i
}
 8008930:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f7ff ffca 	bl	80088d8 <LST_remove_node>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f383 8810 	msr	PRIMASK, r3
}
 800894e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008950:	bf00      	nop
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	887a      	ldrh	r2, [r7, #2]
 800898e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	7e3a      	ldrb	r2, [r7, #24]
 8008994:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8008996:	7e3b      	ldrb	r3, [r7, #24]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d006      	beq.n	80089ae <CircularQueue_Init+0x56>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	891b      	ldrh	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ac:	e000      	b.n	80089b0 <CircularQueue_Init+0x58>
  }
  return 0;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08e      	sub	sp, #56	; 0x38
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80089cc:	2300      	movs	r3, #0
 80089ce:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80089d0:	2300      	movs	r3, #0
 80089d2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 80089d4:	2300      	movs	r3, #0
 80089d6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80089d8:	2300      	movs	r3, #0
 80089da:	62bb      	str	r3, [r7, #40]	; 0x28
 80089dc:	2300      	movs	r3, #0
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80089e0:	2300      	movs	r3, #0
 80089e2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80089e4:	2300      	movs	r3, #0
 80089e6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	891b      	ldrh	r3, [r3, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <CircularQueue_Add+0x38>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e000      	b.n	80089f6 <CircularQueue_Add+0x3a>
 80089f4:	2300      	movs	r3, #0
 80089f6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d02a      	beq.n	8008a56 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	891b      	ldrh	r3, [r3, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d123      	bne.n	8008a50 <CircularQueue_Add+0x94>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6819      	ldr	r1, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	1c58      	adds	r0, r3, #1
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4298      	cmp	r0, r3
 8008a26:	d306      	bcc.n	8008a36 <CircularQueue_Add+0x7a>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6918      	ldr	r0, [r3, #16]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	1ac3      	subs	r3, r0, r3
 8008a32:	3301      	adds	r3, #1
 8008a34:	e002      	b.n	8008a3c <CircularQueue_Add+0x80>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	440b      	add	r3, r1
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4413      	add	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3302      	adds	r3, #2
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	e001      	b.n	8008a54 <CircularQueue_Add+0x98>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	891b      	ldrh	r3, [r3, #8]
 8008a54:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	891b      	ldrh	r3, [r3, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	891b      	ldrh	r3, [r3, #8]
 8008a62:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d307      	bcc.n	8008a80 <CircularQueue_Add+0xc4>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6919      	ldr	r1, [r3, #16]
 8008a78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a7a:	440b      	add	r3, r1
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	e000      	b.n	8008a82 <CircularQueue_Add+0xc6>
 8008a80:	2300      	movs	r3, #0
 8008a82:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	7ffb      	ldrb	r3, [r7, #31]
 8008a88:	4413      	add	r3, r2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d80b      	bhi.n	8008ab0 <CircularQueue_Add+0xf4>
 8008a98:	88fa      	ldrh	r2, [r7, #6]
 8008a9a:	7ffb      	ldrb	r3, [r7, #31]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008aa6:	fb01 f202 	mul.w	r2, r1, r2
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	e000      	b.n	8008ab2 <CircularQueue_Add+0xf6>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8008ab4:	7dfa      	ldrb	r2, [r7, #23]
 8008ab6:	7ffb      	ldrb	r3, [r7, #31]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	bf8c      	ite	hi
 8008abc:	2301      	movhi	r3, #1
 8008abe:	2300      	movls	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8008ac4:	7fbb      	ldrb	r3, [r7, #30]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d008      	beq.n	8008adc <CircularQueue_Add+0x120>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	7f1b      	ldrb	r3, [r3, #28]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <CircularQueue_Add+0x120>
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	e000      	b.n	8008ade <CircularQueue_Add+0x122>
 8008adc:	8bbb      	ldrh	r3, [r7, #28]
 8008ade:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8008ae0:	7fbb      	ldrb	r3, [r7, #30]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <CircularQueue_Add+0x13c>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	7f1b      	ldrb	r3, [r3, #28]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <CircularQueue_Add+0x13c>
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	e000      	b.n	8008afa <CircularQueue_Add+0x13e>
 8008af8:	8bbb      	ldrh	r3, [r7, #28]
 8008afa:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 817e 	beq.w	8008e00 <CircularQueue_Add+0x444>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	695a      	ldr	r2, [r3, #20]
 8008b08:	88f9      	ldrh	r1, [r7, #6]
 8008b0a:	7ffb      	ldrb	r3, [r7, #31]
 8008b0c:	440b      	add	r3, r1
 8008b0e:	4619      	mov	r1, r3
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	441a      	add	r2, r3
 8008b18:	8bbb      	ldrh	r3, [r7, #28]
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	f200 816d 	bhi.w	8008e00 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8008b26:	2300      	movs	r3, #0
 8008b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b2a:	e14a      	b.n	8008dc2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	691a      	ldr	r2, [r3, #16]
 8008b30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d307      	bcc.n	8008b4c <CircularQueue_Add+0x190>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b42:	441a      	add	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	e003      	b.n	8008b54 <CircularQueue_Add+0x198>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	691a      	ldr	r2, [r3, #16]
 8008b50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b52:	4413      	add	r3, r2
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	891b      	ldrh	r3, [r3, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d130      	bne.n	8008bc8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	1c59      	adds	r1, r3, #1
 8008b6e:	6339      	str	r1, [r7, #48]	; 0x30
 8008b70:	4413      	add	r3, r2
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	b2d2      	uxtb	r2, r2
 8008b76:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d304      	bcc.n	8008b8c <CircularQueue_Add+0x1d0>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	e000      	b.n	8008b8e <CircularQueue_Add+0x1d2>
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	b298      	uxth	r0, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	1c59      	adds	r1, r3, #1
 8008b9e:	6339      	str	r1, [r7, #48]	; 0x30
 8008ba0:	4413      	add	r3, r2
 8008ba2:	b2c2      	uxtb	r2, r0
 8008ba4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d304      	bcc.n	8008bba <CircularQueue_Add+0x1fe>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	e000      	b.n	8008bbc <CircularQueue_Add+0x200>
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	1c9a      	adds	r2, r3, #2
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8008bc8:	88fa      	ldrh	r2, [r7, #6]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6859      	ldr	r1, [r3, #4]
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	1acb      	subs	r3, r1, r3
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	bf28      	it	cs
 8008bd6:	4613      	movcs	r3, r2
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d007      	beq.n	8008bf2 <CircularQueue_Add+0x236>
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d225      	bcs.n	8008c36 <CircularQueue_Add+0x27a>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	7f1b      	ldrb	r3, [r3, #28]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d121      	bne.n	8008c36 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	18d0      	adds	r0, r2, r3
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	4413      	add	r3, r2
 8008c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f001 fe9a 	bl	800a942 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8008c22:	88fa      	ldrh	r2, [r7, #6]
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	4413      	add	r3, r2
 8008c32:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008c34:	e0a4      	b.n	8008d80 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	f000 80a1 	beq.w	8008d80 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	7f1b      	ldrb	r3, [r3, #28]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d03a      	beq.n	8008cc0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	891b      	ldrh	r3, [r3, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	3b02      	subs	r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	22ff      	movs	r2, #255	; 0xff
 8008c5e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	3b01      	subs	r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	22ff      	movs	r2, #255	; 0xff
 8008c6c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8008c82:	2300      	movs	r3, #0
 8008c84:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	891b      	ldrh	r3, [r3, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d16f      	bne.n	8008d6e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	1c59      	adds	r1, r3, #1
 8008c96:	6339      	str	r1, [r7, #48]	; 0x30
 8008c98:	4413      	add	r3, r2
 8008c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c9c:	b2d2      	uxtb	r2, r2
 8008c9e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	0a18      	lsrs	r0, r3, #8
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	1c59      	adds	r1, r3, #1
 8008cac:	6339      	str	r1, [r7, #48]	; 0x30
 8008cae:	4413      	add	r3, r2
 8008cb0:	b2c2      	uxtb	r2, r0
 8008cb2:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	1c9a      	adds	r2, r3, #2
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	615a      	str	r2, [r3, #20]
 8008cbe:	e056      	b.n	8008d6e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	7f1b      	ldrb	r3, [r3, #28]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d050      	beq.n	8008d6e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	891b      	ldrh	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d14a      	bne.n	8008d6a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	3b02      	subs	r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	0a19      	lsrs	r1, r3, #8
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	4413      	add	r3, r2
 8008cf2:	b2ca      	uxtb	r2, r1
 8008cf4:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	18d0      	adds	r0, r2, r3
 8008cfe:	88fb      	ldrh	r3, [r7, #6]
 8008d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	4413      	add	r3, r2
 8008d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f001 fe18 	bl	800a942 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	695a      	ldr	r2, [r3, #20]
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	441a      	add	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8008d34:	2300      	movs	r3, #0
 8008d36:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	1c59      	adds	r1, r3, #1
 8008d40:	6339      	str	r1, [r7, #48]	; 0x30
 8008d42:	4413      	add	r3, r2
 8008d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d46:	b2d2      	uxtb	r2, r2
 8008d48:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	0a18      	lsrs	r0, r3, #8
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	1c59      	adds	r1, r3, #1
 8008d56:	6339      	str	r1, [r7, #48]	; 0x30
 8008d58:	4413      	add	r3, r2
 8008d5a:	b2c2      	uxtb	r2, r0
 8008d5c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	1c9a      	adds	r2, r3, #2
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	615a      	str	r2, [r3, #20]
 8008d68:	e001      	b.n	8008d6e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e049      	b.n	8008e02 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8008d6e:	7ffb      	ldrb	r3, [r7, #31]
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	4413      	add	r3, r2
 8008d78:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d015      	beq.n	8008db2 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	18d0      	adds	r0, r2, r3
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d92:	fb03 f202 	mul.w	r2, r3, r2
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	4413      	add	r3, r2
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da0:	4619      	mov	r1, r3
 8008da2:	f001 fdce 	bl	800a942 <memcpy>
        q->byteCount += NbBytesToCopy;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	695a      	ldr	r2, [r3, #20]
 8008daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	f4ff aeb0 	bcc.w	8008b2c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6919      	ldr	r1, [r3, #16]
 8008dd4:	7ffb      	ldrb	r3, [r7, #31]
 8008dd6:	4419      	add	r1, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4299      	cmp	r1, r3
 8008dde:	d307      	bcc.n	8008df0 <CircularQueue_Add+0x434>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6919      	ldr	r1, [r3, #16]
 8008de4:	7ffb      	ldrb	r3, [r7, #31]
 8008de6:	4419      	add	r1, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	1acb      	subs	r3, r1, r3
 8008dee:	e003      	b.n	8008df8 <CircularQueue_Add+0x43c>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6919      	ldr	r1, [r3, #16]
 8008df4:	7ffb      	ldrb	r3, [r7, #31]
 8008df6:	440b      	add	r3, r1
 8008df8:	4413      	add	r3, r2
 8008dfa:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	e000      	b.n	8008e02 <CircularQueue_Add+0x446>
    return NULL;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3738      	adds	r7, #56	; 0x38
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b085      	sub	sp, #20
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	891b      	ldrh	r3, [r3, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <CircularQueue_Remove+0x1e>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e000      	b.n	8008e2a <CircularQueue_Remove+0x20>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 80cc 	beq.w	8008fd2 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	891b      	ldrh	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d121      	bne.n	8008e86 <CircularQueue_Remove+0x7c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6819      	ldr	r1, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	1c58      	adds	r0, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	4298      	cmp	r0, r3
 8008e60:	d306      	bcc.n	8008e70 <CircularQueue_Remove+0x66>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68d8      	ldr	r0, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	1ac3      	subs	r3, r0, r3
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	e002      	b.n	8008e76 <CircularQueue_Remove+0x6c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	3301      	adds	r3, #1
 8008e76:	440b      	add	r3, r1
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	e001      	b.n	8008e8a <CircularQueue_Remove+0x80>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	891b      	ldrh	r3, [r3, #8]
 8008e8a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	7f1b      	ldrb	r3, [r3, #28]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d057      	beq.n	8008f48 <CircularQueue_Remove+0x13e>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7f1b      	ldrb	r3, [r3, #28]
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d151      	bne.n	8008f48 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008ea4:	897b      	ldrh	r3, [r7, #10]
 8008ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d103      	bne.n	8008eb6 <CircularQueue_Remove+0xac>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	891b      	ldrh	r3, [r3, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d012      	beq.n	8008edc <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d942      	bls.n	8008f48 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	891b      	ldrh	r3, [r3, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d03e      	beq.n	8008f48 <CircularQueue_Remove+0x13e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	8912      	ldrh	r2, [r2, #8]
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d235      	bcs.n	8008f48 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695a      	ldr	r2, [r3, #20]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68d9      	ldr	r1, [r3, #12]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	1acb      	subs	r3, r1, r3
 8008eea:	441a      	add	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	891b      	ldrh	r3, [r3, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d121      	bne.n	8008f42 <CircularQueue_Remove+0x138>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	1c58      	adds	r0, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	4298      	cmp	r0, r3
 8008f1c:	d306      	bcc.n	8008f2c <CircularQueue_Remove+0x122>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68d8      	ldr	r0, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	1ac3      	subs	r3, r0, r3
 8008f28:	3301      	adds	r3, #1
 8008f2a:	e002      	b.n	8008f32 <CircularQueue_Remove+0x128>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	3301      	adds	r3, #1
 8008f32:	440b      	add	r3, r1
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	e001      	b.n	8008f46 <CircularQueue_Remove+0x13c>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	891b      	ldrh	r3, [r3, #8]
 8008f46:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68d9      	ldr	r1, [r3, #12]
 8008f50:	7a7b      	ldrb	r3, [r7, #9]
 8008f52:	4419      	add	r1, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	d307      	bcc.n	8008f6c <CircularQueue_Remove+0x162>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68d9      	ldr	r1, [r3, #12]
 8008f60:	7a7b      	ldrb	r3, [r7, #9]
 8008f62:	4419      	add	r1, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	1acb      	subs	r3, r1, r3
 8008f6a:	e003      	b.n	8008f74 <CircularQueue_Remove+0x16a>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68d9      	ldr	r1, [r3, #12]
 8008f70:	7a7b      	ldrb	r3, [r7, #9]
 8008f72:	440b      	add	r3, r1
 8008f74:	4413      	add	r3, r2
 8008f76:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	8979      	ldrh	r1, [r7, #10]
 8008f7e:	7a7a      	ldrb	r2, [r7, #9]
 8008f80:	440a      	add	r2, r1
 8008f82:	1a9a      	subs	r2, r3, r2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01b      	beq.n	8008fc8 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	897b      	ldrh	r3, [r7, #10]
 8008f96:	441a      	add	r2, r3
 8008f98:	7a7b      	ldrb	r3, [r7, #9]
 8008f9a:	441a      	add	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d309      	bcc.n	8008fb8 <CircularQueue_Remove+0x1ae>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	897b      	ldrh	r3, [r7, #10]
 8008faa:	441a      	add	r2, r3
 8008fac:	7a7b      	ldrb	r3, [r7, #9]
 8008fae:	441a      	add	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	e005      	b.n	8008fc4 <CircularQueue_Remove+0x1ba>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	897b      	ldrh	r3, [r7, #10]
 8008fbe:	441a      	add	r2, r3
 8008fc0:	7a7b      	ldrb	r3, [r7, #9]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	1e5a      	subs	r2, r3, #1
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	897a      	ldrh	r2, [r7, #10]
 8008fdc:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8008fde:	68fb      	ldr	r3, [r7, #12]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	891b      	ldrh	r3, [r3, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <CircularQueue_Sense+0x1e>
 8009006:	2302      	movs	r3, #2
 8009008:	e000      	b.n	800900c <CircularQueue_Sense+0x20>
 800900a:	2300      	movs	r3, #0
 800900c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8090 	beq.w	8009140 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	891b      	ldrh	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d121      	bne.n	8009072 <CircularQueue_Sense+0x86>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	4413      	add	r3, r2
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6819      	ldr	r1, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	1c58      	adds	r0, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4298      	cmp	r0, r3
 800904c:	d306      	bcc.n	800905c <CircularQueue_Sense+0x70>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68d8      	ldr	r0, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	1ac3      	subs	r3, r0, r3
 8009058:	3301      	adds	r3, #1
 800905a:	e002      	b.n	8009062 <CircularQueue_Sense+0x76>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	440b      	add	r3, r1
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	b29b      	uxth	r3, r3
 800906c:	4413      	add	r3, r2
 800906e:	b29b      	uxth	r3, r3
 8009070:	e001      	b.n	8009076 <CircularQueue_Sense+0x8a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	891b      	ldrh	r3, [r3, #8]
 8009076:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7f1b      	ldrb	r3, [r3, #28]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d048      	beq.n	8009116 <CircularQueue_Sense+0x12a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	7f1b      	ldrb	r3, [r3, #28]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d142      	bne.n	8009116 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009090:	8a7b      	ldrh	r3, [r7, #18]
 8009092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009096:	4293      	cmp	r3, r2
 8009098:	d103      	bne.n	80090a2 <CircularQueue_Sense+0xb6>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	891b      	ldrh	r3, [r3, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d012      	beq.n	80090c8 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d933      	bls.n	8009116 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	891b      	ldrh	r3, [r3, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d02f      	beq.n	8009116 <CircularQueue_Sense+0x12a>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	8912      	ldrh	r2, [r2, #8]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d226      	bcs.n	8009116 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	891b      	ldrh	r3, [r3, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d11d      	bne.n	8009110 <CircularQueue_Sense+0x124>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	1c58      	adds	r0, r3, #1
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	4298      	cmp	r0, r3
 80090ee:	d305      	bcc.n	80090fc <CircularQueue_Sense+0x110>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	1ac3      	subs	r3, r0, r3
 80090f8:	3301      	adds	r3, #1
 80090fa:	e001      	b.n	8009100 <CircularQueue_Sense+0x114>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	440b      	add	r3, r1
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	b29b      	uxth	r3, r3
 8009106:	021b      	lsls	r3, r3, #8
 8009108:	b29b      	uxth	r3, r3
 800910a:	4413      	add	r3, r2
 800910c:	b29b      	uxth	r3, r3
 800910e:	e001      	b.n	8009114 <CircularQueue_Sense+0x128>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	891b      	ldrh	r3, [r3, #8]
 8009114:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	7af9      	ldrb	r1, [r7, #11]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4419      	add	r1, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	4299      	cmp	r1, r3
 8009126:	d306      	bcc.n	8009136 <CircularQueue_Sense+0x14a>
 8009128:	7af9      	ldrb	r1, [r7, #11]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4419      	add	r1, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	1acb      	subs	r3, r1, r3
 8009134:	e002      	b.n	800913c <CircularQueue_Sense+0x150>
 8009136:	7af9      	ldrb	r1, [r7, #11]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	440b      	add	r3, r1
 800913c:	4413      	add	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	8a7a      	ldrh	r2, [r7, #18]
 800914a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800914c:	697b      	ldr	r3, [r7, #20]
}
 800914e:	4618      	mov	r0, r3
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <__NVIC_SystemReset>:
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009160:	f3bf 8f4f 	dsb	sy
}
 8009164:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <__NVIC_SystemReset+0x24>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800916e:	4904      	ldr	r1, [pc, #16]	; (8009180 <__NVIC_SystemReset+0x24>)
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <__NVIC_SystemReset+0x28>)
 8009172:	4313      	orrs	r3, r2
 8009174:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009176:	f3bf 8f4f 	dsb	sy
}
 800917a:	bf00      	nop
    __NOP();
 800917c:	bf00      	nop
 800917e:	e7fd      	b.n	800917c <__NVIC_SystemReset+0x20>
 8009180:	e000ed00 	.word	0xe000ed00
 8009184:	05fa0004 	.word	0x05fa0004

08009188 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800918c:	4b03      	ldr	r3, [pc, #12]	; (800919c <LL_FLASH_GetUDN+0x14>)
 800918e:	681b      	ldr	r3, [r3, #0]
}
 8009190:	4618      	mov	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	1fff7580 	.word	0x1fff7580

080091a0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80091a4:	4b03      	ldr	r3, [pc, #12]	; (80091b4 <LL_FLASH_GetDeviceID+0x14>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	b2db      	uxtb	r3, r3
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	1fff7584 	.word	0x1fff7584

080091b8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <LL_FLASH_GetSTCompanyID+0x14>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	0a1b      	lsrs	r3, r3, #8
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	1fff7584 	.word	0x1fff7584

080091d0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80091d0:	b5b0      	push	{r4, r5, r7, lr}
 80091d2:	b090      	sub	sp, #64	; 0x40
 80091d4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80091d6:	4b20      	ldr	r3, [pc, #128]	; (8009258 <APP_BLE_Init+0x88>)
 80091d8:	1d3c      	adds	r4, r7, #4
 80091da:	461d      	mov	r5, r3
 80091dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80091ec:	c403      	stmia	r4!, {r0, r1}
 80091ee:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80091f0:	f000 f872 	bl	80092d8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80091f4:	2101      	movs	r1, #1
 80091f6:	2002      	movs	r0, #2
 80091f8:	f000 fe5e 	bl	8009eb8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80091fc:	4a17      	ldr	r2, [pc, #92]	; (800925c <APP_BLE_Init+0x8c>)
 80091fe:	2100      	movs	r1, #0
 8009200:	2002      	movs	r0, #2
 8009202:	f000 ff85 	bl	800a110 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009206:	1d3b      	adds	r3, r7, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fbfb 	bl	8007a04 <SHCI_C2_BLE_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8009214:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <APP_BLE_Init+0x5e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800921c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009220:	4619      	mov	r1, r3
 8009222:	480f      	ldr	r0, [pc, #60]	; (8009260 <APP_BLE_Init+0x90>)
 8009224:	f001 f978 	bl	800a518 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009228:	f7f8 fef6 	bl	8002018 <Error_Handler>
 800922c:	e002      	b.n	8009234 <APP_BLE_Init+0x64>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800922e:	480d      	ldr	r0, [pc, #52]	; (8009264 <APP_BLE_Init+0x94>)
 8009230:	f001 f972 	bl	800a518 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009234:	f000 f866 	bl	8009304 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009238:	f7fe fb58 	bl	80078ec <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 800923c:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <APP_BLE_Init+0x98>)
 800923e:	2100      	movs	r1, #0
 8009240:	2001      	movs	r0, #1
 8009242:	f000 ff65 	bl	800a110 <UTIL_SEQ_RegTask>
    IBeacon_Process();
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */
  else if (CFG_BEACON_TYPE & CFG_BEACON_PACHA)
  {
    APP_DBG_MSG("Pacha advertise\n\r");
 8009246:	4809      	ldr	r0, [pc, #36]	; (800926c <APP_BLE_Init+0x9c>)
 8009248:	f001 f966 	bl	800a518 <iprintf>
    BLE_Adv_Process();
 800924c:	f000 fd78 	bl	8009d40 <BLE_Adv_Process>
  }
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009250:	bf00      	nop
}
 8009252:	3740      	adds	r7, #64	; 0x40
 8009254:	46bd      	mov	sp, r7
 8009256:	bdb0      	pop	{r4, r5, r7, pc}
 8009258:	0800bae4 	.word	0x0800bae4
 800925c:	08007c21 	.word	0x08007c21
 8009260:	0800ba70 	.word	0x0800ba70
 8009264:	0800baa8 	.word	0x0800baa8
 8009268:	0800953d 	.word	0x0800953d
 800926c:	0800bad0 	.word	0x0800bad0

08009270 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3301      	adds	r3, #1
 800927c:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2bff      	cmp	r3, #255	; 0xff
 8009284:	d00e      	beq.n	80092a4 <SVCCTL_App_Notification+0x34>
 8009286:	2bff      	cmp	r3, #255	; 0xff
 8009288:	dc19      	bgt.n	80092be <SVCCTL_App_Notification+0x4e>
 800928a:	2b05      	cmp	r3, #5
 800928c:	d019      	beq.n	80092c2 <SVCCTL_App_Notification+0x52>
 800928e:	2b3e      	cmp	r3, #62	; 0x3e
 8009290:	d000      	beq.n	8009294 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009292:	e014      	b.n	80092be <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	3302      	adds	r3, #2
 8009298:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b01      	cmp	r3, #1
          break;
 80092a0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80092a2:	e011      	b.n	80092c8 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	3302      	adds	r3, #2
 80092a8:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	f240 4307 	movw	r3, #1031	; 0x407
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d105      	bne.n	80092c6 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80092ba:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80092bc:	e003      	b.n	80092c6 <SVCCTL_App_Notification+0x56>
      break;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80092c6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80092c8:	2301      	movs	r3, #1
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
	...

080092d8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80092de:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <Ble_Tl_Init+0x20>)
 80092e0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80092e2:	4b06      	ldr	r3, [pc, #24]	; (80092fc <Ble_Tl_Init+0x24>)
 80092e4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80092e6:	463b      	mov	r3, r7
 80092e8:	4619      	mov	r1, r3
 80092ea:	4805      	ldr	r0, [pc, #20]	; (8009300 <Ble_Tl_Init+0x28>)
 80092ec:	f7fe fc7c 	bl	8007be8 <hci_init>

  return;
 80092f0:	bf00      	nop
}
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	200300d8 	.word	0x200300d8
 80092fc:	080096a5 	.word	0x080096a5
 8009300:	0800966d 	.word	0x0800966d

08009304 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009304:	b5b0      	push	{r4, r5, r7, lr}
 8009306:	b08a      	sub	sp, #40	; 0x28
 8009308:	af04      	add	r7, sp, #16
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800930a:	2300      	movs	r3, #0
 800930c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800930e:	2392      	movs	r3, #146	; 0x92
 8009310:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8009312:	4873      	ldr	r0, [pc, #460]	; (80094e0 <Ble_Hci_Gap_Gatt_Init+0x1dc>)
 8009314:	f001 f966 	bl	800a5e4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009318:	f7fe f985 	bl	8007626 <hci_reset>
 800931c:	4603      	mov	r3, r0
 800931e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	4619      	mov	r1, r3
 800932a:	486e      	ldr	r0, [pc, #440]	; (80094e4 <Ble_Hci_Gap_Gatt_Init+0x1e0>)
 800932c:	f001 f8f4 	bl	800a518 <iprintf>
 8009330:	e002      	b.n	8009338 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8009332:	486d      	ldr	r0, [pc, #436]	; (80094e8 <Ble_Hci_Gap_Gatt_Init+0x1e4>)
 8009334:	f001 f956 	bl	800a5e4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009338:	f000 f932 	bl	80095a0 <BleGetBdAddress>
 800933c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	2106      	movs	r1, #6
 8009342:	2000      	movs	r0, #0
 8009344:	f7fe f883 	bl	800744e <aci_hal_write_config_data>
 8009348:	4603      	mov	r3, r0
 800934a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	4619      	mov	r1, r3
 8009356:	4865      	ldr	r0, [pc, #404]	; (80094ec <Ble_Hci_Gap_Gatt_Init+0x1e8>)
 8009358:	f001 f8de 	bl	800a518 <iprintf>
 800935c:	e021      	b.n	80093a2 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800935e:	4864      	ldr	r0, [pc, #400]	; (80094f0 <Ble_Hci_Gap_Gatt_Init+0x1ec>)
 8009360:	f001 f940 	bl	800a5e4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3305      	adds	r3, #5
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	4618      	mov	r0, r3
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	3304      	adds	r3, #4
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	461c      	mov	r4, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	3303      	adds	r3, #3
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	461d      	mov	r5, r3
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	3302      	adds	r3, #2
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	3301      	adds	r3, #1
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	4619      	mov	r1, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	9302      	str	r3, [sp, #8]
 8009392:	9101      	str	r1, [sp, #4]
 8009394:	9200      	str	r2, [sp, #0]
 8009396:	462b      	mov	r3, r5
 8009398:	4622      	mov	r2, r4
 800939a:	4601      	mov	r1, r0
 800939c:	4855      	ldr	r0, [pc, #340]	; (80094f4 <Ble_Hci_Gap_Gatt_Init+0x1f0>)
 800939e:	f001 f8bb 	bl	800a518 <iprintf>
  }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80093a2:	4a55      	ldr	r2, [pc, #340]	; (80094f8 <Ble_Hci_Gap_Gatt_Init+0x1f4>)
 80093a4:	2110      	movs	r1, #16
 80093a6:	2018      	movs	r0, #24
 80093a8:	f7fe f851 	bl	800744e <aci_hal_write_config_data>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	4619      	mov	r1, r3
 80093ba:	4850      	ldr	r0, [pc, #320]	; (80094fc <Ble_Hci_Gap_Gatt_Init+0x1f8>)
 80093bc:	f001 f8ac 	bl	800a518 <iprintf>
 80093c0:	e002      	b.n	80093c8 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80093c2:	484f      	ldr	r0, [pc, #316]	; (8009500 <Ble_Hci_Gap_Gatt_Init+0x1fc>)
 80093c4:	f001 f90e 	bl	800a5e4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80093c8:	4a4e      	ldr	r2, [pc, #312]	; (8009504 <Ble_Hci_Gap_Gatt_Init+0x200>)
 80093ca:	2110      	movs	r1, #16
 80093cc:	2008      	movs	r0, #8
 80093ce:	f7fe f83e 	bl	800744e <aci_hal_write_config_data>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	4619      	mov	r1, r3
 80093e0:	4849      	ldr	r0, [pc, #292]	; (8009508 <Ble_Hci_Gap_Gatt_Init+0x204>)
 80093e2:	f001 f899 	bl	800a518 <iprintf>
 80093e6:	e002      	b.n	80093ee <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80093e8:	4848      	ldr	r0, [pc, #288]	; (800950c <Ble_Hci_Gap_Gatt_Init+0x208>)
 80093ea:	f001 f8fb 	bl	800a5e4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80093ee:	2118      	movs	r1, #24
 80093f0:	2001      	movs	r0, #1
 80093f2:	f7fe f8b1 	bl	8007558 <aci_hal_set_tx_power_level>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	4619      	mov	r1, r3
 8009404:	4842      	ldr	r0, [pc, #264]	; (8009510 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8009406:	f001 f887 	bl	800a518 <iprintf>
 800940a:	e002      	b.n	8009412 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800940c:	4841      	ldr	r0, [pc, #260]	; (8009514 <Ble_Hci_Gap_Gatt_Init+0x210>)
 800940e:	f001 f8e9 	bl	800a5e4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009412:	f7fd ff4e 	bl	80072b2 <aci_gatt_init>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	4619      	mov	r1, r3
 8009424:	483c      	ldr	r0, [pc, #240]	; (8009518 <Ble_Hci_Gap_Gatt_Init+0x214>)
 8009426:	f001 f877 	bl	800a518 <iprintf>
 800942a:	e002      	b.n	8009432 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800942c:	483b      	ldr	r0, [pc, #236]	; (800951c <Ble_Hci_Gap_Gatt_Init+0x218>)
 800942e:	f001 f8d9 	bl	800a5e4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	f043 0301 	orr.w	r3, r3, #1
 800943c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d035      	beq.n	80094b0 <Ble_Hci_Gap_Gatt_Init+0x1ac>
  {
    const char *name = "PACHA";
 8009444:	4b36      	ldr	r3, [pc, #216]	; (8009520 <Ble_Hci_Gap_Gatt_Init+0x21c>)
 8009446:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009448:	1dba      	adds	r2, r7, #6
 800944a:	7bf8      	ldrb	r0, [r7, #15]
 800944c:	1cbb      	adds	r3, r7, #2
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	1d3b      	adds	r3, r7, #4
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	2207      	movs	r2, #7
 8009458:	2100      	movs	r1, #0
 800945a:	f7fd fe0b 	bl	8007074 <aci_gap_init>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d005      	beq.n	8009474 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	4619      	mov	r1, r3
 800946c:	482d      	ldr	r0, [pc, #180]	; (8009524 <Ble_Hci_Gap_Gatt_Init+0x220>)
 800946e:	f001 f853 	bl	800a518 <iprintf>
 8009472:	e002      	b.n	800947a <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8009474:	482c      	ldr	r0, [pc, #176]	; (8009528 <Ble_Hci_Gap_Gatt_Init+0x224>)
 8009476:	f001 f8b5 	bl	800a5e4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800947a:	88fc      	ldrh	r4, [r7, #6]
 800947c:	88bd      	ldrh	r5, [r7, #4]
 800947e:	68b8      	ldr	r0, [r7, #8]
 8009480:	f7f6 fe7e 	bl	8000180 <strlen>
 8009484:	4603      	mov	r3, r0
 8009486:	b2da      	uxtb	r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	4613      	mov	r3, r2
 800948e:	2200      	movs	r2, #0
 8009490:	4629      	mov	r1, r5
 8009492:	4620      	mov	r0, r4
 8009494:	f7fd ff32 	bl	80072fc <aci_gatt_update_char_value>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <Ble_Hci_Gap_Gatt_Init+0x1a6>
    {
      BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Device Name\n");
 80094a2:	4822      	ldr	r0, [pc, #136]	; (800952c <Ble_Hci_Gap_Gatt_Init+0x228>)
 80094a4:	f001 f89e 	bl	800a5e4 <puts>
 80094a8:	e002      	b.n	80094b0 <Ble_Hci_Gap_Gatt_Init+0x1ac>
    }
    else
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
 80094aa:	4821      	ldr	r0, [pc, #132]	; (8009530 <Ble_Hci_Gap_Gatt_Init+0x22c>)
 80094ac:	f001 f89a 	bl	800a5e4 <puts>
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80094b0:	88f8      	ldrh	r0, [r7, #6]
 80094b2:	8879      	ldrh	r1, [r7, #2]
 80094b4:	463b      	mov	r3, r7
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	2302      	movs	r3, #2
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7fd ff1e 	bl	80072fc <aci_gatt_update_char_value>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75fb      	strb	r3, [r7, #23]
                                   gap_appearance_char_handle,
                                   0,
                                   2,
                                   (uint8_t *)&a_appearance);
  if (ret != BLE_STATUS_SUCCESS)
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <Ble_Hci_Gap_Gatt_Init+0x1ce>
  {
    BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Appearance\n");
 80094ca:	481a      	ldr	r0, [pc, #104]	; (8009534 <Ble_Hci_Gap_Gatt_Init+0x230>)
 80094cc:	f001 f88a 	bl	800a5e4 <puts>
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 80094d0:	e002      	b.n	80094d8 <Ble_Hci_Gap_Gatt_Init+0x1d4>
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
 80094d2:	4819      	ldr	r0, [pc, #100]	; (8009538 <Ble_Hci_Gap_Gatt_Init+0x234>)
 80094d4:	f001 f886 	bl	800a5e4 <puts>
}
 80094d8:	bf00      	nop
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bdb0      	pop	{r4, r5, r7, pc}
 80094e0:	0800bb20 	.word	0x0800bb20
 80094e4:	0800bb4c 	.word	0x0800bb4c
 80094e8:	0800bb7c 	.word	0x0800bb7c
 80094ec:	0800bb9c 	.word	0x0800bb9c
 80094f0:	0800bbf8 	.word	0x0800bbf8
 80094f4:	0800bc44 	.word	0x0800bc44
 80094f8:	0800c20c 	.word	0x0800c20c
 80094fc:	0800bc80 	.word	0x0800bc80
 8009500:	0800bcd8 	.word	0x0800bcd8
 8009504:	0800c21c 	.word	0x0800c21c
 8009508:	0800bd20 	.word	0x0800bd20
 800950c:	0800bd78 	.word	0x0800bd78
 8009510:	0800bdc0 	.word	0x0800bdc0
 8009514:	0800be00 	.word	0x0800be00
 8009518:	0800be30 	.word	0x0800be30
 800951c:	0800be64 	.word	0x0800be64
 8009520:	0800be88 	.word	0x0800be88
 8009524:	0800be90 	.word	0x0800be90
 8009528:	0800bec0 	.word	0x0800bec0
 800952c:	0800bee0 	.word	0x0800bee0
 8009530:	0800bf14 	.word	0x0800bf14
 8009534:	0800bf48 	.word	0x0800bf48
 8009538:	0800bf7c 	.word	0x0800bf7c

0800953c <Beacon_Update>:
static void Beacon_Update(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8009546:	4b13      	ldr	r3, [pc, #76]	; (8009594 <Beacon_Update+0x58>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d01b      	beq.n	8009586 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800954e:	2302      	movs	r3, #2
 8009550:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8009552:	4b10      	ldr	r3, [pc, #64]	; (8009594 <Beacon_Update+0x58>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8009558:	4b0e      	ldr	r3, [pc, #56]	; (8009594 <Beacon_Update+0x58>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b07      	cmp	r3, #7
 800955e:	d102      	bne.n	8009566 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8009560:	2302      	movs	r3, #2
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e001      	b.n	800956a <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8009566:	2301      	movs	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 800956a:	f7f9 fe81 	bl	8003270 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800956e:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <Beacon_Update+0x5c>)
 8009570:	f248 0211 	movw	r2, #32785	; 0x8011
 8009574:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8009576:	463a      	mov	r2, r7
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7f9 ff23 	bl	80033c8 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8009582:	f7f9 fe97 	bl	80032b4 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8009586:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800958a:	4a04      	ldr	r2, [pc, #16]	; (800959c <Beacon_Update+0x60>)
 800958c:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 800958e:	f7ff fde5 	bl	800915c <__NVIC_SystemReset>
 8009592:	bf00      	nop
 8009594:	20001486 	.word	0x20001486
 8009598:	58004000 	.word	0x58004000
 800959c:	00010601 	.word	0x00010601

080095a0 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80095a6:	f7ff fdef 	bl	8009188 <LL_FLASH_GetUDN>
 80095aa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d023      	beq.n	80095fc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80095b4:	f7ff fe00 	bl	80091b8 <LL_FLASH_GetSTCompanyID>
 80095b8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80095ba:	f7ff fdf1 	bl	80091a0 <LL_FLASH_GetDeviceID>
 80095be:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	4b16      	ldr	r3, [pc, #88]	; (8009620 <BleGetBdAddress+0x80>)
 80095c6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	0a1b      	lsrs	r3, r3, #8
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	4b14      	ldr	r3, [pc, #80]	; (8009620 <BleGetBdAddress+0x80>)
 80095d0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	4b12      	ldr	r3, [pc, #72]	; (8009620 <BleGetBdAddress+0x80>)
 80095d8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	4b10      	ldr	r3, [pc, #64]	; (8009620 <BleGetBdAddress+0x80>)
 80095e0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	0a1b      	lsrs	r3, r3, #8
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <BleGetBdAddress+0x80>)
 80095ea:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	0c1b      	lsrs	r3, r3, #16
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <BleGetBdAddress+0x80>)
 80095f4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80095f6:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <BleGetBdAddress+0x80>)
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	e00b      	b.n	8009614 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80095fc:	2000      	movs	r0, #0
 80095fe:	f7ff f8c5 	bl	800878c <OTP_Read>
 8009602:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	e001      	b.n	8009614 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <BleGetBdAddress+0x84>)
 8009612:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009614:	697b      	ldr	r3, [r7, #20]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20001480 	.word	0x20001480
 8009624:	0800c204 	.word	0x0800c204

08009628 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009630:	2100      	movs	r1, #0
 8009632:	2002      	movs	r0, #2
 8009634:	f000 fd8e 	bl	800a154 <UTIL_SEQ_SetTask>

  return;
 8009638:	bf00      	nop
}
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009648:	2001      	movs	r0, #1
 800964a:	f000 fdef 	bl	800a22c <UTIL_SEQ_SetEvt>

  return;
 800964e:	bf00      	nop
}
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800965e:	2001      	movs	r0, #1
 8009660:	f000 fe04 	bl	800a26c <UTIL_SEQ_WaitEvt>

  return;
 8009664:	bf00      	nop
}
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	3308      	adds	r3, #8
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe f96c 	bl	800795c <SVCCTL_UserEvtRx>
 8009684:	4603      	mov	r3, r0
 8009686:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009694:	e003      	b.n	800969e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	701a      	strb	r2, [r3, #0]
  return;
 800969c:	bf00      	nop
}
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	4603      	mov	r3, r0
 80096ac:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <BLE_StatusNot+0x16>
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d006      	beq.n	80096c6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80096b8:	e00b      	b.n	80096d2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80096ba:	2303      	movs	r3, #3
 80096bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 fd74 	bl	800a1ac <UTIL_SEQ_PauseTask>
      break;
 80096c4:	e005      	b.n	80096d2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80096c6:	2303      	movs	r3, #3
 80096c8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 fd8e 	bl	800a1ec <UTIL_SEQ_ResumeTask>
      break;
 80096d0:	bf00      	nop
  }

  return;
 80096d2:	bf00      	nop
}
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
	...

080096dc <LL_PWR_EnableBootC2>:
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80096e0:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <LL_PWR_EnableBootC2+0x1c>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	4a04      	ldr	r2, [pc, #16]	; (80096f8 <LL_PWR_EnableBootC2+0x1c>)
 80096e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ea:	60d3      	str	r3, [r2, #12]
}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	58000400 	.word	0x58000400

080096fc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009706:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800970a:	4905      	ldr	r1, [pc, #20]	; (8009720 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4313      	orrs	r3, r2
 8009710:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	58000800 	.word	0x58000800

08009724 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	4904      	ldr	r1, [pc, #16]	; (8009744 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4313      	orrs	r3, r2
 8009736:	620b      	str	r3, [r1, #32]
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	58000800 	.word	0x58000800

08009748 <LL_AHB3_GRP1_EnableClock>:
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4313      	orrs	r3, r2
 800975e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4013      	ands	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800976c:	68fb      	ldr	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009786:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800978a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4313      	orrs	r3, r2
 8009792:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800979a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4013      	ands	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	bf00      	nop
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	601a      	str	r2, [r3, #0]
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f043 0201 	orr.w	r2, r3, #1
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	43db      	mvns	r3, r3
 8009806:	401a      	ands	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	605a      	str	r2, [r3, #4]
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	041b      	lsls	r3, r3, #16
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	605a      	str	r2, [r3, #4]
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	43db      	mvns	r3, r3
 800984e:	401a      	ands	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	605a      	str	r2, [r3, #4]
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	609a      	str	r2, [r3, #8]
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <LL_C1_IPCC_SetFlag_CHx>:
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	041a      	lsls	r2, r3, #16
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	609a      	str	r2, [r3, #8]
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	4013      	ands	r3, r2
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d101      	bne.n	80098b6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69da      	ldr	r2, [r3, #28]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	4013      	ands	r3, r2
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d101      	bne.n	80098e0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80098dc:	2301      	movs	r3, #1
 80098de:	e000      	b.n	80098e2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
	...

080098f0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80098f4:	2102      	movs	r1, #2
 80098f6:	4818      	ldr	r0, [pc, #96]	; (8009958 <HW_IPCC_Rx_Handler+0x68>)
 80098f8:	f7ff ffe4 	bl	80098c4 <LL_C2_IPCC_IsActiveFlag_CHx>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d008      	beq.n	8009914 <HW_IPCC_Rx_Handler+0x24>
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <HW_IPCC_Rx_Handler+0x68>)
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800990e:	f000 f8d5 	bl	8009abc <HW_IPCC_SYS_EvtHandler>
 8009912:	e01e      	b.n	8009952 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009914:	2101      	movs	r1, #1
 8009916:	4810      	ldr	r0, [pc, #64]	; (8009958 <HW_IPCC_Rx_Handler+0x68>)
 8009918:	f7ff ffd4 	bl	80098c4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <HW_IPCC_Rx_Handler+0x44>
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <HW_IPCC_Rx_Handler+0x68>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800992e:	f000 f889 	bl	8009a44 <HW_IPCC_BLE_EvtHandler>
 8009932:	e00e      	b.n	8009952 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009934:	2108      	movs	r1, #8
 8009936:	4808      	ldr	r0, [pc, #32]	; (8009958 <HW_IPCC_Rx_Handler+0x68>)
 8009938:	f7ff ffc4 	bl	80098c4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HW_IPCC_Rx_Handler+0x64>
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <HW_IPCC_Rx_Handler+0x68>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800994e:	f000 f901 	bl	8009b54 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009952:	bf00      	nop
 8009954:	bf00      	nop
}
 8009956:	bd80      	pop	{r7, pc}
 8009958:	58000c00 	.word	0x58000c00

0800995c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009960:	2102      	movs	r1, #2
 8009962:	4818      	ldr	r0, [pc, #96]	; (80099c4 <HW_IPCC_Tx_Handler+0x68>)
 8009964:	f7ff ff99 	bl	800989a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d108      	bne.n	8009980 <HW_IPCC_Tx_Handler+0x24>
 800996e:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <HW_IPCC_Tx_Handler+0x68>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800997a:	f000 f893 	bl	8009aa4 <HW_IPCC_SYS_CmdEvtHandler>
 800997e:	e01e      	b.n	80099be <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009980:	2108      	movs	r1, #8
 8009982:	4810      	ldr	r0, [pc, #64]	; (80099c4 <HW_IPCC_Tx_Handler+0x68>)
 8009984:	f7ff ff89 	bl	800989a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d108      	bne.n	80099a0 <HW_IPCC_Tx_Handler+0x44>
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <HW_IPCC_Tx_Handler+0x68>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800999a:	f000 f8bd 	bl	8009b18 <HW_IPCC_MM_FreeBufHandler>
 800999e:	e00e      	b.n	80099be <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80099a0:	2120      	movs	r1, #32
 80099a2:	4808      	ldr	r0, [pc, #32]	; (80099c4 <HW_IPCC_Tx_Handler+0x68>)
 80099a4:	f7ff ff79 	bl	800989a <LL_C1_IPCC_IsActiveFlag_CHx>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d108      	bne.n	80099c0 <HW_IPCC_Tx_Handler+0x64>
 80099ae:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <HW_IPCC_Tx_Handler+0x68>)
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80099ba:	f000 f84f 	bl	8009a5c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80099be:	bf00      	nop
 80099c0:	bf00      	nop
}
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	58000c00 	.word	0x58000c00

080099c8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80099cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80099d0:	f7ff fed3 	bl	800977a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80099d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80099d8:	f7ff fea4 	bl	8009724 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80099dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80099e0:	f7ff fe8c 	bl	80096fc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80099e4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80099e6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80099e8:	f7ff fe78 	bl	80096dc <LL_PWR_EnableBootC2>

  return;
 80099ec:	bf00      	nop
}
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80099f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80099f8:	f7ff fea6 	bl	8009748 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80099fc:	4806      	ldr	r0, [pc, #24]	; (8009a18 <HW_IPCC_Init+0x28>)
 80099fe:	f7ff fee8 	bl	80097d2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <HW_IPCC_Init+0x28>)
 8009a04:	f7ff fed5 	bl	80097b2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009a08:	202c      	movs	r0, #44	; 0x2c
 8009a0a:	f7f9 f87a 	bl	8002b02 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009a0e:	202d      	movs	r0, #45	; 0x2d
 8009a10:	f7f9 f877 	bl	8002b02 <HAL_NVIC_EnableIRQ>

  return;
 8009a14:	bf00      	nop
}
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	58000c00 	.word	0x58000c00

08009a1c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009a20:	2101      	movs	r1, #1
 8009a22:	4802      	ldr	r0, [pc, #8]	; (8009a2c <HW_IPCC_BLE_Init+0x10>)
 8009a24:	f7ff ff0a 	bl	800983c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009a28:	bf00      	nop
}
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	58000c00 	.word	0x58000c00

08009a30 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009a34:	2101      	movs	r1, #1
 8009a36:	4802      	ldr	r0, [pc, #8]	; (8009a40 <HW_IPCC_BLE_SendCmd+0x10>)
 8009a38:	f7ff ff20 	bl	800987c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009a3c:	bf00      	nop
}
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	58000c00 	.word	0x58000c00

08009a44 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009a48:	f7fe fc32 	bl	80082b0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4802      	ldr	r0, [pc, #8]	; (8009a58 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009a50:	f7ff ff06 	bl	8009860 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009a54:	bf00      	nop
}
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	58000c00 	.word	0x58000c00

08009a5c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009a60:	2120      	movs	r1, #32
 8009a62:	4803      	ldr	r0, [pc, #12]	; (8009a70 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009a64:	f7ff fed8 	bl	8009818 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009a68:	f7fe fc52 	bl	8008310 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009a6c:	bf00      	nop
}
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	58000c00 	.word	0x58000c00

08009a74 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009a78:	2102      	movs	r1, #2
 8009a7a:	4802      	ldr	r0, [pc, #8]	; (8009a84 <HW_IPCC_SYS_Init+0x10>)
 8009a7c:	f7ff fede 	bl	800983c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009a80:	bf00      	nop
}
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	58000c00 	.word	0x58000c00

08009a88 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	4804      	ldr	r0, [pc, #16]	; (8009aa0 <HW_IPCC_SYS_SendCmd+0x18>)
 8009a90:	f7ff fef4 	bl	800987c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009a94:	2102      	movs	r1, #2
 8009a96:	4802      	ldr	r0, [pc, #8]	; (8009aa0 <HW_IPCC_SYS_SendCmd+0x18>)
 8009a98:	f7ff feab 	bl	80097f2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009a9c:	bf00      	nop
}
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	58000c00 	.word	0x58000c00

08009aa4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009aa8:	2102      	movs	r1, #2
 8009aaa:	4803      	ldr	r0, [pc, #12]	; (8009ab8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009aac:	f7ff feb4 	bl	8009818 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009ab0:	f7fe fc7e 	bl	80083b0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009ab4:	bf00      	nop
}
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	58000c00 	.word	0x58000c00

08009abc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009ac0:	f7fe fc8c 	bl	80083dc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	4802      	ldr	r0, [pc, #8]	; (8009ad0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009ac8:	f7ff feca 	bl	8009860 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009acc:	bf00      	nop
}
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	58000c00 	.word	0x58000c00

08009ad4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009adc:	2108      	movs	r1, #8
 8009ade:	480c      	ldr	r0, [pc, #48]	; (8009b10 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009ae0:	f7ff fedb 	bl	800989a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009aea:	4a0a      	ldr	r2, [pc, #40]	; (8009b14 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009af0:	2108      	movs	r1, #8
 8009af2:	4807      	ldr	r0, [pc, #28]	; (8009b10 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009af4:	f7ff fe7d 	bl	80097f2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009af8:	e006      	b.n	8009b08 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009afe:	2108      	movs	r1, #8
 8009b00:	4803      	ldr	r0, [pc, #12]	; (8009b10 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b02:	f7ff febb 	bl	800987c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009b06:	bf00      	nop
}
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	58000c00 	.word	0x58000c00
 8009b14:	20001488 	.word	0x20001488

08009b18 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b1c:	2108      	movs	r1, #8
 8009b1e:	4806      	ldr	r0, [pc, #24]	; (8009b38 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b20:	f7ff fe7a 	bl	8009818 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b2a:	2108      	movs	r1, #8
 8009b2c:	4802      	ldr	r0, [pc, #8]	; (8009b38 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b2e:	f7ff fea5 	bl	800987c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009b32:	bf00      	nop
}
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	58000c00 	.word	0x58000c00
 8009b3c:	20001488 	.word	0x20001488

08009b40 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009b44:	2108      	movs	r1, #8
 8009b46:	4802      	ldr	r0, [pc, #8]	; (8009b50 <HW_IPCC_TRACES_Init+0x10>)
 8009b48:	f7ff fe78 	bl	800983c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009b4c:	bf00      	nop
}
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	58000c00 	.word	0x58000c00

08009b54 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009b58:	f7fe fce8 	bl	800852c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009b5c:	2108      	movs	r1, #8
 8009b5e:	4802      	ldr	r0, [pc, #8]	; (8009b68 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009b60:	f7ff fe7e 	bl	8009860 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009b64:	bf00      	nop
}
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	58000c00 	.word	0x58000c00

08009b6c <BLE_Adv_Init>:
/* Private function prototypes -----------------------------------------------*/
static uint8_t u8StatusbitmapToUint(BLE_Adv_InitTypeDef *p_sBLE_Adv_Init);

/* Private functions ---------------------------------------------------------*/
static tBleStatus BLE_Adv_Init(BLE_Adv_InitTypeDef *p_sBLE_Adv_Init)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b090      	sub	sp, #64	; 0x40
 8009b70:	af08      	add	r7, sp, #32
 8009b72:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8009b74:	2300      	movs	r3, #0
 8009b76:	77fb      	strb	r3, [r7, #31]
  uint16_t p_u16AdvertisingInterval = (BLE_Adv_InitStruct.u16AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8009b78:	4b42      	ldr	r3, [pc, #264]	; (8009c84 <BLE_Adv_Init+0x118>)
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	4a42      	ldr	r2, [pc, #264]	; (8009c88 <BLE_Adv_Init+0x11c>)
 8009b80:	fb82 1203 	smull	r1, r2, r2, r3
 8009b84:	1092      	asrs	r2, r2, #2
 8009b86:	17db      	asrs	r3, r3, #31
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	83bb      	strh	r3, [r7, #28]
  uint8_t u8BleStatusByte = u8StatusbitmapToUint(p_sBLE_Adv_Init);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f8bf 	bl	8009d10 <u8StatusbitmapToUint>
 8009b92:	4603      	mov	r3, r0
 8009b94:	76fb      	strb	r3, [r7, #27]
 // uint8_t u8BleStatusByte = 0;
  uint8_t service_data[] =
 8009b96:	230e      	movs	r3, #14
 8009b98:	733b      	strb	r3, [r7, #12]
 8009b9a:	2316      	movs	r3, #22
 8009b9c:	737b      	strb	r3, [r7, #13]
 8009b9e:	23aa      	movs	r3, #170	; 0xaa
 8009ba0:	73bb      	strb	r3, [r7, #14]
 8009ba2:	23fe      	movs	r3, #254	; 0xfe
 8009ba4:	73fb      	strb	r3, [r7, #15]
 8009ba6:	235d      	movs	r3, #93	; 0x5d
 8009ba8:	743b      	strb	r3, [r7, #16]
  {
    14,                                                                      /*< Length. */
    AD_TYPE_SERVICE_DATA,                                                    /*< Service Data data type value. */
    0xAA, 0xFE,                                                              /*< 16-bit Eddystone UUID. */
    0x5D,                                                                    /*< Pacha frame type. A définir*/
	(p_sBLE_Adv_Init->u8CalibratedTxPower & 0xFF),
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	789b      	ldrb	r3, [r3, #2]
  uint8_t service_data[] =
 8009bae:	747b      	strb	r3, [r7, #17]
	(p_sBLE_Adv_Init->u16UnlockingCode & 0xFF00) >> 8,                        /*< Pacha Unlocking Code. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	889b      	ldrh	r3, [r3, #4]
 8009bb4:	0a1b      	lsrs	r3, r3, #8
 8009bb6:	b29b      	uxth	r3, r3
  uint8_t service_data[] =
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	74bb      	strb	r3, [r7, #18]
    (p_sBLE_Adv_Init->u16UnlockingCode & 0x00FF),
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	889b      	ldrh	r3, [r3, #4]
  uint8_t service_data[] =
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	74fb      	strb	r3, [r7, #19]
    (p_sBLE_Adv_Init->u16KeyCode & 0xFF00) >> 8,                             /*< Pacha uKeyCode. */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	88db      	ldrh	r3, [r3, #6]
 8009bc8:	0a1b      	lsrs	r3, r3, #8
 8009bca:	b29b      	uxth	r3, r3
  uint8_t service_data[] =
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	753b      	strb	r3, [r7, #20]
    (p_sBLE_Adv_Init->u16KeyCode & 0x00FF),
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	88db      	ldrh	r3, [r3, #6]
  uint8_t service_data[] =
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	757b      	strb	r3, [r7, #21]
    (p_sBLE_Adv_Init->u32Uptime & 0xFF000000) >> 24,                          /*< Time since power-on or reboot. */
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	0e1b      	lsrs	r3, r3, #24
  uint8_t service_data[] =
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	75bb      	strb	r3, [r7, #22]
    (p_sBLE_Adv_Init->u32Uptime & 0x00FF0000) >> 16,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	0c1b      	lsrs	r3, r3, #16
  uint8_t service_data[] =
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	75fb      	strb	r3, [r7, #23]
    (p_sBLE_Adv_Init->u32Uptime & 0x0000FF00) >> 8,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	0a1b      	lsrs	r3, r3, #8
  uint8_t service_data[] =
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	763b      	strb	r3, [r7, #24]
    (p_sBLE_Adv_Init->u32Uptime & 0x000000FF),
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	767b      	strb	r3, [r7, #25]
 8009bfe:	7efb      	ldrb	r3, [r7, #27]
 8009c00:	76bb      	strb	r3, [r7, #26]
	(u8BleStatusByte & 0xFF)
  };

  /* Set local name*/
  if (g_u8LocalNameDefined == 0)
 8009c02:	4b22      	ldr	r3, [pc, #136]	; (8009c8c <BLE_Adv_Init+0x120>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <BLE_Adv_Init+0xa8>
  {
	  BLE_SetPachaBleID();
 8009c0a:	f000 f8cd 	bl	8009da8 <BLE_SetPachaBleID>
	  g_u8LocalNameDefined = 1;
 8009c0e:	4b1f      	ldr	r3, [pc, #124]	; (8009c8c <BLE_Adv_Init+0x120>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	701a      	strb	r2, [r3, #0]
  }


  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8009c14:	2100      	movs	r1, #0
 8009c16:	2000      	movs	r0, #0
 8009c18:	f7fd fd61 	bl	80076de <hci_le_set_scan_response_data>
  //uint8_t taillechaine = sizeof(g_sLocalName);

/* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          				/*< Advertise as non-connectable, undirected. */
 8009c1c:	4b1c      	ldr	r3, [pc, #112]	; (8009c90 <BLE_Adv_Init+0x124>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	8bba      	ldrh	r2, [r7, #28]
 8009c22:	8bb9      	ldrh	r1, [r7, #28]
 8009c24:	2000      	movs	r0, #0
 8009c26:	9006      	str	r0, [sp, #24]
 8009c28:	2000      	movs	r0, #0
 8009c2a:	9005      	str	r0, [sp, #20]
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	9004      	str	r0, [sp, #16]
 8009c30:	2000      	movs	r0, #0
 8009c32:	9003      	str	r0, [sp, #12]
 8009c34:	4817      	ldr	r0, [pc, #92]	; (8009c94 <BLE_Adv_Init+0x128>)
 8009c36:	9002      	str	r0, [sp, #8]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	2003      	movs	r0, #3
 8009c42:	f7fd f91d 	bl	8006e80 <aci_gap_set_discoverable>
 8009c46:	4603      	mov	r3, r0
 8009c48:	77fb      	strb	r3, [r7, #31]
                                 GAP_PUBLIC_ADDR, NO_WHITE_LIST_USE,       			    /*< Use the public address, with no white list. */
								 g_u8SizeLocalName, (uint8_t*) &g_sLocalName,        /*< Do not use a local name. */
                                 0, NULL,                                 			 	/*< Do not include the service UUID list. */
                                 0, 0);                                    				/*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8009c4a:	7ffb      	ldrb	r3, [r7, #31]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <BLE_Adv_Init+0xe8>
  {
    return ret;
 8009c50:	7ffb      	ldrb	r3, [r7, #31]
 8009c52:	e012      	b.n	8009c7a <BLE_Adv_Init+0x10e>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  //ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);

  if (ret != BLE_STATUS_SUCCESS)
 8009c54:	7ffb      	ldrb	r3, [r7, #31]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <BLE_Adv_Init+0xf2>
  {
    return ret;
 8009c5a:	7ffb      	ldrb	r3, [r7, #31]
 8009c5c:	e00d      	b.n	8009c7a <BLE_Adv_Init+0x10e>
  }

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8009c5e:	f107 030c 	add.w	r3, r7, #12
 8009c62:	4619      	mov	r1, r3
 8009c64:	200f      	movs	r0, #15
 8009c66:	f7fd fab2 	bl	80071ce <aci_gap_update_adv_data>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	77fb      	strb	r3, [r7, #31]

  if (ret != BLE_STATUS_SUCCESS)
 8009c6e:	7ffb      	ldrb	r3, [r7, #31]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <BLE_Adv_Init+0x10c>
  {
    return ret;
 8009c74:	7ffb      	ldrb	r3, [r7, #31]
 8009c76:	e000      	b.n	8009c7a <BLE_Adv_Init+0x10e>
  }

  return ret;
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3720      	adds	r7, #32
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20001490 	.word	0x20001490
 8009c88:	66666667 	.word	0x66666667
 8009c8c:	200014c0 	.word	0x200014c0
 8009c90:	200014bf 	.word	0x200014bf
 8009c94:	200014a0 	.word	0x200014a0

08009c98 <BLE_Adv>:

static void BLE_Adv(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
	tBleStatus ret;

  if(ble_adv == TRUE)
 8009c9e:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <BLE_Adv+0x6c>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d115      	bne.n	8009cd2 <BLE_Adv+0x3a>
  { /* Advertising of TLM */
    ret = aci_gap_set_non_discoverable();
 8009ca6:	f7fd f8c7 	bl	8006e38 <aci_gap_set_non_discoverable>
 8009caa:	4603      	mov	r3, r0
 8009cac:	71fb      	strb	r3, [r7, #7]

    if (ret != BLE_STATUS_SUCCESS)
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d000      	beq.n	8009cb6 <BLE_Adv+0x1e>
    {
      while(1);
 8009cb4:	e7fe      	b.n	8009cb4 <BLE_Adv+0x1c>
    }


    /* No OTA */
    BLE_Adv_Init(&BLE_Adv_InitStruct);
 8009cb6:	4814      	ldr	r0, [pc, #80]	; (8009d08 <BLE_Adv+0x70>)
 8009cb8:	f7ff ff58 	bl	8009b6c <BLE_Adv_Init>

    ble_adv = FALSE;
 8009cbc:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <BLE_Adv+0x6c>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]

    /* Wait 1s */
    HW_TS_Start(TimerBLEAdv_Id, DEFAULT_BEACON_SEC);
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <BLE_Adv+0x74>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	f640 0101 	movw	r1, #2049	; 0x801
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7f7 ff00 	bl	8001ad0 <HW_TS_Start>
    BLE_Adv_Init(&BLE_Adv_InitStruct);
    ble_adv = TRUE;
    /* 10s of URL advertise */
    HW_TS_Start(TimerBLEAdv_Id, DEFAULT_BEACON_SEC * 10);
  }
}
 8009cd0:	e014      	b.n	8009cfc <BLE_Adv+0x64>
    ret = aci_gap_set_non_discoverable();
 8009cd2:	f7fd f8b1 	bl	8006e38 <aci_gap_set_non_discoverable>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	71fb      	strb	r3, [r7, #7]
    if (ret != BLE_STATUS_SUCCESS)
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d000      	beq.n	8009ce2 <BLE_Adv+0x4a>
      while(1);
 8009ce0:	e7fe      	b.n	8009ce0 <BLE_Adv+0x48>
    BLE_Adv_Init(&BLE_Adv_InitStruct);
 8009ce2:	4809      	ldr	r0, [pc, #36]	; (8009d08 <BLE_Adv+0x70>)
 8009ce4:	f7ff ff42 	bl	8009b6c <BLE_Adv_Init>
    ble_adv = TRUE;
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <BLE_Adv+0x6c>)
 8009cea:	2201      	movs	r2, #1
 8009cec:	701a      	strb	r2, [r3, #0]
    HW_TS_Start(TimerBLEAdv_Id, DEFAULT_BEACON_SEC * 10);
 8009cee:	4b07      	ldr	r3, [pc, #28]	; (8009d0c <BLE_Adv+0x74>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f245 010a 	movw	r1, #20490	; 0x500a
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f7 feea 	bl	8001ad0 <HW_TS_Start>
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	2000148c 	.word	0x2000148c
 8009d08:	20001490 	.word	0x20001490
 8009d0c:	2000148d 	.word	0x2000148d

08009d10 <u8StatusbitmapToUint>:

static uint8_t u8StatusbitmapToUint(BLE_Adv_InitTypeDef *p_sBLE_Adv_Init)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	uint8_t l_u8BleStatusByte=0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
	l_u8BleStatusByte += p_sBLE_Adv_Init->sBleStatusByte.u4State << 4;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7b1b      	ldrb	r3, [r3, #12]
 8009d20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	73fb      	strb	r3, [r7, #15]
	return l_u8BleStatusByte;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
	...

08009d40 <BLE_Adv_Process>:

/* Exported functions --------------------------------------------------------*/
void BLE_Adv_Process(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0

  BLE_Adv_InitStruct.u16AdvertisingInterval = ADVERTISING_INTERVAL_IN_MS;
 8009d44:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <BLE_Adv_Process+0x54>)
 8009d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d4a:	801a      	strh	r2, [r3, #0]
  BLE_Adv_InitStruct.u16UnlockingCode = 0x3C3D;
 8009d4c:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <BLE_Adv_Process+0x54>)
 8009d4e:	f643 423d 	movw	r2, #15421	; 0x3c3d
 8009d52:	809a      	strh	r2, [r3, #4]
  BLE_Adv_InitStruct.u16KeyCode = 0x4E4F;
 8009d54:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <BLE_Adv_Process+0x54>)
 8009d56:	f644 624f 	movw	r2, #20047	; 0x4e4f
 8009d5a:	80da      	strh	r2, [r3, #6]
  BLE_Adv_InitStruct.u32Uptime = 543210;
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <BLE_Adv_Process+0x54>)
 8009d5e:	4a0e      	ldr	r2, [pc, #56]	; (8009d98 <BLE_Adv_Process+0x58>)
 8009d60:	609a      	str	r2, [r3, #8]
  BLE_Adv_InitStruct.u8CalibratedTxPower = CALIBRATED_TX_POWER_AT_0_M;
 8009d62:	4b0c      	ldr	r3, [pc, #48]	; (8009d94 <BLE_Adv_Process+0x54>)
 8009d64:	22ea      	movs	r2, #234	; 0xea
 8009d66:	709a      	strb	r2, [r3, #2]

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(TimerBLEAdv_Id), hw_ts_SingleShot, BLE_Adv);
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <BLE_Adv_Process+0x5c>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	490c      	ldr	r1, [pc, #48]	; (8009da0 <BLE_Adv_Process+0x60>)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f7f7 fdb0 	bl	80018d4 <HW_TS_Create>

  BLE_Adv_Init(&BLE_Adv_InitStruct);
 8009d74:	4807      	ldr	r0, [pc, #28]	; (8009d94 <BLE_Adv_Process+0x54>)
 8009d76:	f7ff fef9 	bl	8009b6c <BLE_Adv_Init>
  ble_adv = TRUE;
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <BLE_Adv_Process+0x64>)
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]

  /* 10s of URL advertise */
  HW_TS_Start(TimerBLEAdv_Id, DEFAULT_BEACON_SEC * 10);
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <BLE_Adv_Process+0x60>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f245 010a 	movw	r1, #20490	; 0x500a
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7f7 fea1 	bl	8001ad0 <HW_TS_Start>

}
 8009d8e:	bf00      	nop
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20001490 	.word	0x20001490
 8009d98:	000849ea 	.word	0x000849ea
 8009d9c:	08009c99 	.word	0x08009c99
 8009da0:	2000148d 	.word	0x2000148d
 8009da4:	2000148c 	.word	0x2000148c

08009da8 <BLE_SetPachaBleID>:

void BLE_SetPachaBleID(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08e      	sub	sp, #56	; 0x38
 8009dac:	af02      	add	r7, sp, #8
	char l_achBleMacAddress[] = "00000000";
 8009dae:	4a1c      	ldr	r2, [pc, #112]	; (8009e20 <BLE_SetPachaBleID+0x78>)
 8009db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009db6:	c303      	stmia	r3!, {r0, r1}
 8009db8:	701a      	strb	r2, [r3, #0]
	char l_pchDefaultName[DEVICE_NAME_SIZE_MAX] = {};
 8009dba:	2300      	movs	r3, #0
 8009dbc:	607b      	str	r3, [r7, #4]
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	605a      	str	r2, [r3, #4]
 8009dc8:	609a      	str	r2, [r3, #8]
 8009dca:	60da      	str	r2, [r3, #12]
 8009dcc:	611a      	str	r2, [r3, #16]
 8009dce:	615a      	str	r2, [r3, #20]
 8009dd0:	f8c3 2017 	str.w	r2, [r3, #23]
	//uint8_t l_u8Size = 0u;
	BLE_GetMacAddressForLocalName(l_achBleMacAddress);
 8009dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f82b 	bl	8009e34 <BLE_GetMacAddressForLocalName>
	g_u8SizeLocalName = snprintf( (char*)l_pchDefaultName, DEVICE_NAME_SIZE_MAX, "%s_%s",
 8009dde:	1d38      	adds	r0, r7, #4
 8009de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	4b0f      	ldr	r3, [pc, #60]	; (8009e24 <BLE_SetPachaBleID+0x7c>)
 8009de8:	4a0f      	ldr	r2, [pc, #60]	; (8009e28 <BLE_SetPachaBleID+0x80>)
 8009dea:	211f      	movs	r1, #31
 8009dec:	f000 fc02 	bl	800a5f4 <sniprintf>
 8009df0:	4603      	mov	r3, r0
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	4b0d      	ldr	r3, [pc, #52]	; (8009e2c <BLE_SetPachaBleID+0x84>)
 8009df6:	701a      	strb	r2, [r3, #0]
			DEFAULT_BLE_DEVICE_NAME_PREFIX, l_achBleMacAddress);
	g_u8SizeLocalName = (g_u8SizeLocalName > DEVICE_NAME_SIZE_MAX)? DEVICE_NAME_SIZE_MAX : g_u8SizeLocalName;
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <BLE_SetPachaBleID+0x84>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b1f      	cmp	r3, #31
 8009dfe:	bf28      	it	cs
 8009e00:	231f      	movcs	r3, #31
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <BLE_SetPachaBleID+0x84>)
 8009e06:	701a      	strb	r2, [r3, #0]
	memcpy(g_sLocalName, l_pchDefaultName, g_u8SizeLocalName);
 8009e08:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <BLE_SetPachaBleID+0x84>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	1d3b      	adds	r3, r7, #4
 8009e10:	4619      	mov	r1, r3
 8009e12:	4807      	ldr	r0, [pc, #28]	; (8009e30 <BLE_SetPachaBleID+0x88>)
 8009e14:	f000 fd95 	bl	800a942 <memcpy>
}
 8009e18:	bf00      	nop
 8009e1a:	3730      	adds	r7, #48	; 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	0800bfc0 	.word	0x0800bfc0
 8009e24:	0800bfb0 	.word	0x0800bfb0
 8009e28:	0800bfb8 	.word	0x0800bfb8
 8009e2c:	200014bf 	.word	0x200014bf
 8009e30:	200014a0 	.word	0x200014a0

08009e34 <BLE_GetMacAddressForLocalName>:
         l_sDeviceAddr[0]);
   }
}

void BLE_GetMacAddressForLocalName(char * p_pchOutBuffer)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	6078      	str	r0, [r7, #4]
	uint8_t l_sDeviceAddr [4] = {};
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60bb      	str	r3, [r7, #8]
	uint8_t l_u8Size = 0u;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
	tBleStatus ret;
   if(p_pchOutBuffer != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01c      	beq.n	8009e84 <BLE_GetMacAddressForLocalName+0x50>
   {
	  ret = hci_read_bd_addr(l_sDeviceAddr);
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fd fc0d 	bl	800766e <hci_read_bd_addr>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73bb      	strb	r3, [r7, #14]
	  if (ret != BLE_STATUS_SUCCESS)
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <BLE_GetMacAddressForLocalName+0x30>
	  {
	    printf("Problem BLE");
 8009e5e:	480b      	ldr	r0, [pc, #44]	; (8009e8c <BLE_GetMacAddressForLocalName+0x58>)
 8009e60:	f000 fb5a 	bl	800a518 <iprintf>
	  }
	  l_u8Size=sprintf(p_pchOutBuffer, "%02X%02X%02X%02X",
      	 l_sDeviceAddr[3],
 8009e64:	7afb      	ldrb	r3, [r7, #11]
	  l_u8Size=sprintf(p_pchOutBuffer, "%02X%02X%02X%02X",
 8009e66:	4619      	mov	r1, r3
         l_sDeviceAddr[2],
 8009e68:	7abb      	ldrb	r3, [r7, #10]
	  l_u8Size=sprintf(p_pchOutBuffer, "%02X%02X%02X%02X",
 8009e6a:	4618      	mov	r0, r3
         l_sDeviceAddr[1],
 8009e6c:	7a7b      	ldrb	r3, [r7, #9]
         l_sDeviceAddr[0]);
 8009e6e:	7a3a      	ldrb	r2, [r7, #8]
	  l_u8Size=sprintf(p_pchOutBuffer, "%02X%02X%02X%02X",
 8009e70:	9201      	str	r2, [sp, #4]
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	4603      	mov	r3, r0
 8009e76:	460a      	mov	r2, r1
 8009e78:	4905      	ldr	r1, [pc, #20]	; (8009e90 <BLE_GetMacAddressForLocalName+0x5c>)
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fbee 	bl	800a65c <siprintf>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
   }
}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	0800bfcc 	.word	0x0800bfcc
 8009e90:	0800bff8 	.word	0x0800bff8

08009e94 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e98:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <UTIL_LPM_Init+0x1c>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <UTIL_LPM_Init+0x20>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	200014c4 	.word	0x200014c4
 8009eb4:	200014c8 	.word	0x200014c8

08009eb8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ec8:	613b      	str	r3, [r7, #16]
  return(result);
 8009eca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ece:	b672      	cpsid	i
}
 8009ed0:	bf00      	nop
  
  switch(state)
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d008      	beq.n	8009eea <UTIL_LPM_SetOffMode+0x32>
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d10e      	bne.n	8009efa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009edc:	4b0d      	ldr	r3, [pc, #52]	; (8009f14 <UTIL_LPM_SetOffMode+0x5c>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	4a0b      	ldr	r2, [pc, #44]	; (8009f14 <UTIL_LPM_SetOffMode+0x5c>)
 8009ee6:	6013      	str	r3, [r2, #0]
      break;
 8009ee8:	e008      	b.n	8009efc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	43da      	mvns	r2, r3
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <UTIL_LPM_SetOffMode+0x5c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	4a07      	ldr	r2, [pc, #28]	; (8009f14 <UTIL_LPM_SetOffMode+0x5c>)
 8009ef6:	6013      	str	r3, [r2, #0]
      break;
 8009ef8:	e000      	b.n	8009efc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009efa:	bf00      	nop
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f383 8810 	msr	PRIMASK, r3
}
 8009f06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	200014c8 	.word	0x200014c8

08009f18 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b090      	sub	sp, #64	; 0x40
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009f20:	4b73      	ldr	r3, [pc, #460]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009f26:	4b72      	ldr	r3, [pc, #456]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	4a70      	ldr	r2, [pc, #448]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 8009f30:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009f32:	4b70      	ldr	r3, [pc, #448]	; (800a0f4 <UTIL_SEQ_Run+0x1dc>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009f38:	4b6f      	ldr	r3, [pc, #444]	; (800a0f8 <UTIL_SEQ_Run+0x1e0>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009f3e:	4b6f      	ldr	r3, [pc, #444]	; (800a0fc <UTIL_SEQ_Run+0x1e4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009f44:	4b6e      	ldr	r3, [pc, #440]	; (800a100 <UTIL_SEQ_Run+0x1e8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009f4a:	e08d      	b.n	800a068 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009f50:	e002      	b.n	8009f58 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f54:	3301      	adds	r3, #1
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009f58:	4a6a      	ldr	r2, [pc, #424]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	401a      	ands	r2, r3
 8009f64:	4b62      	ldr	r3, [pc, #392]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0f1      	beq.n	8009f52 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009f6e:	4a65      	ldr	r2, [pc, #404]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f72:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	401a      	ands	r2, r3
 8009f7a:	4b5d      	ldr	r3, [pc, #372]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009f82:	4a60      	ldr	r2, [pc, #384]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	4413      	add	r3, r2
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	4013      	ands	r3, r2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009f94:	4a5b      	ldr	r2, [pc, #364]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009fa2:	4a58      	ldr	r2, [pc, #352]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	4413      	add	r3, r2
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	4013      	ands	r3, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 f9b3 	bl	800a31c <SEQ_BitPosition>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b53      	ldr	r3, [pc, #332]	; (800a108 <UTIL_SEQ_Run+0x1f0>)
 8009fbc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009fbe:	4a51      	ldr	r2, [pc, #324]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	4b4f      	ldr	r3, [pc, #316]	; (800a108 <UTIL_SEQ_Run+0x1f0>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2101      	movs	r1, #1
 8009fce:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd2:	43db      	mvns	r3, r3
 8009fd4:	401a      	ands	r2, r3
 8009fd6:	494b      	ldr	r1, [pc, #300]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	440b      	add	r3, r1
 8009fde:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fe4:	61bb      	str	r3, [r7, #24]
  return(result);
 8009fe6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009fe8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fea:	b672      	cpsid	i
}
 8009fec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009fee:	4b46      	ldr	r3, [pc, #280]	; (800a108 <UTIL_SEQ_Run+0x1f0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff8:	43da      	mvns	r2, r3
 8009ffa:	4b3e      	ldr	r3, [pc, #248]	; (800a0f4 <UTIL_SEQ_Run+0x1dc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4013      	ands	r3, r2
 800a000:	4a3c      	ldr	r2, [pc, #240]	; (800a0f4 <UTIL_SEQ_Run+0x1dc>)
 800a002:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a004:	2302      	movs	r3, #2
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a008:	e013      	b.n	800a032 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00c:	3b01      	subs	r3, #1
 800a00e:	4a3d      	ldr	r2, [pc, #244]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 800a010:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a014:	4b3c      	ldr	r3, [pc, #240]	; (800a108 <UTIL_SEQ_Run+0x1f0>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2201      	movs	r2, #1
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43da      	mvns	r2, r3
 800a020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a022:	3b01      	subs	r3, #1
 800a024:	400a      	ands	r2, r1
 800a026:	4937      	ldr	r1, [pc, #220]	; (800a104 <UTIL_SEQ_Run+0x1ec>)
 800a028:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02e:	3b01      	subs	r3, #1
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e8      	bne.n	800a00a <UTIL_SEQ_Run+0xf2>
 800a038:	6a3b      	ldr	r3, [r7, #32]
 800a03a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f383 8810 	msr	PRIMASK, r3
}
 800a042:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a044:	4b30      	ldr	r3, [pc, #192]	; (800a108 <UTIL_SEQ_Run+0x1f0>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a30      	ldr	r2, [pc, #192]	; (800a10c <UTIL_SEQ_Run+0x1f4>)
 800a04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a04e:	4798      	blx	r3

    local_taskset = TaskSet;
 800a050:	4b28      	ldr	r3, [pc, #160]	; (800a0f4 <UTIL_SEQ_Run+0x1dc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a056:	4b28      	ldr	r3, [pc, #160]	; (800a0f8 <UTIL_SEQ_Run+0x1e0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a05c:	4b27      	ldr	r3, [pc, #156]	; (800a0fc <UTIL_SEQ_Run+0x1e4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a062:	4b27      	ldr	r3, [pc, #156]	; (800a100 <UTIL_SEQ_Run+0x1e8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	401a      	ands	r2, r3
 800a06e:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d005      	beq.n	800a084 <UTIL_SEQ_Run+0x16c>
 800a078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f43f af64 	beq.w	8009f4c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a084:	4b20      	ldr	r3, [pc, #128]	; (800a108 <UTIL_SEQ_Run+0x1f0>)
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a08c:	f000 f938 	bl	800a300 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a090:	f3ef 8310 	mrs	r3, PRIMASK
 800a094:	613b      	str	r3, [r7, #16]
  return(result);
 800a096:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a09a:	b672      	cpsid	i
}
 800a09c:	bf00      	nop
  local_taskset = TaskSet;
 800a09e:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <UTIL_SEQ_Run+0x1dc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a0a4:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <UTIL_SEQ_Run+0x1e0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a0aa:	4b14      	ldr	r3, [pc, #80]	; (800a0fc <UTIL_SEQ_Run+0x1e4>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a0b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	401a      	ands	r2, r3
 800a0b6:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d107      	bne.n	800a0d0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a0c0:	4b0f      	ldr	r3, [pc, #60]	; (800a100 <UTIL_SEQ_Run+0x1e8>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a0cc:	f7f6 fede 	bl	8000e8c <UTIL_SEQ_Idle>
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f383 8810 	msr	PRIMASK, r3
}
 800a0da:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a0dc:	f000 f917 	bl	800a30e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a0e0:	4a03      	ldr	r2, [pc, #12]	; (800a0f0 <UTIL_SEQ_Run+0x1d8>)
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	6013      	str	r3, [r2, #0]

  return;
 800a0e6:	bf00      	nop
}
 800a0e8:	3740      	adds	r7, #64	; 0x40
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000018 	.word	0x20000018
 800a0f4:	200014cc 	.word	0x200014cc
 800a0f8:	200014d0 	.word	0x200014d0
 800a0fc:	20000014 	.word	0x20000014
 800a100:	200014d4 	.word	0x200014d4
 800a104:	2000155c 	.word	0x2000155c
 800a108:	200014d8 	.word	0x200014d8
 800a10c:	200014dc 	.word	0x200014dc

0800a110 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a11c:	f3ef 8310 	mrs	r3, PRIMASK
 800a120:	617b      	str	r3, [r7, #20]
  return(result);
 800a122:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a126:	b672      	cpsid	i
}
 800a128:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 f8f6 	bl	800a31c <SEQ_BitPosition>
 800a130:	4603      	mov	r3, r0
 800a132:	4619      	mov	r1, r3
 800a134:	4a06      	ldr	r2, [pc, #24]	; (800a150 <UTIL_SEQ_RegTask+0x40>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f383 8810 	msr	PRIMASK, r3
}
 800a146:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a148:	bf00      	nop
}
 800a14a:	3720      	adds	r7, #32
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	200014dc 	.word	0x200014dc

0800a154 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a15e:	f3ef 8310 	mrs	r3, PRIMASK
 800a162:	60fb      	str	r3, [r7, #12]
  return(result);
 800a164:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a168:	b672      	cpsid	i
}
 800a16a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <UTIL_SEQ_SetTask+0x50>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4313      	orrs	r3, r2
 800a174:	4a0b      	ldr	r2, [pc, #44]	; (800a1a4 <UTIL_SEQ_SetTask+0x50>)
 800a176:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a178:	4a0b      	ldr	r2, [pc, #44]	; (800a1a8 <UTIL_SEQ_SetTask+0x54>)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	431a      	orrs	r2, r3
 800a184:	4908      	ldr	r1, [pc, #32]	; (800a1a8 <UTIL_SEQ_SetTask+0x54>)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f383 8810 	msr	PRIMASK, r3
}
 800a196:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a198:	bf00      	nop
}
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	200014cc 	.word	0x200014cc
 800a1a8:	2000155c 	.word	0x2000155c

0800a1ac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1be:	b672      	cpsid	i
}
 800a1c0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	43da      	mvns	r2, r3
 800a1c6:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <UTIL_SEQ_PauseTask+0x3c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	4a06      	ldr	r2, [pc, #24]	; (800a1e8 <UTIL_SEQ_PauseTask+0x3c>)
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f383 8810 	msr	PRIMASK, r3
}
 800a1da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a1dc:	bf00      	nop
}
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	20000014 	.word	0x20000014

0800a1ec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1fe:	b672      	cpsid	i
}
 800a200:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a202:	4b09      	ldr	r3, [pc, #36]	; (800a228 <UTIL_SEQ_ResumeTask+0x3c>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4313      	orrs	r3, r2
 800a20a:	4a07      	ldr	r2, [pc, #28]	; (800a228 <UTIL_SEQ_ResumeTask+0x3c>)
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f383 8810 	msr	PRIMASK, r3
}
 800a218:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a21a:	bf00      	nop
}
 800a21c:	371c      	adds	r7, #28
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	20000014 	.word	0x20000014

0800a22c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a234:	f3ef 8310 	mrs	r3, PRIMASK
 800a238:	60fb      	str	r3, [r7, #12]
  return(result);
 800a23a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a23c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a23e:	b672      	cpsid	i
}
 800a240:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <UTIL_SEQ_SetEvt+0x3c>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4313      	orrs	r3, r2
 800a24a:	4a07      	ldr	r2, [pc, #28]	; (800a268 <UTIL_SEQ_SetEvt+0x3c>)
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f383 8810 	msr	PRIMASK, r3
}
 800a258:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a25a:	bf00      	nop
}
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	200014d0 	.word	0x200014d0

0800a26c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a274:	4b1f      	ldr	r3, [pc, #124]	; (800a2f4 <UTIL_SEQ_WaitEvt+0x88>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a27a:	4b1e      	ldr	r3, [pc, #120]	; (800a2f4 <UTIL_SEQ_WaitEvt+0x88>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d102      	bne.n	800a28a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a284:	2300      	movs	r3, #0
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	e005      	b.n	800a296 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <UTIL_SEQ_WaitEvt+0x88>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2201      	movs	r2, #1
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a296:	4b18      	ldr	r3, [pc, #96]	; (800a2f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a29c:	4a16      	ldr	r2, [pc, #88]	; (800a2f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a2a2:	e003      	b.n	800a2ac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	69f8      	ldr	r0, [r7, #28]
 800a2a8:	f7f6 fdf7 	bl	8000e9a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a2ac:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <UTIL_SEQ_WaitEvt+0x90>)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0f5      	beq.n	800a2a4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a2b8:	4a0e      	ldr	r2, [pc, #56]	; (800a2f4 <UTIL_SEQ_WaitEvt+0x88>)
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2be:	f3ef 8310 	mrs	r3, PRIMASK
 800a2c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2c4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a2c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2c8:	b672      	cpsid	i
}
 800a2ca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	43da      	mvns	r2, r3
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <UTIL_SEQ_WaitEvt+0x90>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	4a09      	ldr	r2, [pc, #36]	; (800a2fc <UTIL_SEQ_WaitEvt+0x90>)
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f383 8810 	msr	PRIMASK, r3
}
 800a2e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a2e6:	4a04      	ldr	r2, [pc, #16]	; (800a2f8 <UTIL_SEQ_WaitEvt+0x8c>)
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	6013      	str	r3, [r2, #0]
  return;
 800a2ec:	bf00      	nop
}
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	200014d8 	.word	0x200014d8
 800a2f8:	200014d4 	.word	0x200014d4
 800a2fc:	200014d0 	.word	0x200014d0

0800a300 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a304:	bf00      	nop
}
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a30e:	b480      	push	{r7}
 800a310:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a312:	bf00      	nop
}
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	0c1b      	lsrs	r3, r3, #16
 800a330:	041b      	lsls	r3, r3, #16
 800a332:	2b00      	cmp	r3, #0
 800a334:	d104      	bne.n	800a340 <SEQ_BitPosition+0x24>
 800a336:	2310      	movs	r3, #16
 800a338:	73fb      	strb	r3, [r7, #15]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d105      	bne.n	800a356 <SEQ_BitPosition+0x3a>
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	3308      	adds	r3, #8
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <SEQ_BitPosition+0x50>
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	3304      	adds	r3, #4
 800a364:	73fb      	strb	r3, [r7, #15]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	0f1b      	lsrs	r3, r3, #28
 800a370:	4a07      	ldr	r2, [pc, #28]	; (800a390 <SEQ_BitPosition+0x74>)
 800a372:	5cd2      	ldrb	r2, [r2, r3]
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	4413      	add	r3, r2
 800a378:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	f1c3 031f 	rsb	r3, r3, #31
 800a380:	b2db      	uxtb	r3, r3
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	0800c22c 	.word	0x0800c22c

0800a394 <std>:
 800a394:	2300      	movs	r3, #0
 800a396:	b510      	push	{r4, lr}
 800a398:	4604      	mov	r4, r0
 800a39a:	e9c0 3300 	strd	r3, r3, [r0]
 800a39e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3a2:	6083      	str	r3, [r0, #8]
 800a3a4:	8181      	strh	r1, [r0, #12]
 800a3a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3a8:	81c2      	strh	r2, [r0, #14]
 800a3aa:	6183      	str	r3, [r0, #24]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	2208      	movs	r2, #8
 800a3b0:	305c      	adds	r0, #92	; 0x5c
 800a3b2:	f000 fa4b 	bl	800a84c <memset>
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <std+0x58>)
 800a3b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ba:	4b0d      	ldr	r3, [pc, #52]	; (800a3f0 <std+0x5c>)
 800a3bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3be:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <std+0x60>)
 800a3c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3c2:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <std+0x64>)
 800a3c4:	6323      	str	r3, [r4, #48]	; 0x30
 800a3c6:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <std+0x68>)
 800a3c8:	6224      	str	r4, [r4, #32]
 800a3ca:	429c      	cmp	r4, r3
 800a3cc:	d006      	beq.n	800a3dc <std+0x48>
 800a3ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3d2:	4294      	cmp	r4, r2
 800a3d4:	d002      	beq.n	800a3dc <std+0x48>
 800a3d6:	33d0      	adds	r3, #208	; 0xd0
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	d105      	bne.n	800a3e8 <std+0x54>
 800a3dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e4:	f000 baaa 	b.w	800a93c <__retarget_lock_init_recursive>
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800a69d 	.word	0x0800a69d
 800a3f0:	0800a6bf 	.word	0x0800a6bf
 800a3f4:	0800a6f7 	.word	0x0800a6f7
 800a3f8:	0800a71b 	.word	0x0800a71b
 800a3fc:	2000156c 	.word	0x2000156c

0800a400 <stdio_exit_handler>:
 800a400:	4a02      	ldr	r2, [pc, #8]	; (800a40c <stdio_exit_handler+0xc>)
 800a402:	4903      	ldr	r1, [pc, #12]	; (800a410 <stdio_exit_handler+0x10>)
 800a404:	4803      	ldr	r0, [pc, #12]	; (800a414 <stdio_exit_handler+0x14>)
 800a406:	f000 b869 	b.w	800a4dc <_fwalk_sglue>
 800a40a:	bf00      	nop
 800a40c:	2000001c 	.word	0x2000001c
 800a410:	0800b4b5 	.word	0x0800b4b5
 800a414:	20000028 	.word	0x20000028

0800a418 <cleanup_stdio>:
 800a418:	6841      	ldr	r1, [r0, #4]
 800a41a:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <cleanup_stdio+0x34>)
 800a41c:	4299      	cmp	r1, r3
 800a41e:	b510      	push	{r4, lr}
 800a420:	4604      	mov	r4, r0
 800a422:	d001      	beq.n	800a428 <cleanup_stdio+0x10>
 800a424:	f001 f846 	bl	800b4b4 <_fflush_r>
 800a428:	68a1      	ldr	r1, [r4, #8]
 800a42a:	4b09      	ldr	r3, [pc, #36]	; (800a450 <cleanup_stdio+0x38>)
 800a42c:	4299      	cmp	r1, r3
 800a42e:	d002      	beq.n	800a436 <cleanup_stdio+0x1e>
 800a430:	4620      	mov	r0, r4
 800a432:	f001 f83f 	bl	800b4b4 <_fflush_r>
 800a436:	68e1      	ldr	r1, [r4, #12]
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <cleanup_stdio+0x3c>)
 800a43a:	4299      	cmp	r1, r3
 800a43c:	d004      	beq.n	800a448 <cleanup_stdio+0x30>
 800a43e:	4620      	mov	r0, r4
 800a440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a444:	f001 b836 	b.w	800b4b4 <_fflush_r>
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	bf00      	nop
 800a44c:	2000156c 	.word	0x2000156c
 800a450:	200015d4 	.word	0x200015d4
 800a454:	2000163c 	.word	0x2000163c

0800a458 <global_stdio_init.part.0>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	4b0b      	ldr	r3, [pc, #44]	; (800a488 <global_stdio_init.part.0+0x30>)
 800a45c:	4c0b      	ldr	r4, [pc, #44]	; (800a48c <global_stdio_init.part.0+0x34>)
 800a45e:	4a0c      	ldr	r2, [pc, #48]	; (800a490 <global_stdio_init.part.0+0x38>)
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	4620      	mov	r0, r4
 800a464:	2200      	movs	r2, #0
 800a466:	2104      	movs	r1, #4
 800a468:	f7ff ff94 	bl	800a394 <std>
 800a46c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a470:	2201      	movs	r2, #1
 800a472:	2109      	movs	r1, #9
 800a474:	f7ff ff8e 	bl	800a394 <std>
 800a478:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a47c:	2202      	movs	r2, #2
 800a47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a482:	2112      	movs	r1, #18
 800a484:	f7ff bf86 	b.w	800a394 <std>
 800a488:	200016a4 	.word	0x200016a4
 800a48c:	2000156c 	.word	0x2000156c
 800a490:	0800a401 	.word	0x0800a401

0800a494 <__sfp_lock_acquire>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__sfp_lock_acquire+0x8>)
 800a496:	f000 ba52 	b.w	800a93e <__retarget_lock_acquire_recursive>
 800a49a:	bf00      	nop
 800a49c:	200016ad 	.word	0x200016ad

0800a4a0 <__sfp_lock_release>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	; (800a4a8 <__sfp_lock_release+0x8>)
 800a4a2:	f000 ba4d 	b.w	800a940 <__retarget_lock_release_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	200016ad 	.word	0x200016ad

0800a4ac <__sinit>:
 800a4ac:	b510      	push	{r4, lr}
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	f7ff fff0 	bl	800a494 <__sfp_lock_acquire>
 800a4b4:	6a23      	ldr	r3, [r4, #32]
 800a4b6:	b11b      	cbz	r3, 800a4c0 <__sinit+0x14>
 800a4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4bc:	f7ff bff0 	b.w	800a4a0 <__sfp_lock_release>
 800a4c0:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <__sinit+0x28>)
 800a4c2:	6223      	str	r3, [r4, #32]
 800a4c4:	4b04      	ldr	r3, [pc, #16]	; (800a4d8 <__sinit+0x2c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1f5      	bne.n	800a4b8 <__sinit+0xc>
 800a4cc:	f7ff ffc4 	bl	800a458 <global_stdio_init.part.0>
 800a4d0:	e7f2      	b.n	800a4b8 <__sinit+0xc>
 800a4d2:	bf00      	nop
 800a4d4:	0800a419 	.word	0x0800a419
 800a4d8:	200016a4 	.word	0x200016a4

0800a4dc <_fwalk_sglue>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	4688      	mov	r8, r1
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	2600      	movs	r6, #0
 800a4e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a4f0:	d505      	bpl.n	800a4fe <_fwalk_sglue+0x22>
 800a4f2:	6824      	ldr	r4, [r4, #0]
 800a4f4:	2c00      	cmp	r4, #0
 800a4f6:	d1f7      	bne.n	800a4e8 <_fwalk_sglue+0xc>
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fe:	89ab      	ldrh	r3, [r5, #12]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d907      	bls.n	800a514 <_fwalk_sglue+0x38>
 800a504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a508:	3301      	adds	r3, #1
 800a50a:	d003      	beq.n	800a514 <_fwalk_sglue+0x38>
 800a50c:	4629      	mov	r1, r5
 800a50e:	4638      	mov	r0, r7
 800a510:	47c0      	blx	r8
 800a512:	4306      	orrs	r6, r0
 800a514:	3568      	adds	r5, #104	; 0x68
 800a516:	e7e9      	b.n	800a4ec <_fwalk_sglue+0x10>

0800a518 <iprintf>:
 800a518:	b40f      	push	{r0, r1, r2, r3}
 800a51a:	b507      	push	{r0, r1, r2, lr}
 800a51c:	4906      	ldr	r1, [pc, #24]	; (800a538 <iprintf+0x20>)
 800a51e:	ab04      	add	r3, sp, #16
 800a520:	6808      	ldr	r0, [r1, #0]
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	6881      	ldr	r1, [r0, #8]
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	f000 fc93 	bl	800ae54 <_vfiprintf_r>
 800a52e:	b003      	add	sp, #12
 800a530:	f85d eb04 	ldr.w	lr, [sp], #4
 800a534:	b004      	add	sp, #16
 800a536:	4770      	bx	lr
 800a538:	20000074 	.word	0x20000074

0800a53c <_puts_r>:
 800a53c:	6a03      	ldr	r3, [r0, #32]
 800a53e:	b570      	push	{r4, r5, r6, lr}
 800a540:	6884      	ldr	r4, [r0, #8]
 800a542:	4605      	mov	r5, r0
 800a544:	460e      	mov	r6, r1
 800a546:	b90b      	cbnz	r3, 800a54c <_puts_r+0x10>
 800a548:	f7ff ffb0 	bl	800a4ac <__sinit>
 800a54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a54e:	07db      	lsls	r3, r3, #31
 800a550:	d405      	bmi.n	800a55e <_puts_r+0x22>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	0598      	lsls	r0, r3, #22
 800a556:	d402      	bmi.n	800a55e <_puts_r+0x22>
 800a558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55a:	f000 f9f0 	bl	800a93e <__retarget_lock_acquire_recursive>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	0719      	lsls	r1, r3, #28
 800a562:	d513      	bpl.n	800a58c <_puts_r+0x50>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	b18b      	cbz	r3, 800a58c <_puts_r+0x50>
 800a568:	3e01      	subs	r6, #1
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a570:	3b01      	subs	r3, #1
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	b9e9      	cbnz	r1, 800a5b2 <_puts_r+0x76>
 800a576:	2b00      	cmp	r3, #0
 800a578:	da2e      	bge.n	800a5d8 <_puts_r+0x9c>
 800a57a:	4622      	mov	r2, r4
 800a57c:	210a      	movs	r1, #10
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f8cf 	bl	800a722 <__swbuf_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d007      	beq.n	800a598 <_puts_r+0x5c>
 800a588:	250a      	movs	r5, #10
 800a58a:	e007      	b.n	800a59c <_puts_r+0x60>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f000 f904 	bl	800a79c <__swsetup_r>
 800a594:	2800      	cmp	r0, #0
 800a596:	d0e7      	beq.n	800a568 <_puts_r+0x2c>
 800a598:	f04f 35ff 	mov.w	r5, #4294967295
 800a59c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a59e:	07da      	lsls	r2, r3, #31
 800a5a0:	d405      	bmi.n	800a5ae <_puts_r+0x72>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	059b      	lsls	r3, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_puts_r+0x72>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5aa:	f000 f9c9 	bl	800a940 <__retarget_lock_release_recursive>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	bd70      	pop	{r4, r5, r6, pc}
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	da04      	bge.n	800a5c0 <_puts_r+0x84>
 800a5b6:	69a2      	ldr	r2, [r4, #24]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	dc06      	bgt.n	800a5ca <_puts_r+0x8e>
 800a5bc:	290a      	cmp	r1, #10
 800a5be:	d004      	beq.n	800a5ca <_puts_r+0x8e>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	7019      	strb	r1, [r3, #0]
 800a5c8:	e7cf      	b.n	800a56a <_puts_r+0x2e>
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f000 f8a8 	bl	800a722 <__swbuf_r>
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	d1c9      	bne.n	800a56a <_puts_r+0x2e>
 800a5d6:	e7df      	b.n	800a598 <_puts_r+0x5c>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	250a      	movs	r5, #10
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	701d      	strb	r5, [r3, #0]
 800a5e2:	e7db      	b.n	800a59c <_puts_r+0x60>

0800a5e4 <puts>:
 800a5e4:	4b02      	ldr	r3, [pc, #8]	; (800a5f0 <puts+0xc>)
 800a5e6:	4601      	mov	r1, r0
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	f7ff bfa7 	b.w	800a53c <_puts_r>
 800a5ee:	bf00      	nop
 800a5f0:	20000074 	.word	0x20000074

0800a5f4 <sniprintf>:
 800a5f4:	b40c      	push	{r2, r3}
 800a5f6:	b530      	push	{r4, r5, lr}
 800a5f8:	4b17      	ldr	r3, [pc, #92]	; (800a658 <sniprintf+0x64>)
 800a5fa:	1e0c      	subs	r4, r1, #0
 800a5fc:	681d      	ldr	r5, [r3, #0]
 800a5fe:	b09d      	sub	sp, #116	; 0x74
 800a600:	da08      	bge.n	800a614 <sniprintf+0x20>
 800a602:	238b      	movs	r3, #139	; 0x8b
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	f04f 30ff 	mov.w	r0, #4294967295
 800a60a:	b01d      	add	sp, #116	; 0x74
 800a60c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a610:	b002      	add	sp, #8
 800a612:	4770      	bx	lr
 800a614:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a618:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a61c:	bf14      	ite	ne
 800a61e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a622:	4623      	moveq	r3, r4
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	9307      	str	r3, [sp, #28]
 800a628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a62c:	9002      	str	r0, [sp, #8]
 800a62e:	9006      	str	r0, [sp, #24]
 800a630:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a634:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a636:	ab21      	add	r3, sp, #132	; 0x84
 800a638:	a902      	add	r1, sp, #8
 800a63a:	4628      	mov	r0, r5
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	f000 fae1 	bl	800ac04 <_svfiprintf_r>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	bfbc      	itt	lt
 800a646:	238b      	movlt	r3, #139	; 0x8b
 800a648:	602b      	strlt	r3, [r5, #0]
 800a64a:	2c00      	cmp	r4, #0
 800a64c:	d0dd      	beq.n	800a60a <sniprintf+0x16>
 800a64e:	9b02      	ldr	r3, [sp, #8]
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	e7d9      	b.n	800a60a <sniprintf+0x16>
 800a656:	bf00      	nop
 800a658:	20000074 	.word	0x20000074

0800a65c <siprintf>:
 800a65c:	b40e      	push	{r1, r2, r3}
 800a65e:	b500      	push	{lr}
 800a660:	b09c      	sub	sp, #112	; 0x70
 800a662:	ab1d      	add	r3, sp, #116	; 0x74
 800a664:	9002      	str	r0, [sp, #8]
 800a666:	9006      	str	r0, [sp, #24]
 800a668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a66c:	4809      	ldr	r0, [pc, #36]	; (800a694 <siprintf+0x38>)
 800a66e:	9107      	str	r1, [sp, #28]
 800a670:	9104      	str	r1, [sp, #16]
 800a672:	4909      	ldr	r1, [pc, #36]	; (800a698 <siprintf+0x3c>)
 800a674:	f853 2b04 	ldr.w	r2, [r3], #4
 800a678:	9105      	str	r1, [sp, #20]
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	a902      	add	r1, sp, #8
 800a680:	f000 fac0 	bl	800ac04 <_svfiprintf_r>
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	2200      	movs	r2, #0
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	b01c      	add	sp, #112	; 0x70
 800a68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a690:	b003      	add	sp, #12
 800a692:	4770      	bx	lr
 800a694:	20000074 	.word	0x20000074
 800a698:	ffff0208 	.word	0xffff0208

0800a69c <__sread>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	460c      	mov	r4, r1
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	f000 f8fc 	bl	800a8a0 <_read_r>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	bfab      	itete	ge
 800a6ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a6b0:	181b      	addge	r3, r3, r0
 800a6b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6b6:	bfac      	ite	ge
 800a6b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6ba:	81a3      	strhlt	r3, [r4, #12]
 800a6bc:	bd10      	pop	{r4, pc}

0800a6be <__swrite>:
 800a6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	898b      	ldrh	r3, [r1, #12]
 800a6c6:	05db      	lsls	r3, r3, #23
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4616      	mov	r6, r2
 800a6ce:	d505      	bpl.n	800a6dc <__swrite+0x1e>
 800a6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f000 f8d0 	bl	800a87c <_lseek_r>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f2:	f000 b8e7 	b.w	800a8c4 <_write_r>

0800a6f6 <__sseek>:
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fe:	f000 f8bd 	bl	800a87c <_lseek_r>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	bf15      	itete	ne
 800a708:	6560      	strne	r0, [r4, #84]	; 0x54
 800a70a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a70e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a712:	81a3      	strheq	r3, [r4, #12]
 800a714:	bf18      	it	ne
 800a716:	81a3      	strhne	r3, [r4, #12]
 800a718:	bd10      	pop	{r4, pc}

0800a71a <__sclose>:
 800a71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71e:	f000 b89d 	b.w	800a85c <_close_r>

0800a722 <__swbuf_r>:
 800a722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a724:	460e      	mov	r6, r1
 800a726:	4614      	mov	r4, r2
 800a728:	4605      	mov	r5, r0
 800a72a:	b118      	cbz	r0, 800a734 <__swbuf_r+0x12>
 800a72c:	6a03      	ldr	r3, [r0, #32]
 800a72e:	b90b      	cbnz	r3, 800a734 <__swbuf_r+0x12>
 800a730:	f7ff febc 	bl	800a4ac <__sinit>
 800a734:	69a3      	ldr	r3, [r4, #24]
 800a736:	60a3      	str	r3, [r4, #8]
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	071a      	lsls	r2, r3, #28
 800a73c:	d525      	bpl.n	800a78a <__swbuf_r+0x68>
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	b31b      	cbz	r3, 800a78a <__swbuf_r+0x68>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	6922      	ldr	r2, [r4, #16]
 800a746:	1a98      	subs	r0, r3, r2
 800a748:	6963      	ldr	r3, [r4, #20]
 800a74a:	b2f6      	uxtb	r6, r6
 800a74c:	4283      	cmp	r3, r0
 800a74e:	4637      	mov	r7, r6
 800a750:	dc04      	bgt.n	800a75c <__swbuf_r+0x3a>
 800a752:	4621      	mov	r1, r4
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fead 	bl	800b4b4 <_fflush_r>
 800a75a:	b9e0      	cbnz	r0, 800a796 <__swbuf_r+0x74>
 800a75c:	68a3      	ldr	r3, [r4, #8]
 800a75e:	3b01      	subs	r3, #1
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	6022      	str	r2, [r4, #0]
 800a768:	701e      	strb	r6, [r3, #0]
 800a76a:	6962      	ldr	r2, [r4, #20]
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	429a      	cmp	r2, r3
 800a770:	d004      	beq.n	800a77c <__swbuf_r+0x5a>
 800a772:	89a3      	ldrh	r3, [r4, #12]
 800a774:	07db      	lsls	r3, r3, #31
 800a776:	d506      	bpl.n	800a786 <__swbuf_r+0x64>
 800a778:	2e0a      	cmp	r6, #10
 800a77a:	d104      	bne.n	800a786 <__swbuf_r+0x64>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	f000 fe98 	bl	800b4b4 <_fflush_r>
 800a784:	b938      	cbnz	r0, 800a796 <__swbuf_r+0x74>
 800a786:	4638      	mov	r0, r7
 800a788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78a:	4621      	mov	r1, r4
 800a78c:	4628      	mov	r0, r5
 800a78e:	f000 f805 	bl	800a79c <__swsetup_r>
 800a792:	2800      	cmp	r0, #0
 800a794:	d0d5      	beq.n	800a742 <__swbuf_r+0x20>
 800a796:	f04f 37ff 	mov.w	r7, #4294967295
 800a79a:	e7f4      	b.n	800a786 <__swbuf_r+0x64>

0800a79c <__swsetup_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <__swsetup_r+0xac>)
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	6818      	ldr	r0, [r3, #0]
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	b118      	cbz	r0, 800a7b0 <__swsetup_r+0x14>
 800a7a8:	6a03      	ldr	r3, [r0, #32]
 800a7aa:	b90b      	cbnz	r3, 800a7b0 <__swsetup_r+0x14>
 800a7ac:	f7ff fe7e 	bl	800a4ac <__sinit>
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7b6:	0718      	lsls	r0, r3, #28
 800a7b8:	d422      	bmi.n	800a800 <__swsetup_r+0x64>
 800a7ba:	06d9      	lsls	r1, r3, #27
 800a7bc:	d407      	bmi.n	800a7ce <__swsetup_r+0x32>
 800a7be:	2309      	movs	r3, #9
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	e034      	b.n	800a838 <__swsetup_r+0x9c>
 800a7ce:	0758      	lsls	r0, r3, #29
 800a7d0:	d512      	bpl.n	800a7f8 <__swsetup_r+0x5c>
 800a7d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7d4:	b141      	cbz	r1, 800a7e8 <__swsetup_r+0x4c>
 800a7d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	d002      	beq.n	800a7e4 <__swsetup_r+0x48>
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 f8be 	bl	800a960 <_free_r>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	6363      	str	r3, [r4, #52]	; 0x34
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6063      	str	r3, [r4, #4]
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	f043 0308 	orr.w	r3, r3, #8
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	b94b      	cbnz	r3, 800a818 <__swsetup_r+0x7c>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a80a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a80e:	d003      	beq.n	800a818 <__swsetup_r+0x7c>
 800a810:	4621      	mov	r1, r4
 800a812:	4628      	mov	r0, r5
 800a814:	f000 fe9c 	bl	800b550 <__smakebuf_r>
 800a818:	89a0      	ldrh	r0, [r4, #12]
 800a81a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a81e:	f010 0301 	ands.w	r3, r0, #1
 800a822:	d00a      	beq.n	800a83a <__swsetup_r+0x9e>
 800a824:	2300      	movs	r3, #0
 800a826:	60a3      	str	r3, [r4, #8]
 800a828:	6963      	ldr	r3, [r4, #20]
 800a82a:	425b      	negs	r3, r3
 800a82c:	61a3      	str	r3, [r4, #24]
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	b943      	cbnz	r3, 800a844 <__swsetup_r+0xa8>
 800a832:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a836:	d1c4      	bne.n	800a7c2 <__swsetup_r+0x26>
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	0781      	lsls	r1, r0, #30
 800a83c:	bf58      	it	pl
 800a83e:	6963      	ldrpl	r3, [r4, #20]
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	e7f4      	b.n	800a82e <__swsetup_r+0x92>
 800a844:	2000      	movs	r0, #0
 800a846:	e7f7      	b.n	800a838 <__swsetup_r+0x9c>
 800a848:	20000074 	.word	0x20000074

0800a84c <memset>:
 800a84c:	4402      	add	r2, r0
 800a84e:	4603      	mov	r3, r0
 800a850:	4293      	cmp	r3, r2
 800a852:	d100      	bne.n	800a856 <memset+0xa>
 800a854:	4770      	bx	lr
 800a856:	f803 1b01 	strb.w	r1, [r3], #1
 800a85a:	e7f9      	b.n	800a850 <memset+0x4>

0800a85c <_close_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d06      	ldr	r5, [pc, #24]	; (800a878 <_close_r+0x1c>)
 800a860:	2300      	movs	r3, #0
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	602b      	str	r3, [r5, #0]
 800a868:	f7f7 fe4d 	bl	8002506 <_close>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_close_r+0x1a>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_close_r+0x1a>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	200016a8 	.word	0x200016a8

0800a87c <_lseek_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4d07      	ldr	r5, [pc, #28]	; (800a89c <_lseek_r+0x20>)
 800a880:	4604      	mov	r4, r0
 800a882:	4608      	mov	r0, r1
 800a884:	4611      	mov	r1, r2
 800a886:	2200      	movs	r2, #0
 800a888:	602a      	str	r2, [r5, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	f7f7 fe62 	bl	8002554 <_lseek>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d102      	bne.n	800a89a <_lseek_r+0x1e>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	b103      	cbz	r3, 800a89a <_lseek_r+0x1e>
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	200016a8 	.word	0x200016a8

0800a8a0 <_read_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_read_r+0x20>)
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	602a      	str	r2, [r5, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f7f7 fe0c 	bl	80024cc <_read>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_read_r+0x1e>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_read_r+0x1e>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	200016a8 	.word	0x200016a8

0800a8c4 <_write_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	; (800a8e4 <_write_r+0x20>)
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	602a      	str	r2, [r5, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f7fd fef2 	bl	80086bc <_write>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_write_r+0x1e>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_write_r+0x1e>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	200016a8 	.word	0x200016a8

0800a8e8 <__errno>:
 800a8e8:	4b01      	ldr	r3, [pc, #4]	; (800a8f0 <__errno+0x8>)
 800a8ea:	6818      	ldr	r0, [r3, #0]
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20000074 	.word	0x20000074

0800a8f4 <__libc_init_array>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	4d0d      	ldr	r5, [pc, #52]	; (800a92c <__libc_init_array+0x38>)
 800a8f8:	4c0d      	ldr	r4, [pc, #52]	; (800a930 <__libc_init_array+0x3c>)
 800a8fa:	1b64      	subs	r4, r4, r5
 800a8fc:	10a4      	asrs	r4, r4, #2
 800a8fe:	2600      	movs	r6, #0
 800a900:	42a6      	cmp	r6, r4
 800a902:	d109      	bne.n	800a918 <__libc_init_array+0x24>
 800a904:	4d0b      	ldr	r5, [pc, #44]	; (800a934 <__libc_init_array+0x40>)
 800a906:	4c0c      	ldr	r4, [pc, #48]	; (800a938 <__libc_init_array+0x44>)
 800a908:	f000 fee2 	bl	800b6d0 <_init>
 800a90c:	1b64      	subs	r4, r4, r5
 800a90e:	10a4      	asrs	r4, r4, #2
 800a910:	2600      	movs	r6, #0
 800a912:	42a6      	cmp	r6, r4
 800a914:	d105      	bne.n	800a922 <__libc_init_array+0x2e>
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	f855 3b04 	ldr.w	r3, [r5], #4
 800a91c:	4798      	blx	r3
 800a91e:	3601      	adds	r6, #1
 800a920:	e7ee      	b.n	800a900 <__libc_init_array+0xc>
 800a922:	f855 3b04 	ldr.w	r3, [r5], #4
 800a926:	4798      	blx	r3
 800a928:	3601      	adds	r6, #1
 800a92a:	e7f2      	b.n	800a912 <__libc_init_array+0x1e>
 800a92c:	0800c278 	.word	0x0800c278
 800a930:	0800c278 	.word	0x0800c278
 800a934:	0800c278 	.word	0x0800c278
 800a938:	0800c27c 	.word	0x0800c27c

0800a93c <__retarget_lock_init_recursive>:
 800a93c:	4770      	bx	lr

0800a93e <__retarget_lock_acquire_recursive>:
 800a93e:	4770      	bx	lr

0800a940 <__retarget_lock_release_recursive>:
 800a940:	4770      	bx	lr

0800a942 <memcpy>:
 800a942:	440a      	add	r2, r1
 800a944:	4291      	cmp	r1, r2
 800a946:	f100 33ff 	add.w	r3, r0, #4294967295
 800a94a:	d100      	bne.n	800a94e <memcpy+0xc>
 800a94c:	4770      	bx	lr
 800a94e:	b510      	push	{r4, lr}
 800a950:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a954:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a958:	4291      	cmp	r1, r2
 800a95a:	d1f9      	bne.n	800a950 <memcpy+0xe>
 800a95c:	bd10      	pop	{r4, pc}
	...

0800a960 <_free_r>:
 800a960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a962:	2900      	cmp	r1, #0
 800a964:	d044      	beq.n	800a9f0 <_free_r+0x90>
 800a966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96a:	9001      	str	r0, [sp, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f1a1 0404 	sub.w	r4, r1, #4
 800a972:	bfb8      	it	lt
 800a974:	18e4      	addlt	r4, r4, r3
 800a976:	f000 f8df 	bl	800ab38 <__malloc_lock>
 800a97a:	4a1e      	ldr	r2, [pc, #120]	; (800a9f4 <_free_r+0x94>)
 800a97c:	9801      	ldr	r0, [sp, #4]
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	b933      	cbnz	r3, 800a990 <_free_r+0x30>
 800a982:	6063      	str	r3, [r4, #4]
 800a984:	6014      	str	r4, [r2, #0]
 800a986:	b003      	add	sp, #12
 800a988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a98c:	f000 b8da 	b.w	800ab44 <__malloc_unlock>
 800a990:	42a3      	cmp	r3, r4
 800a992:	d908      	bls.n	800a9a6 <_free_r+0x46>
 800a994:	6825      	ldr	r5, [r4, #0]
 800a996:	1961      	adds	r1, r4, r5
 800a998:	428b      	cmp	r3, r1
 800a99a:	bf01      	itttt	eq
 800a99c:	6819      	ldreq	r1, [r3, #0]
 800a99e:	685b      	ldreq	r3, [r3, #4]
 800a9a0:	1949      	addeq	r1, r1, r5
 800a9a2:	6021      	streq	r1, [r4, #0]
 800a9a4:	e7ed      	b.n	800a982 <_free_r+0x22>
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	b10b      	cbz	r3, 800a9b0 <_free_r+0x50>
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	d9fa      	bls.n	800a9a6 <_free_r+0x46>
 800a9b0:	6811      	ldr	r1, [r2, #0]
 800a9b2:	1855      	adds	r5, r2, r1
 800a9b4:	42a5      	cmp	r5, r4
 800a9b6:	d10b      	bne.n	800a9d0 <_free_r+0x70>
 800a9b8:	6824      	ldr	r4, [r4, #0]
 800a9ba:	4421      	add	r1, r4
 800a9bc:	1854      	adds	r4, r2, r1
 800a9be:	42a3      	cmp	r3, r4
 800a9c0:	6011      	str	r1, [r2, #0]
 800a9c2:	d1e0      	bne.n	800a986 <_free_r+0x26>
 800a9c4:	681c      	ldr	r4, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	6053      	str	r3, [r2, #4]
 800a9ca:	440c      	add	r4, r1
 800a9cc:	6014      	str	r4, [r2, #0]
 800a9ce:	e7da      	b.n	800a986 <_free_r+0x26>
 800a9d0:	d902      	bls.n	800a9d8 <_free_r+0x78>
 800a9d2:	230c      	movs	r3, #12
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	e7d6      	b.n	800a986 <_free_r+0x26>
 800a9d8:	6825      	ldr	r5, [r4, #0]
 800a9da:	1961      	adds	r1, r4, r5
 800a9dc:	428b      	cmp	r3, r1
 800a9de:	bf04      	itt	eq
 800a9e0:	6819      	ldreq	r1, [r3, #0]
 800a9e2:	685b      	ldreq	r3, [r3, #4]
 800a9e4:	6063      	str	r3, [r4, #4]
 800a9e6:	bf04      	itt	eq
 800a9e8:	1949      	addeq	r1, r1, r5
 800a9ea:	6021      	streq	r1, [r4, #0]
 800a9ec:	6054      	str	r4, [r2, #4]
 800a9ee:	e7ca      	b.n	800a986 <_free_r+0x26>
 800a9f0:	b003      	add	sp, #12
 800a9f2:	bd30      	pop	{r4, r5, pc}
 800a9f4:	200016b0 	.word	0x200016b0

0800a9f8 <sbrk_aligned>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	4e0e      	ldr	r6, [pc, #56]	; (800aa34 <sbrk_aligned+0x3c>)
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	6831      	ldr	r1, [r6, #0]
 800aa00:	4605      	mov	r5, r0
 800aa02:	b911      	cbnz	r1, 800aa0a <sbrk_aligned+0x12>
 800aa04:	f000 fe1c 	bl	800b640 <_sbrk_r>
 800aa08:	6030      	str	r0, [r6, #0]
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	f000 fe17 	bl	800b640 <_sbrk_r>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	d00a      	beq.n	800aa2c <sbrk_aligned+0x34>
 800aa16:	1cc4      	adds	r4, r0, #3
 800aa18:	f024 0403 	bic.w	r4, r4, #3
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	d007      	beq.n	800aa30 <sbrk_aligned+0x38>
 800aa20:	1a21      	subs	r1, r4, r0
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 fe0c 	bl	800b640 <_sbrk_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d101      	bne.n	800aa30 <sbrk_aligned+0x38>
 800aa2c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa30:	4620      	mov	r0, r4
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	200016b4 	.word	0x200016b4

0800aa38 <_malloc_r>:
 800aa38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	1ccd      	adds	r5, r1, #3
 800aa3e:	f025 0503 	bic.w	r5, r5, #3
 800aa42:	3508      	adds	r5, #8
 800aa44:	2d0c      	cmp	r5, #12
 800aa46:	bf38      	it	cc
 800aa48:	250c      	movcc	r5, #12
 800aa4a:	2d00      	cmp	r5, #0
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	db01      	blt.n	800aa54 <_malloc_r+0x1c>
 800aa50:	42a9      	cmp	r1, r5
 800aa52:	d905      	bls.n	800aa60 <_malloc_r+0x28>
 800aa54:	230c      	movs	r3, #12
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	2600      	movs	r6, #0
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab34 <_malloc_r+0xfc>
 800aa64:	f000 f868 	bl	800ab38 <__malloc_lock>
 800aa68:	f8d8 3000 	ldr.w	r3, [r8]
 800aa6c:	461c      	mov	r4, r3
 800aa6e:	bb5c      	cbnz	r4, 800aac8 <_malloc_r+0x90>
 800aa70:	4629      	mov	r1, r5
 800aa72:	4638      	mov	r0, r7
 800aa74:	f7ff ffc0 	bl	800a9f8 <sbrk_aligned>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	d155      	bne.n	800ab2a <_malloc_r+0xf2>
 800aa7e:	f8d8 4000 	ldr.w	r4, [r8]
 800aa82:	4626      	mov	r6, r4
 800aa84:	2e00      	cmp	r6, #0
 800aa86:	d145      	bne.n	800ab14 <_malloc_r+0xdc>
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	d048      	beq.n	800ab1e <_malloc_r+0xe6>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4638      	mov	r0, r7
 800aa92:	eb04 0903 	add.w	r9, r4, r3
 800aa96:	f000 fdd3 	bl	800b640 <_sbrk_r>
 800aa9a:	4581      	cmp	r9, r0
 800aa9c:	d13f      	bne.n	800ab1e <_malloc_r+0xe6>
 800aa9e:	6821      	ldr	r1, [r4, #0]
 800aaa0:	1a6d      	subs	r5, r5, r1
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f7ff ffa7 	bl	800a9f8 <sbrk_aligned>
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d037      	beq.n	800ab1e <_malloc_r+0xe6>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	442b      	add	r3, r5
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	f8d8 3000 	ldr.w	r3, [r8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d038      	beq.n	800ab2e <_malloc_r+0xf6>
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	42a2      	cmp	r2, r4
 800aac0:	d12b      	bne.n	800ab1a <_malloc_r+0xe2>
 800aac2:	2200      	movs	r2, #0
 800aac4:	605a      	str	r2, [r3, #4]
 800aac6:	e00f      	b.n	800aae8 <_malloc_r+0xb0>
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	1b52      	subs	r2, r2, r5
 800aacc:	d41f      	bmi.n	800ab0e <_malloc_r+0xd6>
 800aace:	2a0b      	cmp	r2, #11
 800aad0:	d917      	bls.n	800ab02 <_malloc_r+0xca>
 800aad2:	1961      	adds	r1, r4, r5
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	6025      	str	r5, [r4, #0]
 800aad8:	bf18      	it	ne
 800aada:	6059      	strne	r1, [r3, #4]
 800aadc:	6863      	ldr	r3, [r4, #4]
 800aade:	bf08      	it	eq
 800aae0:	f8c8 1000 	streq.w	r1, [r8]
 800aae4:	5162      	str	r2, [r4, r5]
 800aae6:	604b      	str	r3, [r1, #4]
 800aae8:	4638      	mov	r0, r7
 800aaea:	f104 060b 	add.w	r6, r4, #11
 800aaee:	f000 f829 	bl	800ab44 <__malloc_unlock>
 800aaf2:	f026 0607 	bic.w	r6, r6, #7
 800aaf6:	1d23      	adds	r3, r4, #4
 800aaf8:	1af2      	subs	r2, r6, r3
 800aafa:	d0ae      	beq.n	800aa5a <_malloc_r+0x22>
 800aafc:	1b9b      	subs	r3, r3, r6
 800aafe:	50a3      	str	r3, [r4, r2]
 800ab00:	e7ab      	b.n	800aa5a <_malloc_r+0x22>
 800ab02:	42a3      	cmp	r3, r4
 800ab04:	6862      	ldr	r2, [r4, #4]
 800ab06:	d1dd      	bne.n	800aac4 <_malloc_r+0x8c>
 800ab08:	f8c8 2000 	str.w	r2, [r8]
 800ab0c:	e7ec      	b.n	800aae8 <_malloc_r+0xb0>
 800ab0e:	4623      	mov	r3, r4
 800ab10:	6864      	ldr	r4, [r4, #4]
 800ab12:	e7ac      	b.n	800aa6e <_malloc_r+0x36>
 800ab14:	4634      	mov	r4, r6
 800ab16:	6876      	ldr	r6, [r6, #4]
 800ab18:	e7b4      	b.n	800aa84 <_malloc_r+0x4c>
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	e7cc      	b.n	800aab8 <_malloc_r+0x80>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	603b      	str	r3, [r7, #0]
 800ab22:	4638      	mov	r0, r7
 800ab24:	f000 f80e 	bl	800ab44 <__malloc_unlock>
 800ab28:	e797      	b.n	800aa5a <_malloc_r+0x22>
 800ab2a:	6025      	str	r5, [r4, #0]
 800ab2c:	e7dc      	b.n	800aae8 <_malloc_r+0xb0>
 800ab2e:	605b      	str	r3, [r3, #4]
 800ab30:	deff      	udf	#255	; 0xff
 800ab32:	bf00      	nop
 800ab34:	200016b0 	.word	0x200016b0

0800ab38 <__malloc_lock>:
 800ab38:	4801      	ldr	r0, [pc, #4]	; (800ab40 <__malloc_lock+0x8>)
 800ab3a:	f7ff bf00 	b.w	800a93e <__retarget_lock_acquire_recursive>
 800ab3e:	bf00      	nop
 800ab40:	200016ac 	.word	0x200016ac

0800ab44 <__malloc_unlock>:
 800ab44:	4801      	ldr	r0, [pc, #4]	; (800ab4c <__malloc_unlock+0x8>)
 800ab46:	f7ff befb 	b.w	800a940 <__retarget_lock_release_recursive>
 800ab4a:	bf00      	nop
 800ab4c:	200016ac 	.word	0x200016ac

0800ab50 <__ssputs_r>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	688e      	ldr	r6, [r1, #8]
 800ab56:	461f      	mov	r7, r3
 800ab58:	42be      	cmp	r6, r7
 800ab5a:	680b      	ldr	r3, [r1, #0]
 800ab5c:	4682      	mov	sl, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	4690      	mov	r8, r2
 800ab62:	d82c      	bhi.n	800abbe <__ssputs_r+0x6e>
 800ab64:	898a      	ldrh	r2, [r1, #12]
 800ab66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab6a:	d026      	beq.n	800abba <__ssputs_r+0x6a>
 800ab6c:	6965      	ldr	r5, [r4, #20]
 800ab6e:	6909      	ldr	r1, [r1, #16]
 800ab70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab74:	eba3 0901 	sub.w	r9, r3, r1
 800ab78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab7c:	1c7b      	adds	r3, r7, #1
 800ab7e:	444b      	add	r3, r9
 800ab80:	106d      	asrs	r5, r5, #1
 800ab82:	429d      	cmp	r5, r3
 800ab84:	bf38      	it	cc
 800ab86:	461d      	movcc	r5, r3
 800ab88:	0553      	lsls	r3, r2, #21
 800ab8a:	d527      	bpl.n	800abdc <__ssputs_r+0x8c>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f7ff ff53 	bl	800aa38 <_malloc_r>
 800ab92:	4606      	mov	r6, r0
 800ab94:	b360      	cbz	r0, 800abf0 <__ssputs_r+0xa0>
 800ab96:	6921      	ldr	r1, [r4, #16]
 800ab98:	464a      	mov	r2, r9
 800ab9a:	f7ff fed2 	bl	800a942 <memcpy>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	6126      	str	r6, [r4, #16]
 800abac:	6165      	str	r5, [r4, #20]
 800abae:	444e      	add	r6, r9
 800abb0:	eba5 0509 	sub.w	r5, r5, r9
 800abb4:	6026      	str	r6, [r4, #0]
 800abb6:	60a5      	str	r5, [r4, #8]
 800abb8:	463e      	mov	r6, r7
 800abba:	42be      	cmp	r6, r7
 800abbc:	d900      	bls.n	800abc0 <__ssputs_r+0x70>
 800abbe:	463e      	mov	r6, r7
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	4632      	mov	r2, r6
 800abc4:	4641      	mov	r1, r8
 800abc6:	f000 fcff 	bl	800b5c8 <memmove>
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	1b9b      	subs	r3, r3, r6
 800abce:	60a3      	str	r3, [r4, #8]
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	4433      	add	r3, r6
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	2000      	movs	r0, #0
 800abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abdc:	462a      	mov	r2, r5
 800abde:	f000 fd3f 	bl	800b660 <_realloc_r>
 800abe2:	4606      	mov	r6, r0
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d1e0      	bne.n	800abaa <__ssputs_r+0x5a>
 800abe8:	6921      	ldr	r1, [r4, #16]
 800abea:	4650      	mov	r0, sl
 800abec:	f7ff feb8 	bl	800a960 <_free_r>
 800abf0:	230c      	movs	r3, #12
 800abf2:	f8ca 3000 	str.w	r3, [sl]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ac02:	e7e9      	b.n	800abd8 <__ssputs_r+0x88>

0800ac04 <_svfiprintf_r>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	4698      	mov	r8, r3
 800ac0a:	898b      	ldrh	r3, [r1, #12]
 800ac0c:	061b      	lsls	r3, r3, #24
 800ac0e:	b09d      	sub	sp, #116	; 0x74
 800ac10:	4607      	mov	r7, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	d50e      	bpl.n	800ac36 <_svfiprintf_r+0x32>
 800ac18:	690b      	ldr	r3, [r1, #16]
 800ac1a:	b963      	cbnz	r3, 800ac36 <_svfiprintf_r+0x32>
 800ac1c:	2140      	movs	r1, #64	; 0x40
 800ac1e:	f7ff ff0b 	bl	800aa38 <_malloc_r>
 800ac22:	6028      	str	r0, [r5, #0]
 800ac24:	6128      	str	r0, [r5, #16]
 800ac26:	b920      	cbnz	r0, 800ac32 <_svfiprintf_r+0x2e>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e0d0      	b.n	800add4 <_svfiprintf_r+0x1d0>
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	616b      	str	r3, [r5, #20]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3a:	2320      	movs	r3, #32
 800ac3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac44:	2330      	movs	r3, #48	; 0x30
 800ac46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800adec <_svfiprintf_r+0x1e8>
 800ac4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4e:	f04f 0901 	mov.w	r9, #1
 800ac52:	4623      	mov	r3, r4
 800ac54:	469a      	mov	sl, r3
 800ac56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5a:	b10a      	cbz	r2, 800ac60 <_svfiprintf_r+0x5c>
 800ac5c:	2a25      	cmp	r2, #37	; 0x25
 800ac5e:	d1f9      	bne.n	800ac54 <_svfiprintf_r+0x50>
 800ac60:	ebba 0b04 	subs.w	fp, sl, r4
 800ac64:	d00b      	beq.n	800ac7e <_svfiprintf_r+0x7a>
 800ac66:	465b      	mov	r3, fp
 800ac68:	4622      	mov	r2, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	f7ff ff6f 	bl	800ab50 <__ssputs_r>
 800ac72:	3001      	adds	r0, #1
 800ac74:	f000 80a9 	beq.w	800adca <_svfiprintf_r+0x1c6>
 800ac78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7a:	445a      	add	r2, fp
 800ac7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 80a1 	beq.w	800adca <_svfiprintf_r+0x1c6>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac92:	f10a 0a01 	add.w	sl, sl, #1
 800ac96:	9304      	str	r3, [sp, #16]
 800ac98:	9307      	str	r3, [sp, #28]
 800ac9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9e:	931a      	str	r3, [sp, #104]	; 0x68
 800aca0:	4654      	mov	r4, sl
 800aca2:	2205      	movs	r2, #5
 800aca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca8:	4850      	ldr	r0, [pc, #320]	; (800adec <_svfiprintf_r+0x1e8>)
 800acaa:	f7f5 fa71 	bl	8000190 <memchr>
 800acae:	9a04      	ldr	r2, [sp, #16]
 800acb0:	b9d8      	cbnz	r0, 800acea <_svfiprintf_r+0xe6>
 800acb2:	06d0      	lsls	r0, r2, #27
 800acb4:	bf44      	itt	mi
 800acb6:	2320      	movmi	r3, #32
 800acb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acbc:	0711      	lsls	r1, r2, #28
 800acbe:	bf44      	itt	mi
 800acc0:	232b      	movmi	r3, #43	; 0x2b
 800acc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc6:	f89a 3000 	ldrb.w	r3, [sl]
 800acca:	2b2a      	cmp	r3, #42	; 0x2a
 800accc:	d015      	beq.n	800acfa <_svfiprintf_r+0xf6>
 800acce:	9a07      	ldr	r2, [sp, #28]
 800acd0:	4654      	mov	r4, sl
 800acd2:	2000      	movs	r0, #0
 800acd4:	f04f 0c0a 	mov.w	ip, #10
 800acd8:	4621      	mov	r1, r4
 800acda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acde:	3b30      	subs	r3, #48	; 0x30
 800ace0:	2b09      	cmp	r3, #9
 800ace2:	d94d      	bls.n	800ad80 <_svfiprintf_r+0x17c>
 800ace4:	b1b0      	cbz	r0, 800ad14 <_svfiprintf_r+0x110>
 800ace6:	9207      	str	r2, [sp, #28]
 800ace8:	e014      	b.n	800ad14 <_svfiprintf_r+0x110>
 800acea:	eba0 0308 	sub.w	r3, r0, r8
 800acee:	fa09 f303 	lsl.w	r3, r9, r3
 800acf2:	4313      	orrs	r3, r2
 800acf4:	9304      	str	r3, [sp, #16]
 800acf6:	46a2      	mov	sl, r4
 800acf8:	e7d2      	b.n	800aca0 <_svfiprintf_r+0x9c>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	1d19      	adds	r1, r3, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	9103      	str	r1, [sp, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bfbb      	ittet	lt
 800ad06:	425b      	neglt	r3, r3
 800ad08:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0c:	9307      	strge	r3, [sp, #28]
 800ad0e:	9307      	strlt	r3, [sp, #28]
 800ad10:	bfb8      	it	lt
 800ad12:	9204      	strlt	r2, [sp, #16]
 800ad14:	7823      	ldrb	r3, [r4, #0]
 800ad16:	2b2e      	cmp	r3, #46	; 0x2e
 800ad18:	d10c      	bne.n	800ad34 <_svfiprintf_r+0x130>
 800ad1a:	7863      	ldrb	r3, [r4, #1]
 800ad1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1e:	d134      	bne.n	800ad8a <_svfiprintf_r+0x186>
 800ad20:	9b03      	ldr	r3, [sp, #12]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	9203      	str	r2, [sp, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	bfb8      	it	lt
 800ad2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad30:	3402      	adds	r4, #2
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800adfc <_svfiprintf_r+0x1f8>
 800ad38:	7821      	ldrb	r1, [r4, #0]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	f7f5 fa27 	bl	8000190 <memchr>
 800ad42:	b138      	cbz	r0, 800ad54 <_svfiprintf_r+0x150>
 800ad44:	9b04      	ldr	r3, [sp, #16]
 800ad46:	eba0 000a 	sub.w	r0, r0, sl
 800ad4a:	2240      	movs	r2, #64	; 0x40
 800ad4c:	4082      	lsls	r2, r0
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	3401      	adds	r4, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	4825      	ldr	r0, [pc, #148]	; (800adf0 <_svfiprintf_r+0x1ec>)
 800ad5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad5e:	2206      	movs	r2, #6
 800ad60:	f7f5 fa16 	bl	8000190 <memchr>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d038      	beq.n	800adda <_svfiprintf_r+0x1d6>
 800ad68:	4b22      	ldr	r3, [pc, #136]	; (800adf4 <_svfiprintf_r+0x1f0>)
 800ad6a:	bb1b      	cbnz	r3, 800adb4 <_svfiprintf_r+0x1b0>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	3307      	adds	r3, #7
 800ad70:	f023 0307 	bic.w	r3, r3, #7
 800ad74:	3308      	adds	r3, #8
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7a:	4433      	add	r3, r6
 800ad7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7e:	e768      	b.n	800ac52 <_svfiprintf_r+0x4e>
 800ad80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad84:	460c      	mov	r4, r1
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7a6      	b.n	800acd8 <_svfiprintf_r+0xd4>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	3401      	adds	r4, #1
 800ad8e:	9305      	str	r3, [sp, #20]
 800ad90:	4619      	mov	r1, r3
 800ad92:	f04f 0c0a 	mov.w	ip, #10
 800ad96:	4620      	mov	r0, r4
 800ad98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9c:	3a30      	subs	r2, #48	; 0x30
 800ad9e:	2a09      	cmp	r2, #9
 800ada0:	d903      	bls.n	800adaa <_svfiprintf_r+0x1a6>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0c6      	beq.n	800ad34 <_svfiprintf_r+0x130>
 800ada6:	9105      	str	r1, [sp, #20]
 800ada8:	e7c4      	b.n	800ad34 <_svfiprintf_r+0x130>
 800adaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800adae:	4604      	mov	r4, r0
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7f0      	b.n	800ad96 <_svfiprintf_r+0x192>
 800adb4:	ab03      	add	r3, sp, #12
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	462a      	mov	r2, r5
 800adba:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <_svfiprintf_r+0x1f4>)
 800adbc:	a904      	add	r1, sp, #16
 800adbe:	4638      	mov	r0, r7
 800adc0:	f3af 8000 	nop.w
 800adc4:	1c42      	adds	r2, r0, #1
 800adc6:	4606      	mov	r6, r0
 800adc8:	d1d6      	bne.n	800ad78 <_svfiprintf_r+0x174>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	065b      	lsls	r3, r3, #25
 800adce:	f53f af2d 	bmi.w	800ac2c <_svfiprintf_r+0x28>
 800add2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800add4:	b01d      	add	sp, #116	; 0x74
 800add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adda:	ab03      	add	r3, sp, #12
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	462a      	mov	r2, r5
 800ade0:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <_svfiprintf_r+0x1f4>)
 800ade2:	a904      	add	r1, sp, #16
 800ade4:	4638      	mov	r0, r7
 800ade6:	f000 f9bd 	bl	800b164 <_printf_i>
 800adea:	e7eb      	b.n	800adc4 <_svfiprintf_r+0x1c0>
 800adec:	0800c23c 	.word	0x0800c23c
 800adf0:	0800c246 	.word	0x0800c246
 800adf4:	00000000 	.word	0x00000000
 800adf8:	0800ab51 	.word	0x0800ab51
 800adfc:	0800c242 	.word	0x0800c242

0800ae00 <__sfputc_r>:
 800ae00:	6893      	ldr	r3, [r2, #8]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	b410      	push	{r4}
 800ae08:	6093      	str	r3, [r2, #8]
 800ae0a:	da08      	bge.n	800ae1e <__sfputc_r+0x1e>
 800ae0c:	6994      	ldr	r4, [r2, #24]
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	db01      	blt.n	800ae16 <__sfputc_r+0x16>
 800ae12:	290a      	cmp	r1, #10
 800ae14:	d103      	bne.n	800ae1e <__sfputc_r+0x1e>
 800ae16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae1a:	f7ff bc82 	b.w	800a722 <__swbuf_r>
 800ae1e:	6813      	ldr	r3, [r2, #0]
 800ae20:	1c58      	adds	r0, r3, #1
 800ae22:	6010      	str	r0, [r2, #0]
 800ae24:	7019      	strb	r1, [r3, #0]
 800ae26:	4608      	mov	r0, r1
 800ae28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <__sfputs_r>:
 800ae2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	4614      	mov	r4, r2
 800ae36:	18d5      	adds	r5, r2, r3
 800ae38:	42ac      	cmp	r4, r5
 800ae3a:	d101      	bne.n	800ae40 <__sfputs_r+0x12>
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e007      	b.n	800ae50 <__sfputs_r+0x22>
 800ae40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae44:	463a      	mov	r2, r7
 800ae46:	4630      	mov	r0, r6
 800ae48:	f7ff ffda 	bl	800ae00 <__sfputc_r>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d1f3      	bne.n	800ae38 <__sfputs_r+0xa>
 800ae50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae54 <_vfiprintf_r>:
 800ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	460d      	mov	r5, r1
 800ae5a:	b09d      	sub	sp, #116	; 0x74
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	4698      	mov	r8, r3
 800ae60:	4606      	mov	r6, r0
 800ae62:	b118      	cbz	r0, 800ae6c <_vfiprintf_r+0x18>
 800ae64:	6a03      	ldr	r3, [r0, #32]
 800ae66:	b90b      	cbnz	r3, 800ae6c <_vfiprintf_r+0x18>
 800ae68:	f7ff fb20 	bl	800a4ac <__sinit>
 800ae6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae6e:	07d9      	lsls	r1, r3, #31
 800ae70:	d405      	bmi.n	800ae7e <_vfiprintf_r+0x2a>
 800ae72:	89ab      	ldrh	r3, [r5, #12]
 800ae74:	059a      	lsls	r2, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_vfiprintf_r+0x2a>
 800ae78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae7a:	f7ff fd60 	bl	800a93e <__retarget_lock_acquire_recursive>
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	071b      	lsls	r3, r3, #28
 800ae82:	d501      	bpl.n	800ae88 <_vfiprintf_r+0x34>
 800ae84:	692b      	ldr	r3, [r5, #16]
 800ae86:	b99b      	cbnz	r3, 800aeb0 <_vfiprintf_r+0x5c>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff fc86 	bl	800a79c <__swsetup_r>
 800ae90:	b170      	cbz	r0, 800aeb0 <_vfiprintf_r+0x5c>
 800ae92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae94:	07dc      	lsls	r4, r3, #31
 800ae96:	d504      	bpl.n	800aea2 <_vfiprintf_r+0x4e>
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9c:	b01d      	add	sp, #116	; 0x74
 800ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea2:	89ab      	ldrh	r3, [r5, #12]
 800aea4:	0598      	lsls	r0, r3, #22
 800aea6:	d4f7      	bmi.n	800ae98 <_vfiprintf_r+0x44>
 800aea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeaa:	f7ff fd49 	bl	800a940 <__retarget_lock_release_recursive>
 800aeae:	e7f3      	b.n	800ae98 <_vfiprintf_r+0x44>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb4:	2320      	movs	r3, #32
 800aeb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeba:	f8cd 800c 	str.w	r8, [sp, #12]
 800aebe:	2330      	movs	r3, #48	; 0x30
 800aec0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b074 <_vfiprintf_r+0x220>
 800aec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aec8:	f04f 0901 	mov.w	r9, #1
 800aecc:	4623      	mov	r3, r4
 800aece:	469a      	mov	sl, r3
 800aed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed4:	b10a      	cbz	r2, 800aeda <_vfiprintf_r+0x86>
 800aed6:	2a25      	cmp	r2, #37	; 0x25
 800aed8:	d1f9      	bne.n	800aece <_vfiprintf_r+0x7a>
 800aeda:	ebba 0b04 	subs.w	fp, sl, r4
 800aede:	d00b      	beq.n	800aef8 <_vfiprintf_r+0xa4>
 800aee0:	465b      	mov	r3, fp
 800aee2:	4622      	mov	r2, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	4630      	mov	r0, r6
 800aee8:	f7ff ffa1 	bl	800ae2e <__sfputs_r>
 800aeec:	3001      	adds	r0, #1
 800aeee:	f000 80a9 	beq.w	800b044 <_vfiprintf_r+0x1f0>
 800aef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef4:	445a      	add	r2, fp
 800aef6:	9209      	str	r2, [sp, #36]	; 0x24
 800aef8:	f89a 3000 	ldrb.w	r3, [sl]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 80a1 	beq.w	800b044 <_vfiprintf_r+0x1f0>
 800af02:	2300      	movs	r3, #0
 800af04:	f04f 32ff 	mov.w	r2, #4294967295
 800af08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0c:	f10a 0a01 	add.w	sl, sl, #1
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	9307      	str	r3, [sp, #28]
 800af14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af18:	931a      	str	r3, [sp, #104]	; 0x68
 800af1a:	4654      	mov	r4, sl
 800af1c:	2205      	movs	r2, #5
 800af1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af22:	4854      	ldr	r0, [pc, #336]	; (800b074 <_vfiprintf_r+0x220>)
 800af24:	f7f5 f934 	bl	8000190 <memchr>
 800af28:	9a04      	ldr	r2, [sp, #16]
 800af2a:	b9d8      	cbnz	r0, 800af64 <_vfiprintf_r+0x110>
 800af2c:	06d1      	lsls	r1, r2, #27
 800af2e:	bf44      	itt	mi
 800af30:	2320      	movmi	r3, #32
 800af32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af36:	0713      	lsls	r3, r2, #28
 800af38:	bf44      	itt	mi
 800af3a:	232b      	movmi	r3, #43	; 0x2b
 800af3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af40:	f89a 3000 	ldrb.w	r3, [sl]
 800af44:	2b2a      	cmp	r3, #42	; 0x2a
 800af46:	d015      	beq.n	800af74 <_vfiprintf_r+0x120>
 800af48:	9a07      	ldr	r2, [sp, #28]
 800af4a:	4654      	mov	r4, sl
 800af4c:	2000      	movs	r0, #0
 800af4e:	f04f 0c0a 	mov.w	ip, #10
 800af52:	4621      	mov	r1, r4
 800af54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af58:	3b30      	subs	r3, #48	; 0x30
 800af5a:	2b09      	cmp	r3, #9
 800af5c:	d94d      	bls.n	800affa <_vfiprintf_r+0x1a6>
 800af5e:	b1b0      	cbz	r0, 800af8e <_vfiprintf_r+0x13a>
 800af60:	9207      	str	r2, [sp, #28]
 800af62:	e014      	b.n	800af8e <_vfiprintf_r+0x13a>
 800af64:	eba0 0308 	sub.w	r3, r0, r8
 800af68:	fa09 f303 	lsl.w	r3, r9, r3
 800af6c:	4313      	orrs	r3, r2
 800af6e:	9304      	str	r3, [sp, #16]
 800af70:	46a2      	mov	sl, r4
 800af72:	e7d2      	b.n	800af1a <_vfiprintf_r+0xc6>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	1d19      	adds	r1, r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	9103      	str	r1, [sp, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	bfbb      	ittet	lt
 800af80:	425b      	neglt	r3, r3
 800af82:	f042 0202 	orrlt.w	r2, r2, #2
 800af86:	9307      	strge	r3, [sp, #28]
 800af88:	9307      	strlt	r3, [sp, #28]
 800af8a:	bfb8      	it	lt
 800af8c:	9204      	strlt	r2, [sp, #16]
 800af8e:	7823      	ldrb	r3, [r4, #0]
 800af90:	2b2e      	cmp	r3, #46	; 0x2e
 800af92:	d10c      	bne.n	800afae <_vfiprintf_r+0x15a>
 800af94:	7863      	ldrb	r3, [r4, #1]
 800af96:	2b2a      	cmp	r3, #42	; 0x2a
 800af98:	d134      	bne.n	800b004 <_vfiprintf_r+0x1b0>
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	1d1a      	adds	r2, r3, #4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	9203      	str	r2, [sp, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bfb8      	it	lt
 800afa6:	f04f 33ff 	movlt.w	r3, #4294967295
 800afaa:	3402      	adds	r4, #2
 800afac:	9305      	str	r3, [sp, #20]
 800afae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b084 <_vfiprintf_r+0x230>
 800afb2:	7821      	ldrb	r1, [r4, #0]
 800afb4:	2203      	movs	r2, #3
 800afb6:	4650      	mov	r0, sl
 800afb8:	f7f5 f8ea 	bl	8000190 <memchr>
 800afbc:	b138      	cbz	r0, 800afce <_vfiprintf_r+0x17a>
 800afbe:	9b04      	ldr	r3, [sp, #16]
 800afc0:	eba0 000a 	sub.w	r0, r0, sl
 800afc4:	2240      	movs	r2, #64	; 0x40
 800afc6:	4082      	lsls	r2, r0
 800afc8:	4313      	orrs	r3, r2
 800afca:	3401      	adds	r4, #1
 800afcc:	9304      	str	r3, [sp, #16]
 800afce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd2:	4829      	ldr	r0, [pc, #164]	; (800b078 <_vfiprintf_r+0x224>)
 800afd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afd8:	2206      	movs	r2, #6
 800afda:	f7f5 f8d9 	bl	8000190 <memchr>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d03f      	beq.n	800b062 <_vfiprintf_r+0x20e>
 800afe2:	4b26      	ldr	r3, [pc, #152]	; (800b07c <_vfiprintf_r+0x228>)
 800afe4:	bb1b      	cbnz	r3, 800b02e <_vfiprintf_r+0x1da>
 800afe6:	9b03      	ldr	r3, [sp, #12]
 800afe8:	3307      	adds	r3, #7
 800afea:	f023 0307 	bic.w	r3, r3, #7
 800afee:	3308      	adds	r3, #8
 800aff0:	9303      	str	r3, [sp, #12]
 800aff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff4:	443b      	add	r3, r7
 800aff6:	9309      	str	r3, [sp, #36]	; 0x24
 800aff8:	e768      	b.n	800aecc <_vfiprintf_r+0x78>
 800affa:	fb0c 3202 	mla	r2, ip, r2, r3
 800affe:	460c      	mov	r4, r1
 800b000:	2001      	movs	r0, #1
 800b002:	e7a6      	b.n	800af52 <_vfiprintf_r+0xfe>
 800b004:	2300      	movs	r3, #0
 800b006:	3401      	adds	r4, #1
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	4619      	mov	r1, r3
 800b00c:	f04f 0c0a 	mov.w	ip, #10
 800b010:	4620      	mov	r0, r4
 800b012:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b016:	3a30      	subs	r2, #48	; 0x30
 800b018:	2a09      	cmp	r2, #9
 800b01a:	d903      	bls.n	800b024 <_vfiprintf_r+0x1d0>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0c6      	beq.n	800afae <_vfiprintf_r+0x15a>
 800b020:	9105      	str	r1, [sp, #20]
 800b022:	e7c4      	b.n	800afae <_vfiprintf_r+0x15a>
 800b024:	fb0c 2101 	mla	r1, ip, r1, r2
 800b028:	4604      	mov	r4, r0
 800b02a:	2301      	movs	r3, #1
 800b02c:	e7f0      	b.n	800b010 <_vfiprintf_r+0x1bc>
 800b02e:	ab03      	add	r3, sp, #12
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	462a      	mov	r2, r5
 800b034:	4b12      	ldr	r3, [pc, #72]	; (800b080 <_vfiprintf_r+0x22c>)
 800b036:	a904      	add	r1, sp, #16
 800b038:	4630      	mov	r0, r6
 800b03a:	f3af 8000 	nop.w
 800b03e:	4607      	mov	r7, r0
 800b040:	1c78      	adds	r0, r7, #1
 800b042:	d1d6      	bne.n	800aff2 <_vfiprintf_r+0x19e>
 800b044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b046:	07d9      	lsls	r1, r3, #31
 800b048:	d405      	bmi.n	800b056 <_vfiprintf_r+0x202>
 800b04a:	89ab      	ldrh	r3, [r5, #12]
 800b04c:	059a      	lsls	r2, r3, #22
 800b04e:	d402      	bmi.n	800b056 <_vfiprintf_r+0x202>
 800b050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b052:	f7ff fc75 	bl	800a940 <__retarget_lock_release_recursive>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	065b      	lsls	r3, r3, #25
 800b05a:	f53f af1d 	bmi.w	800ae98 <_vfiprintf_r+0x44>
 800b05e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b060:	e71c      	b.n	800ae9c <_vfiprintf_r+0x48>
 800b062:	ab03      	add	r3, sp, #12
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	462a      	mov	r2, r5
 800b068:	4b05      	ldr	r3, [pc, #20]	; (800b080 <_vfiprintf_r+0x22c>)
 800b06a:	a904      	add	r1, sp, #16
 800b06c:	4630      	mov	r0, r6
 800b06e:	f000 f879 	bl	800b164 <_printf_i>
 800b072:	e7e4      	b.n	800b03e <_vfiprintf_r+0x1ea>
 800b074:	0800c23c 	.word	0x0800c23c
 800b078:	0800c246 	.word	0x0800c246
 800b07c:	00000000 	.word	0x00000000
 800b080:	0800ae2f 	.word	0x0800ae2f
 800b084:	0800c242 	.word	0x0800c242

0800b088 <_printf_common>:
 800b088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b08c:	4616      	mov	r6, r2
 800b08e:	4699      	mov	r9, r3
 800b090:	688a      	ldr	r2, [r1, #8]
 800b092:	690b      	ldr	r3, [r1, #16]
 800b094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b098:	4293      	cmp	r3, r2
 800b09a:	bfb8      	it	lt
 800b09c:	4613      	movlt	r3, r2
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b10a      	cbz	r2, 800b0ae <_printf_common+0x26>
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	0699      	lsls	r1, r3, #26
 800b0b2:	bf42      	ittt	mi
 800b0b4:	6833      	ldrmi	r3, [r6, #0]
 800b0b6:	3302      	addmi	r3, #2
 800b0b8:	6033      	strmi	r3, [r6, #0]
 800b0ba:	6825      	ldr	r5, [r4, #0]
 800b0bc:	f015 0506 	ands.w	r5, r5, #6
 800b0c0:	d106      	bne.n	800b0d0 <_printf_common+0x48>
 800b0c2:	f104 0a19 	add.w	sl, r4, #25
 800b0c6:	68e3      	ldr	r3, [r4, #12]
 800b0c8:	6832      	ldr	r2, [r6, #0]
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	42ab      	cmp	r3, r5
 800b0ce:	dc26      	bgt.n	800b11e <_printf_common+0x96>
 800b0d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0d4:	1e13      	subs	r3, r2, #0
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	bf18      	it	ne
 800b0da:	2301      	movne	r3, #1
 800b0dc:	0692      	lsls	r2, r2, #26
 800b0de:	d42b      	bmi.n	800b138 <_printf_common+0xb0>
 800b0e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	47c0      	blx	r8
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	d01e      	beq.n	800b12c <_printf_common+0xa4>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	6922      	ldr	r2, [r4, #16]
 800b0f2:	f003 0306 	and.w	r3, r3, #6
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	bf02      	ittt	eq
 800b0fa:	68e5      	ldreq	r5, [r4, #12]
 800b0fc:	6833      	ldreq	r3, [r6, #0]
 800b0fe:	1aed      	subeq	r5, r5, r3
 800b100:	68a3      	ldr	r3, [r4, #8]
 800b102:	bf0c      	ite	eq
 800b104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b108:	2500      	movne	r5, #0
 800b10a:	4293      	cmp	r3, r2
 800b10c:	bfc4      	itt	gt
 800b10e:	1a9b      	subgt	r3, r3, r2
 800b110:	18ed      	addgt	r5, r5, r3
 800b112:	2600      	movs	r6, #0
 800b114:	341a      	adds	r4, #26
 800b116:	42b5      	cmp	r5, r6
 800b118:	d11a      	bne.n	800b150 <_printf_common+0xc8>
 800b11a:	2000      	movs	r0, #0
 800b11c:	e008      	b.n	800b130 <_printf_common+0xa8>
 800b11e:	2301      	movs	r3, #1
 800b120:	4652      	mov	r2, sl
 800b122:	4649      	mov	r1, r9
 800b124:	4638      	mov	r0, r7
 800b126:	47c0      	blx	r8
 800b128:	3001      	adds	r0, #1
 800b12a:	d103      	bne.n	800b134 <_printf_common+0xac>
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b134:	3501      	adds	r5, #1
 800b136:	e7c6      	b.n	800b0c6 <_printf_common+0x3e>
 800b138:	18e1      	adds	r1, r4, r3
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	2030      	movs	r0, #48	; 0x30
 800b13e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b142:	4422      	add	r2, r4
 800b144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b14c:	3302      	adds	r3, #2
 800b14e:	e7c7      	b.n	800b0e0 <_printf_common+0x58>
 800b150:	2301      	movs	r3, #1
 800b152:	4622      	mov	r2, r4
 800b154:	4649      	mov	r1, r9
 800b156:	4638      	mov	r0, r7
 800b158:	47c0      	blx	r8
 800b15a:	3001      	adds	r0, #1
 800b15c:	d0e6      	beq.n	800b12c <_printf_common+0xa4>
 800b15e:	3601      	adds	r6, #1
 800b160:	e7d9      	b.n	800b116 <_printf_common+0x8e>
	...

0800b164 <_printf_i>:
 800b164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	7e0f      	ldrb	r7, [r1, #24]
 800b16a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b16c:	2f78      	cmp	r7, #120	; 0x78
 800b16e:	4691      	mov	r9, r2
 800b170:	4680      	mov	r8, r0
 800b172:	460c      	mov	r4, r1
 800b174:	469a      	mov	sl, r3
 800b176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b17a:	d807      	bhi.n	800b18c <_printf_i+0x28>
 800b17c:	2f62      	cmp	r7, #98	; 0x62
 800b17e:	d80a      	bhi.n	800b196 <_printf_i+0x32>
 800b180:	2f00      	cmp	r7, #0
 800b182:	f000 80d4 	beq.w	800b32e <_printf_i+0x1ca>
 800b186:	2f58      	cmp	r7, #88	; 0x58
 800b188:	f000 80c0 	beq.w	800b30c <_printf_i+0x1a8>
 800b18c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b194:	e03a      	b.n	800b20c <_printf_i+0xa8>
 800b196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b19a:	2b15      	cmp	r3, #21
 800b19c:	d8f6      	bhi.n	800b18c <_printf_i+0x28>
 800b19e:	a101      	add	r1, pc, #4	; (adr r1, 800b1a4 <_printf_i+0x40>)
 800b1a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a4:	0800b1fd 	.word	0x0800b1fd
 800b1a8:	0800b211 	.word	0x0800b211
 800b1ac:	0800b18d 	.word	0x0800b18d
 800b1b0:	0800b18d 	.word	0x0800b18d
 800b1b4:	0800b18d 	.word	0x0800b18d
 800b1b8:	0800b18d 	.word	0x0800b18d
 800b1bc:	0800b211 	.word	0x0800b211
 800b1c0:	0800b18d 	.word	0x0800b18d
 800b1c4:	0800b18d 	.word	0x0800b18d
 800b1c8:	0800b18d 	.word	0x0800b18d
 800b1cc:	0800b18d 	.word	0x0800b18d
 800b1d0:	0800b315 	.word	0x0800b315
 800b1d4:	0800b23d 	.word	0x0800b23d
 800b1d8:	0800b2cf 	.word	0x0800b2cf
 800b1dc:	0800b18d 	.word	0x0800b18d
 800b1e0:	0800b18d 	.word	0x0800b18d
 800b1e4:	0800b337 	.word	0x0800b337
 800b1e8:	0800b18d 	.word	0x0800b18d
 800b1ec:	0800b23d 	.word	0x0800b23d
 800b1f0:	0800b18d 	.word	0x0800b18d
 800b1f4:	0800b18d 	.word	0x0800b18d
 800b1f8:	0800b2d7 	.word	0x0800b2d7
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	602a      	str	r2, [r5, #0]
 800b204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b20c:	2301      	movs	r3, #1
 800b20e:	e09f      	b.n	800b350 <_printf_i+0x1ec>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	0607      	lsls	r7, r0, #24
 800b216:	f103 0104 	add.w	r1, r3, #4
 800b21a:	6029      	str	r1, [r5, #0]
 800b21c:	d501      	bpl.n	800b222 <_printf_i+0xbe>
 800b21e:	681e      	ldr	r6, [r3, #0]
 800b220:	e003      	b.n	800b22a <_printf_i+0xc6>
 800b222:	0646      	lsls	r6, r0, #25
 800b224:	d5fb      	bpl.n	800b21e <_printf_i+0xba>
 800b226:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b22a:	2e00      	cmp	r6, #0
 800b22c:	da03      	bge.n	800b236 <_printf_i+0xd2>
 800b22e:	232d      	movs	r3, #45	; 0x2d
 800b230:	4276      	negs	r6, r6
 800b232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b236:	485a      	ldr	r0, [pc, #360]	; (800b3a0 <_printf_i+0x23c>)
 800b238:	230a      	movs	r3, #10
 800b23a:	e012      	b.n	800b262 <_printf_i+0xfe>
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	6820      	ldr	r0, [r4, #0]
 800b240:	1d19      	adds	r1, r3, #4
 800b242:	6029      	str	r1, [r5, #0]
 800b244:	0605      	lsls	r5, r0, #24
 800b246:	d501      	bpl.n	800b24c <_printf_i+0xe8>
 800b248:	681e      	ldr	r6, [r3, #0]
 800b24a:	e002      	b.n	800b252 <_printf_i+0xee>
 800b24c:	0641      	lsls	r1, r0, #25
 800b24e:	d5fb      	bpl.n	800b248 <_printf_i+0xe4>
 800b250:	881e      	ldrh	r6, [r3, #0]
 800b252:	4853      	ldr	r0, [pc, #332]	; (800b3a0 <_printf_i+0x23c>)
 800b254:	2f6f      	cmp	r7, #111	; 0x6f
 800b256:	bf0c      	ite	eq
 800b258:	2308      	moveq	r3, #8
 800b25a:	230a      	movne	r3, #10
 800b25c:	2100      	movs	r1, #0
 800b25e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b262:	6865      	ldr	r5, [r4, #4]
 800b264:	60a5      	str	r5, [r4, #8]
 800b266:	2d00      	cmp	r5, #0
 800b268:	bfa2      	ittt	ge
 800b26a:	6821      	ldrge	r1, [r4, #0]
 800b26c:	f021 0104 	bicge.w	r1, r1, #4
 800b270:	6021      	strge	r1, [r4, #0]
 800b272:	b90e      	cbnz	r6, 800b278 <_printf_i+0x114>
 800b274:	2d00      	cmp	r5, #0
 800b276:	d04b      	beq.n	800b310 <_printf_i+0x1ac>
 800b278:	4615      	mov	r5, r2
 800b27a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b27e:	fb03 6711 	mls	r7, r3, r1, r6
 800b282:	5dc7      	ldrb	r7, [r0, r7]
 800b284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b288:	4637      	mov	r7, r6
 800b28a:	42bb      	cmp	r3, r7
 800b28c:	460e      	mov	r6, r1
 800b28e:	d9f4      	bls.n	800b27a <_printf_i+0x116>
 800b290:	2b08      	cmp	r3, #8
 800b292:	d10b      	bne.n	800b2ac <_printf_i+0x148>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	07de      	lsls	r6, r3, #31
 800b298:	d508      	bpl.n	800b2ac <_printf_i+0x148>
 800b29a:	6923      	ldr	r3, [r4, #16]
 800b29c:	6861      	ldr	r1, [r4, #4]
 800b29e:	4299      	cmp	r1, r3
 800b2a0:	bfde      	ittt	le
 800b2a2:	2330      	movle	r3, #48	; 0x30
 800b2a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2ac:	1b52      	subs	r2, r2, r5
 800b2ae:	6122      	str	r2, [r4, #16]
 800b2b0:	f8cd a000 	str.w	sl, [sp]
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	aa03      	add	r2, sp, #12
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	f7ff fee4 	bl	800b088 <_printf_common>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d14a      	bne.n	800b35a <_printf_i+0x1f6>
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c8:	b004      	add	sp, #16
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	f043 0320 	orr.w	r3, r3, #32
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	4833      	ldr	r0, [pc, #204]	; (800b3a4 <_printf_i+0x240>)
 800b2d8:	2778      	movs	r7, #120	; 0x78
 800b2da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	6829      	ldr	r1, [r5, #0]
 800b2e2:	061f      	lsls	r7, r3, #24
 800b2e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2e8:	d402      	bmi.n	800b2f0 <_printf_i+0x18c>
 800b2ea:	065f      	lsls	r7, r3, #25
 800b2ec:	bf48      	it	mi
 800b2ee:	b2b6      	uxthmi	r6, r6
 800b2f0:	07df      	lsls	r7, r3, #31
 800b2f2:	bf48      	it	mi
 800b2f4:	f043 0320 	orrmi.w	r3, r3, #32
 800b2f8:	6029      	str	r1, [r5, #0]
 800b2fa:	bf48      	it	mi
 800b2fc:	6023      	strmi	r3, [r4, #0]
 800b2fe:	b91e      	cbnz	r6, 800b308 <_printf_i+0x1a4>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	f023 0320 	bic.w	r3, r3, #32
 800b306:	6023      	str	r3, [r4, #0]
 800b308:	2310      	movs	r3, #16
 800b30a:	e7a7      	b.n	800b25c <_printf_i+0xf8>
 800b30c:	4824      	ldr	r0, [pc, #144]	; (800b3a0 <_printf_i+0x23c>)
 800b30e:	e7e4      	b.n	800b2da <_printf_i+0x176>
 800b310:	4615      	mov	r5, r2
 800b312:	e7bd      	b.n	800b290 <_printf_i+0x12c>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	6826      	ldr	r6, [r4, #0]
 800b318:	6961      	ldr	r1, [r4, #20]
 800b31a:	1d18      	adds	r0, r3, #4
 800b31c:	6028      	str	r0, [r5, #0]
 800b31e:	0635      	lsls	r5, r6, #24
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	d501      	bpl.n	800b328 <_printf_i+0x1c4>
 800b324:	6019      	str	r1, [r3, #0]
 800b326:	e002      	b.n	800b32e <_printf_i+0x1ca>
 800b328:	0670      	lsls	r0, r6, #25
 800b32a:	d5fb      	bpl.n	800b324 <_printf_i+0x1c0>
 800b32c:	8019      	strh	r1, [r3, #0]
 800b32e:	2300      	movs	r3, #0
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	4615      	mov	r5, r2
 800b334:	e7bc      	b.n	800b2b0 <_printf_i+0x14c>
 800b336:	682b      	ldr	r3, [r5, #0]
 800b338:	1d1a      	adds	r2, r3, #4
 800b33a:	602a      	str	r2, [r5, #0]
 800b33c:	681d      	ldr	r5, [r3, #0]
 800b33e:	6862      	ldr	r2, [r4, #4]
 800b340:	2100      	movs	r1, #0
 800b342:	4628      	mov	r0, r5
 800b344:	f7f4 ff24 	bl	8000190 <memchr>
 800b348:	b108      	cbz	r0, 800b34e <_printf_i+0x1ea>
 800b34a:	1b40      	subs	r0, r0, r5
 800b34c:	6060      	str	r0, [r4, #4]
 800b34e:	6863      	ldr	r3, [r4, #4]
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	2300      	movs	r3, #0
 800b354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b358:	e7aa      	b.n	800b2b0 <_printf_i+0x14c>
 800b35a:	6923      	ldr	r3, [r4, #16]
 800b35c:	462a      	mov	r2, r5
 800b35e:	4649      	mov	r1, r9
 800b360:	4640      	mov	r0, r8
 800b362:	47d0      	blx	sl
 800b364:	3001      	adds	r0, #1
 800b366:	d0ad      	beq.n	800b2c4 <_printf_i+0x160>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	079b      	lsls	r3, r3, #30
 800b36c:	d413      	bmi.n	800b396 <_printf_i+0x232>
 800b36e:	68e0      	ldr	r0, [r4, #12]
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	4298      	cmp	r0, r3
 800b374:	bfb8      	it	lt
 800b376:	4618      	movlt	r0, r3
 800b378:	e7a6      	b.n	800b2c8 <_printf_i+0x164>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4632      	mov	r2, r6
 800b37e:	4649      	mov	r1, r9
 800b380:	4640      	mov	r0, r8
 800b382:	47d0      	blx	sl
 800b384:	3001      	adds	r0, #1
 800b386:	d09d      	beq.n	800b2c4 <_printf_i+0x160>
 800b388:	3501      	adds	r5, #1
 800b38a:	68e3      	ldr	r3, [r4, #12]
 800b38c:	9903      	ldr	r1, [sp, #12]
 800b38e:	1a5b      	subs	r3, r3, r1
 800b390:	42ab      	cmp	r3, r5
 800b392:	dcf2      	bgt.n	800b37a <_printf_i+0x216>
 800b394:	e7eb      	b.n	800b36e <_printf_i+0x20a>
 800b396:	2500      	movs	r5, #0
 800b398:	f104 0619 	add.w	r6, r4, #25
 800b39c:	e7f5      	b.n	800b38a <_printf_i+0x226>
 800b39e:	bf00      	nop
 800b3a0:	0800c24d 	.word	0x0800c24d
 800b3a4:	0800c25e 	.word	0x0800c25e

0800b3a8 <__sflush_r>:
 800b3a8:	898a      	ldrh	r2, [r1, #12]
 800b3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	0710      	lsls	r0, r2, #28
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	d458      	bmi.n	800b468 <__sflush_r+0xc0>
 800b3b6:	684b      	ldr	r3, [r1, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	dc05      	bgt.n	800b3c8 <__sflush_r+0x20>
 800b3bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	dc02      	bgt.n	800b3c8 <__sflush_r+0x20>
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d0f9      	beq.n	800b3c2 <__sflush_r+0x1a>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3d4:	682f      	ldr	r7, [r5, #0]
 800b3d6:	6a21      	ldr	r1, [r4, #32]
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	d032      	beq.n	800b442 <__sflush_r+0x9a>
 800b3dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	075a      	lsls	r2, r3, #29
 800b3e2:	d505      	bpl.n	800b3f0 <__sflush_r+0x48>
 800b3e4:	6863      	ldr	r3, [r4, #4]
 800b3e6:	1ac0      	subs	r0, r0, r3
 800b3e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ea:	b10b      	cbz	r3, 800b3f0 <__sflush_r+0x48>
 800b3ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3ee:	1ac0      	subs	r0, r0, r3
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3f6:	6a21      	ldr	r1, [r4, #32]
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	47b0      	blx	r6
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	d106      	bne.n	800b410 <__sflush_r+0x68>
 800b402:	6829      	ldr	r1, [r5, #0]
 800b404:	291d      	cmp	r1, #29
 800b406:	d82b      	bhi.n	800b460 <__sflush_r+0xb8>
 800b408:	4a29      	ldr	r2, [pc, #164]	; (800b4b0 <__sflush_r+0x108>)
 800b40a:	410a      	asrs	r2, r1
 800b40c:	07d6      	lsls	r6, r2, #31
 800b40e:	d427      	bmi.n	800b460 <__sflush_r+0xb8>
 800b410:	2200      	movs	r2, #0
 800b412:	6062      	str	r2, [r4, #4]
 800b414:	04d9      	lsls	r1, r3, #19
 800b416:	6922      	ldr	r2, [r4, #16]
 800b418:	6022      	str	r2, [r4, #0]
 800b41a:	d504      	bpl.n	800b426 <__sflush_r+0x7e>
 800b41c:	1c42      	adds	r2, r0, #1
 800b41e:	d101      	bne.n	800b424 <__sflush_r+0x7c>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b903      	cbnz	r3, 800b426 <__sflush_r+0x7e>
 800b424:	6560      	str	r0, [r4, #84]	; 0x54
 800b426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b428:	602f      	str	r7, [r5, #0]
 800b42a:	2900      	cmp	r1, #0
 800b42c:	d0c9      	beq.n	800b3c2 <__sflush_r+0x1a>
 800b42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b432:	4299      	cmp	r1, r3
 800b434:	d002      	beq.n	800b43c <__sflush_r+0x94>
 800b436:	4628      	mov	r0, r5
 800b438:	f7ff fa92 	bl	800a960 <_free_r>
 800b43c:	2000      	movs	r0, #0
 800b43e:	6360      	str	r0, [r4, #52]	; 0x34
 800b440:	e7c0      	b.n	800b3c4 <__sflush_r+0x1c>
 800b442:	2301      	movs	r3, #1
 800b444:	4628      	mov	r0, r5
 800b446:	47b0      	blx	r6
 800b448:	1c41      	adds	r1, r0, #1
 800b44a:	d1c8      	bne.n	800b3de <__sflush_r+0x36>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0c5      	beq.n	800b3de <__sflush_r+0x36>
 800b452:	2b1d      	cmp	r3, #29
 800b454:	d001      	beq.n	800b45a <__sflush_r+0xb2>
 800b456:	2b16      	cmp	r3, #22
 800b458:	d101      	bne.n	800b45e <__sflush_r+0xb6>
 800b45a:	602f      	str	r7, [r5, #0]
 800b45c:	e7b1      	b.n	800b3c2 <__sflush_r+0x1a>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	e7ad      	b.n	800b3c4 <__sflush_r+0x1c>
 800b468:	690f      	ldr	r7, [r1, #16]
 800b46a:	2f00      	cmp	r7, #0
 800b46c:	d0a9      	beq.n	800b3c2 <__sflush_r+0x1a>
 800b46e:	0793      	lsls	r3, r2, #30
 800b470:	680e      	ldr	r6, [r1, #0]
 800b472:	bf08      	it	eq
 800b474:	694b      	ldreq	r3, [r1, #20]
 800b476:	600f      	str	r7, [r1, #0]
 800b478:	bf18      	it	ne
 800b47a:	2300      	movne	r3, #0
 800b47c:	eba6 0807 	sub.w	r8, r6, r7
 800b480:	608b      	str	r3, [r1, #8]
 800b482:	f1b8 0f00 	cmp.w	r8, #0
 800b486:	dd9c      	ble.n	800b3c2 <__sflush_r+0x1a>
 800b488:	6a21      	ldr	r1, [r4, #32]
 800b48a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b48c:	4643      	mov	r3, r8
 800b48e:	463a      	mov	r2, r7
 800b490:	4628      	mov	r0, r5
 800b492:	47b0      	blx	r6
 800b494:	2800      	cmp	r0, #0
 800b496:	dc06      	bgt.n	800b4a6 <__sflush_r+0xfe>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	e78e      	b.n	800b3c4 <__sflush_r+0x1c>
 800b4a6:	4407      	add	r7, r0
 800b4a8:	eba8 0800 	sub.w	r8, r8, r0
 800b4ac:	e7e9      	b.n	800b482 <__sflush_r+0xda>
 800b4ae:	bf00      	nop
 800b4b0:	dfbffffe 	.word	0xdfbffffe

0800b4b4 <_fflush_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	690b      	ldr	r3, [r1, #16]
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	b913      	cbnz	r3, 800b4c4 <_fflush_r+0x10>
 800b4be:	2500      	movs	r5, #0
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	b118      	cbz	r0, 800b4ce <_fflush_r+0x1a>
 800b4c6:	6a03      	ldr	r3, [r0, #32]
 800b4c8:	b90b      	cbnz	r3, 800b4ce <_fflush_r+0x1a>
 800b4ca:	f7fe ffef 	bl	800a4ac <__sinit>
 800b4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0f3      	beq.n	800b4be <_fflush_r+0xa>
 800b4d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4d8:	07d0      	lsls	r0, r2, #31
 800b4da:	d404      	bmi.n	800b4e6 <_fflush_r+0x32>
 800b4dc:	0599      	lsls	r1, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_fflush_r+0x32>
 800b4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4e2:	f7ff fa2c 	bl	800a93e <__retarget_lock_acquire_recursive>
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f7ff ff5d 	bl	800b3a8 <__sflush_r>
 800b4ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4f0:	07da      	lsls	r2, r3, #31
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	d4e4      	bmi.n	800b4c0 <_fflush_r+0xc>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	059b      	lsls	r3, r3, #22
 800b4fa:	d4e1      	bmi.n	800b4c0 <_fflush_r+0xc>
 800b4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4fe:	f7ff fa1f 	bl	800a940 <__retarget_lock_release_recursive>
 800b502:	e7dd      	b.n	800b4c0 <_fflush_r+0xc>

0800b504 <__swhatbuf_r>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	460c      	mov	r4, r1
 800b508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50c:	2900      	cmp	r1, #0
 800b50e:	b096      	sub	sp, #88	; 0x58
 800b510:	4615      	mov	r5, r2
 800b512:	461e      	mov	r6, r3
 800b514:	da0d      	bge.n	800b532 <__swhatbuf_r+0x2e>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b51c:	f04f 0100 	mov.w	r1, #0
 800b520:	bf0c      	ite	eq
 800b522:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b526:	2340      	movne	r3, #64	; 0x40
 800b528:	2000      	movs	r0, #0
 800b52a:	6031      	str	r1, [r6, #0]
 800b52c:	602b      	str	r3, [r5, #0]
 800b52e:	b016      	add	sp, #88	; 0x58
 800b530:	bd70      	pop	{r4, r5, r6, pc}
 800b532:	466a      	mov	r2, sp
 800b534:	f000 f862 	bl	800b5fc <_fstat_r>
 800b538:	2800      	cmp	r0, #0
 800b53a:	dbec      	blt.n	800b516 <__swhatbuf_r+0x12>
 800b53c:	9901      	ldr	r1, [sp, #4]
 800b53e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b542:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b546:	4259      	negs	r1, r3
 800b548:	4159      	adcs	r1, r3
 800b54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b54e:	e7eb      	b.n	800b528 <__swhatbuf_r+0x24>

0800b550 <__smakebuf_r>:
 800b550:	898b      	ldrh	r3, [r1, #12]
 800b552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b554:	079d      	lsls	r5, r3, #30
 800b556:	4606      	mov	r6, r0
 800b558:	460c      	mov	r4, r1
 800b55a:	d507      	bpl.n	800b56c <__smakebuf_r+0x1c>
 800b55c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	2301      	movs	r3, #1
 800b566:	6163      	str	r3, [r4, #20]
 800b568:	b002      	add	sp, #8
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
 800b56c:	ab01      	add	r3, sp, #4
 800b56e:	466a      	mov	r2, sp
 800b570:	f7ff ffc8 	bl	800b504 <__swhatbuf_r>
 800b574:	9900      	ldr	r1, [sp, #0]
 800b576:	4605      	mov	r5, r0
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff fa5d 	bl	800aa38 <_malloc_r>
 800b57e:	b948      	cbnz	r0, 800b594 <__smakebuf_r+0x44>
 800b580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b584:	059a      	lsls	r2, r3, #22
 800b586:	d4ef      	bmi.n	800b568 <__smakebuf_r+0x18>
 800b588:	f023 0303 	bic.w	r3, r3, #3
 800b58c:	f043 0302 	orr.w	r3, r3, #2
 800b590:	81a3      	strh	r3, [r4, #12]
 800b592:	e7e3      	b.n	800b55c <__smakebuf_r+0xc>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	6020      	str	r0, [r4, #0]
 800b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	9b00      	ldr	r3, [sp, #0]
 800b5a0:	6163      	str	r3, [r4, #20]
 800b5a2:	9b01      	ldr	r3, [sp, #4]
 800b5a4:	6120      	str	r0, [r4, #16]
 800b5a6:	b15b      	cbz	r3, 800b5c0 <__smakebuf_r+0x70>
 800b5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f000 f837 	bl	800b620 <_isatty_r>
 800b5b2:	b128      	cbz	r0, 800b5c0 <__smakebuf_r+0x70>
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
 800b5ba:	f043 0301 	orr.w	r3, r3, #1
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	431d      	orrs	r5, r3
 800b5c4:	81a5      	strh	r5, [r4, #12]
 800b5c6:	e7cf      	b.n	800b568 <__smakebuf_r+0x18>

0800b5c8 <memmove>:
 800b5c8:	4288      	cmp	r0, r1
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	eb01 0402 	add.w	r4, r1, r2
 800b5d0:	d902      	bls.n	800b5d8 <memmove+0x10>
 800b5d2:	4284      	cmp	r4, r0
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	d807      	bhi.n	800b5e8 <memmove+0x20>
 800b5d8:	1e43      	subs	r3, r0, #1
 800b5da:	42a1      	cmp	r1, r4
 800b5dc:	d008      	beq.n	800b5f0 <memmove+0x28>
 800b5de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5e6:	e7f8      	b.n	800b5da <memmove+0x12>
 800b5e8:	4402      	add	r2, r0
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	428a      	cmp	r2, r1
 800b5ee:	d100      	bne.n	800b5f2 <memmove+0x2a>
 800b5f0:	bd10      	pop	{r4, pc}
 800b5f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5fa:	e7f7      	b.n	800b5ec <memmove+0x24>

0800b5fc <_fstat_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d07      	ldr	r5, [pc, #28]	; (800b61c <_fstat_r+0x20>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	4611      	mov	r1, r2
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	f7f6 ff88 	bl	800251e <_fstat>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d102      	bne.n	800b618 <_fstat_r+0x1c>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	b103      	cbz	r3, 800b618 <_fstat_r+0x1c>
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	bd38      	pop	{r3, r4, r5, pc}
 800b61a:	bf00      	nop
 800b61c:	200016a8 	.word	0x200016a8

0800b620 <_isatty_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d06      	ldr	r5, [pc, #24]	; (800b63c <_isatty_r+0x1c>)
 800b624:	2300      	movs	r3, #0
 800b626:	4604      	mov	r4, r0
 800b628:	4608      	mov	r0, r1
 800b62a:	602b      	str	r3, [r5, #0]
 800b62c:	f7f6 ff87 	bl	800253e <_isatty>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d102      	bne.n	800b63a <_isatty_r+0x1a>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	b103      	cbz	r3, 800b63a <_isatty_r+0x1a>
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	200016a8 	.word	0x200016a8

0800b640 <_sbrk_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d06      	ldr	r5, [pc, #24]	; (800b65c <_sbrk_r+0x1c>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f6 ff90 	bl	8002570 <_sbrk>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_sbrk_r+0x1a>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_sbrk_r+0x1a>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	200016a8 	.word	0x200016a8

0800b660 <_realloc_r>:
 800b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b664:	4680      	mov	r8, r0
 800b666:	4614      	mov	r4, r2
 800b668:	460e      	mov	r6, r1
 800b66a:	b921      	cbnz	r1, 800b676 <_realloc_r+0x16>
 800b66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	4611      	mov	r1, r2
 800b672:	f7ff b9e1 	b.w	800aa38 <_malloc_r>
 800b676:	b92a      	cbnz	r2, 800b684 <_realloc_r+0x24>
 800b678:	f7ff f972 	bl	800a960 <_free_r>
 800b67c:	4625      	mov	r5, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	f000 f81b 	bl	800b6be <_malloc_usable_size_r>
 800b688:	4284      	cmp	r4, r0
 800b68a:	4607      	mov	r7, r0
 800b68c:	d802      	bhi.n	800b694 <_realloc_r+0x34>
 800b68e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b692:	d812      	bhi.n	800b6ba <_realloc_r+0x5a>
 800b694:	4621      	mov	r1, r4
 800b696:	4640      	mov	r0, r8
 800b698:	f7ff f9ce 	bl	800aa38 <_malloc_r>
 800b69c:	4605      	mov	r5, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d0ed      	beq.n	800b67e <_realloc_r+0x1e>
 800b6a2:	42bc      	cmp	r4, r7
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	bf28      	it	cs
 800b6aa:	463a      	movcs	r2, r7
 800b6ac:	f7ff f949 	bl	800a942 <memcpy>
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	f7ff f954 	bl	800a960 <_free_r>
 800b6b8:	e7e1      	b.n	800b67e <_realloc_r+0x1e>
 800b6ba:	4635      	mov	r5, r6
 800b6bc:	e7df      	b.n	800b67e <_realloc_r+0x1e>

0800b6be <_malloc_usable_size_r>:
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	1f18      	subs	r0, r3, #4
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfbc      	itt	lt
 800b6c8:	580b      	ldrlt	r3, [r1, r0]
 800b6ca:	18c0      	addlt	r0, r0, r3
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <_init>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr

0800b6dc <_fini>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	bf00      	nop
 800b6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e2:	bc08      	pop	{r3}
 800b6e4:	469e      	mov	lr, r3
 800b6e6:	4770      	bx	lr
